% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd-pkgmanager --- a package to shorten preambles
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
This file provides a phd for defining a class.
%</readme>
%<*readmemd>
# The `phddoc` LaTeX2e class

The `phd` latex package and the class with the same name provide
convenient methods to create new styles for books, reports
and articles. It also loads the most commonly used packages 
and resolves conflicts.

This class which is a part of the `phd` budle can be used to typeset documentation 
files using the `doc` and `docstrip` programs.

This work consists of the file  `phddoc.dtx`,
and the derived files   `phddoc.ins`,  `phddoc.pdf`, 
and `phddoc.cls`.

## Installation

On windows run
          phd-lua.bat phddoc.dtx
and on NIX systems run          
          lualatex phddoc.dtx
          biber
          lualatex phddoc.dtx
          makeindex -s gind.ist -g phd 

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com. Alternatively you can raise
an issue here on [github phd package issues](https://github.com/yannisl/phd/issues/new).

## Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use one command:

      \cxset{chapter name font-size = Huge,
             chapter number font-size = HUGE} 

## Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs. At present I estimate
that I have completed about 80% of the work that needs
to be done.

__The class as it stands is not production stable.__ 


%</readmemd>
%
%<*TODO>
# Outstanding Issues
1.  Add all references and final edit of documentation.
2. Improve on installation notes.
3. Add package examples and class examples in an examples directory.
4. Expand on TDS trees write-up.
5. Add acknowledgements.
6. Add summary.
7. Add a nice coverpage.
%</TODO>
%<*internal>
\fi
\def \nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phddoc --- A class to typeset LaTeX code.
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble
%\BaseDirectory{/usr/share/texmf}
%\usedir{tex/latex/phddoc}
\generate{\file{\jobname.cls}{
  \from{\jobname.dtx}{class}
   }
  }
%\nopreamble\nopostamble
%</install>

%<install>\endbatchfile
%<*internal>
%\usedir{tex/latex/phd}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble

\generate{
	\file{README.txt}{\from{\jobname.dtx}{readme}}
  }

\generate{
  \file{\jobname.md}{\from{\jobname.dtx}{readmemd}}
}
\generate{
  \file{TODO-PHDDOC.md}{\from{\jobname.dtx}{TODO}}
}

\ifx\fmtname\nameofplainTeXdgit stat
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>

%
%<class>\NeedsTeXFormat{LaTeX2e}
%<class>\ProvidesClass{phddoc}
%<class>         [2007/11/11 v2.0u Standard LaTeX documentation class]
%
%<*driver>
\documentclass[book]{phddoc}
\GetFileInfo{phddoc.cls}
\providecommand\dst{\expandafter{\normalfont\scshape docstrip}}

\title{The file \texttt{phddoc.dtx} for use with 
      \LaTeXe.\thanks{This file has version
           number \fileversion, dated \filedate.}\\[2pt]
      It contains the code for \texttt{phddoc.cls}}
\date{\filedate}
\author{Yannis Lazarides}
\usepackage{phd}
\usepackage{phd-colorpalette}
\usepackage{phd-runningheads}
\usepackage{phd-lowersections}
\usepackage{phd-runningheads}
\usepackage{phd-documentation}
\usepackage{phd-toc}
\usepackage[cache=false]{minted} 
\usemintedstyle[latex]{borland} 
\cxset{section format=hang}
\cxset{subsection afterindent=off}
\pagestyle{headings}
\sethyperref
\addbibresource{phd1.bib}
\input{defaults-chapters}
\cxset{palette spring onion}
\begin{document}
\DEBUGOFF
\frontmatter
\maketitle
\clearpage
\mainmatter
\tableofcontents
\input{./sections/classes}
 \DocInput{phddoc.dtx}
\end{document}
%</driver>
%
% \fi
%
% \CheckSum{392}
%
%  \pagestyle{headings}
% \cxset{chapter format=stewart}
% \chapter{User Manual}
%
% \section{Documentation of the \LaTeX\ sources}
%
% This is a class for documenting the \pkg{phd} bundle, a collection
% of packages and classes that enables the typesetting of documents
% using a flexible user interface,
% 
% You may however find it generally useful as a class for typesetting
% the documentation of files  produced in `doc' format.
%
% The class is written as a \enquote{self-contained} docstrip file: executing
% |latex phddoc.dtx| generates the \docFile{phddoc,cls} file and typesets
% this documentation; execute |tex l3doc.dtx| to only generate \docFile{phddoc.cls}.
%
% Each documented file in the standard distribution comes with extension
% |dtx|. The appropriate class package or initex file will be extracted
% from the source by the docstrip system. Each |dtx| file may be
% directly processed with \LaTeXe, for example
%\begin{verbatim}
% latex2e docclass.dtx
%\end{verbatim}
% would produce the documentation of the Class and package interface.
%
% Each file that is used in producing the \LaTeXe\ format (ie not
% including the standard class and packages) will be printed together in
% one document if you \LaTeX\ the file |sources2e.tex|. This has the
% advantage that one can produce a full index of macro usage across all
% the source files.
%
% If you need to customise the typesetting of any of these files, there
% are two options:
% \begin{itemize}
% \item You can use \dst\ with the module `driver' to extract a small
% \LaTeX\ file that you may edit to use whatever class or package
% options you require, before inputting the source file.
% \item You can create a file |phddoc.cfg|. This configuration file will
% be read whenever the |phddoc| class is used, and so can be used to
% customise the typesetting of all the source files, without having to
% edit lots of small driver files.
%\end{itemize}
%
% The second option is usually more convenient. Various possibilities
% are discussed in the next section.
%
% \section{Specification}
%
% The class builds on the \pkg{ltxdoc}\footcite{ltxdoc}  class and the 
% \pkg{doc}\footcite{doc} package, but since they were written many authors have
% come up with different ideas, as to how these documents should be
% produced.
%
% The LaTeX3 Team has also more recently developed the |l3doc| class and
% |l3docstrip| package for documenting the l3 sources. Othe Teams such as 
% the developers of \pkg{pgf} prefer not to use |docstrip| and document
% the code and user manuals in a more traditional way, as normal documents
% in conjuction with external scripts written in python.
% 
% My objectives in writing this package, was to integrate the ability of the
% other packages in this series to document code in a flexible way.
% For longer books, such as a thesis, where the author might use their own
% developed macros, it also enables one to use such a method. 
%
% The objectives are as follows:
%
% \begin{description}
% \item [Flexibilty]  Provide flexibility to use one of the standard \latex2e classes |article|, |book|  |report| or the |KOMA| classes |scrartcl|, |scrbook|, |scrreprt|
% as the main class. 
% \item [Style] Enable the use of a fully featured key value interface for documenting
%   the code.
% \item [Tools] Provide a series of tools to create new documents, formatting
%  and scaffolding. Currently LaTeX distributions have a plethora of tools, mostly
%  using perl and lately l3build using Lua. Perl tools have served the community well
% for many years. One such tool |ctanify| does not work using normal dstributions
% as the Perl bundled in the distributions has some missiong modules. Go is 
% a cross-compliation systems language enabling scripts to be bundled for different
% operating systems easily, hence the choice here.\footnote{See for example \protect\url{https://tex.stackexchange.com/questions/256096/which-perl-to-install-for-xindy-with-miktex-on-windows}}
% Some of these problems with Perl on Windows can be overcome using |Strawberry Perl|\footnote{Donload at \url{http://strawberryperl.com/}. This will also enable xindy to work on a MikTeX distribution.} For any conflicts follow the guidelines in penwatch.\footnote{\protect\url{https://www.penwatch.net/cms/pip_conflict/}}
%
% \begin{quote}
%    |phd ctanify  myclass.dtx  myclass.ins  README|
% \end{quote}
%
%
% \end{description} 
%
% \section{Customisation}
%
% The simplest form of customisation is to pass more options to the
% |article| class which is loaded by \pkg{phddoc}. For instance if you wish
% all the documentation to be formated for A4 paper, add the following
% line to |phddoc.cfg|:
%\begin{verbatim}
% \PassOptionsToClass{a4paper}{article}
%\end{verbatim}
%
% All the source files are in two parts, separated by |\StopEventually|.
% The first part (should) contain `user' documentation. The second part
% is a full documented listing of the source code. The |doc| package
% provides the command |\OnlyDescription| which suppresses the code
% listings. This may also be used in the configuration file, but as the
% |doc| package is read later, you must delay the execution of
% |\OnlyDescription| until after the |doc| package has been read. The
% simplest way is to use |\AtBeginDocument|. Thus you could put the
% following in your |phddoc.cfg|.
%\begin{verbatim}
% \AtBeginDocument{\OnlyDescription}
%\end{verbatim}
%
%
% If the full source listing |sources2e.tex| is processed, then an index
% and change history are produced by default, however indices are not
% normally produced for individual files.
%
% As an example, consider |ltclass.dtx|, which contains the sources for
% the new class and package interface commands.  With no |cfg|
% file, a 19~page document is produced. With the above configuration
% a slightly more readable document (4~pages) is produced.
%
% Conversely, if you really want to read the source listings in detail,
% you will want to have an index. Again the index commands provided by
% the doc package may be used, but their execution must be delayed.
%\begin{verbatim}
% \AtBeginDocument{\CodelineIndex\EnableCrossrefs}
% \AtEndDocument{\PrintIndex}
%\end{verbatim}
%
% The |doc| package writes index files to be sorted using MakeIndex with
% the |gind| style, so one would then use a command such as
%\begin{verbatim}
% makeindex -s gind.ist ltclass.idx
%\end{verbatim}
% and re-run \LaTeX.
%
% Similarly to print a Change history, you would add
%\begin{verbatim}
% \AtBeginDocument{\RecordChanges}
% \AtEndDocument{\PrintChanges}
%\end{verbatim}
% to |phddoc.cfg|, and use  MakeIndex with a comand such as
%\begin{verbatim}
% makeindex -s gglo.ist -o ltclass.gls ltclass.glo
%\end{verbatim}
%
% Finally if you do not want to list all the sections of |source2e.tex|,
% you can use  |\includeonly| in the |cfg| file:
%\begin{verbatim}
% \includeonly{ltvers,ltboxes}
%\end{verbatim}
%
% \StopEventually{}
%
% \chapter{Implementation Code}
% \section{Options}                       
%
%    \begin{macrocode}
%<*class>
\DeclareOption{a5paper}{\@latexerr{Option not supported}%
   {}}
\newif\if@book
\newif\if@article
\newif\if@report
\newif\if@scrbook
\newif\if@scrartcl
\newif\if@scrreprt

\DeclareOption{article}{\@articletrue} 
\DeclareOption{book}{\@booktrue} 
\DeclareOption{report}{\@reporttrue}
\DeclareOption{scrbook}{\@scrbooktrue}
\DeclareOption{scrartcl}{\@scrartcltrue}
\DeclareOption{scrreprt}{\@scrreprttrue}

%    \end{macrocode}
%
%    \begin{macrocode}
\DeclareOption*{%
    \PassOptionsToClass  {\CurrentOption}{book}}
%    \end{macrocode}
%
% \section{Configuration}
% Input a local configuration file, if it exists.
%    \begin{macrocode}
\InputIfFileExists{phddoc.cfg}
           {\typeout{*************************************^^J%
                     * Local config file phddoc.cfg used^^J%
                     *************************************}}
           {}
%    \end{macrocode}
%    
%
% \section{Option Processing}
%
%    \begin{macrocode}
\ProcessOptions
%    \end{macrocode}
%
% \section{Loading book and doc}
%
% The original |phddoc| uses the article class. For longer documentation it is preferable to use
% the book. This means we might get an error on the production of a title, which we will fix very soon.
%    \begin{macrocode}
\if@book
  \LoadClass{book}
    \else
      \if@article
        \LoadClass{article}
        \cxset{section number prefix=,}
        \else  
          \if@report
            \LoadClass{report}   
          \else
             \if@scrbook
             \LoadClass{scrbook}
             \else
             \if@scrartcl
                 %\cxset{section number prefix=,}
                 \LoadClass{scrartcl}   
                 \else
                 \if@scrreprt
                 \LoadClass{scrreprt}
              \fi   
           \fi  
      \fi
    \fi  
  \fi
\fi  
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage{doc}
\RequirePackage{expl3}
%    \end{macrocode}
%
% Make \verb+|+ be a `short verb' character, but not in the document
% preamble, where an active character may interfere with packages that
% are loaded.
%    \begin{macrocode}
\AtBeginDocument{\MakeShortVerb{\|}}
%    \end{macrocode}
%
% As `doc' documents tend to have a lot of monospaced material,
% Set up some |tt| substitutions to occur silently.
% \changes{v2.0p}{1995/11/02}{Add font substitutions}
% \changes{v2.0t}{1999/04/17}{Replaced octal number, CAR}
%    \begin{macrocode}
\DeclareFontShape{OT1}{cmtt}{bx}{n}{<-> ssub * cmtt/m/n}{}
\DeclareFontFamily{OMS}{cmtt}{\skewchar\font 48}  % '60
\DeclareFontShape{OMS}{cmtt}{m}{n}{<-> ssub * cmsy/m/n}{}
\DeclareFontShape{OMS}{cmtt}{bx}{n}{<-> ssub * cmsy/b/n}{}
%    \end{macrocode}
% This substitution is in the standard fd file, but not silent.
%    \begin{macrocode}
\DeclareFontShape{OT1}{cmss}{m}{it}{<->ssub*cmss/m/sl}{}
%    \end{macrocode}
%
%    \begin{macrocode}
\CodelineNumbered
\DisableCrossrefs
%    \end{macrocode}
%
% Increase the text width slightly so that width the standard fonts
% 72 columns of code may appear in a |macrocode| environment.
% \changes{v2.0c}{1994/03/15}{Set \cs{textwidth}.}
%    \begin{macrocode}
\setlength{\textwidth}{355pt}
%    \end{macrocode}
%
% Increase the marginpar width slightly, for long command names.
% And increase the left margin by a similar amount
% \changes{v2.0l}
%      {1994/05/25}{Increase \cs{marginparwidth}}
% \changes{v2.0q}{1995/11/28}
%      {Increase \cs{marginparwidth} and page margin.}
%    \begin{macrocode}
\addtolength\marginparwidth{30pt}
\addtolength\oddsidemargin{20pt}
\addtolength\evensidemargin{20pt}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\setcounter{StandardModuleDepth}{1}
%    \end{macrocode}
%
% \section{Useful abbreviations}
% The \pkg{phd-documentation} provides numerous commands for typesetting \latexe code.
% It is imported automatically by the |phddoc| class and hence the following 
% macros are described here for convenience.
% 
% |\cmd{\foo}| Prints |\foo| verbatim. It may be used inside moving
% arguments. It can \emph{not} be use to record commands that are defined as
%    ``|\outer|'' nor is it possible to use it on conditionals such as
%    |\iftrue| or  defined by |\newif|.
% |\cs{foo}| also prints \phdcs{foo}, for those who prefer that
% syntax. (This second form can be used to record all type of commends so the
%    above restrictions do not apply.
%
% \begin{macro}{\cmd}
% \begin{macro}{\cs}
% \changes{v2.0d}{1994/03/17}{Add \cs{cs}}
%    \begin{macrocode}
\def\cmd#1{\cs{\expandafter\cmd@to@cs\string#1}}
\def\cmd@to@cs#1#2{\char\number`#2\relax}
%\newcommand\cs[1]{\color{blue}{\texttt{\char`\ #1}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\marg}
%
%    |\marg{text}| prints \marg{text}, `mandatory argument'.
%    \begin{macrocode}
%\providecommand\marg[1]{%
%  {\ttfamily\char`\{}\meta{#1}{\ttfamily\char`\}}}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\oarg}
%    |\oarg{text}| prints \oarg{text}, `optional argument'.
%    \begin{macrocode}
%\providecommand\oarg[1]{%
%  {\ttfamily[}\meta{#1}{\ttfamily]}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\parg}
%    |\parg{te,xt}| prints \parg{te,xt}, `picture mode argument'.
%
%    \begin{macrocode}
\providecommand\parg[1]{%
  {\ttfamily(}\meta{#1}{\ttfamily)}}
%    \end{macrocode}
% \end{macro}
%
%

%
% \section{DocInclude}
%
%    \begin{macrocode}
\@addtoreset{CodelineNo}{part}
%    \end{macrocode}
%
% \begin{macro}{\DocInclude}
% More or less exactly the same as |\include|, but uses |\DocInput|
% on a |dtx| file, not |\input| on a |tex| file.
% \changes{v2.0b}{1994/03/14}{Rename from \cs{docinclude}}
% \changes{v2.0f}{1994/03/25}{Use \cs{part}}
% \changes{v2.0u}{1999/08/08}{Also works for .fdd (M. Schroeder)}
%    \begin{macrocode}
\def\partname{File}
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand*{\DocInclude}[1]{%
  \relax
  \clearpage
  \docincludeaux
  \IfFileExists{#1.fdd}{\def\currentfile{#1.fdd}}{\def\currentfile{#1.dtx}}%
  \ifnum\@auxout=\@partaux
    \@latexerr{\string\include\space cannot be nested}\@eha
  \else \@docinclude#1 \fi}
\def\@docinclude#1 {\clearpage
\if@filesw \immediate\write\@mainaux{\string\@input{#1.aux}}\fi
\@tempswatrue\if@partsw \@tempswafalse\edef\@tempb{#1}\@for
\@tempa:=\@partlist\do{\ifx\@tempa\@tempb\@tempswatrue\fi}\fi
\if@tempswa \let\@auxout\@partaux \if@filesw
\immediate\openout\@partaux #1.aux
\immediate\write\@partaux{\relax}\fi
%    \end{macrocode}
% We need to save (and later restore) various index-related
% commands which might be changed by the included file.
%    \begin{macrocode}
\let\@phddoc@PrintIndex\PrintIndex
\let\PrintIndex\relax
\let\@phddoc@PrintChanges\PrintChanges
\let\PrintChanges\relax
\let\@phddoc@theglossary\theglossary
\let\@phddoc@endtheglossary\endtheglossary
\part{\currentfile}%
  {\let\ttfamily\relax
  \xdef\filekey{\filekey, \thepart={\ttfamily\currentfile}}}%
\DocInput{\currentfile}%
\let\PrintIndex\@phddoc@PrintIndex
\let\PrintChanges\@phddoc@PrintChanges
\let\theglossary\@phddoc@theglossary
\let\endtheglossary\@phddoc@endtheglossary
\clearpage
\@writeckpt{#1}\if@filesw \immediate\closeout\@partaux \fi
\else\@nameuse{cp@#1}\fi\let\@auxout\@mainaux}
%    \end{macrocode}
%
%    \begin{macrocode}
\gdef\codeline@wrindex#1{\if@filesw
        \immediate\write\@indexfile
            {\string\indexentry{#1}%
            {\filesep\number\c@CodelineNo}}\fi}%
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\let\filesep\@empty
%    \end{macrocode}
%
%
%  \begin{macro}{\aalph}
% Special  form of |\alph| as currently |source2e.tex|
% includes more than 26 files
% \changes{v2.0n}{1994/05/27}{Use uppercase letters, for makeindex}.
%    \begin{macrocode}
\def\aalph#1{\@aalph{\csname c@#1\endcsname}}
\def\@aalph#1{%
  \ifcase#1\or a\or b\or c\or d\or e\or f\or g\or h\or i\or
         j\or k\or l\or m\or n\or o\or p\or q\or r\or s\or
         t\or u\or v\or w\or x\or y\or z\or A\or B\or C\or
         D\or E\or F\or G\or H\or I\or J\or K\or L\or M\or
         N\or O\or P\or Q\or R\or S\or T\or U\or V\or W\or
         X\or Y\or Z\else\@ctrerr\fi}
%    \end{macrocode}
%  \end{macro}
%
% \begin{macro}{\docincludeaux}
% \changes{v2.06}{1994/03/31}{Use \cs{footnotesize} in file key.}
% \changes{v2.0k}{1994/05/21}{Use \cs{aalph}}
%    \begin{macrocode}
\def\docincludeaux{%
  \def\thepart{\aalph{part}}\def\filesep{\thepart-}%
  \let\filekey\@gobble
  \g@addto@macro\index@prologue{%
    \gdef\@oddfoot{\parbox{\textwidth}{\strut\footnotesize
       \raggedright{\bfseries File Key:} \filekey}}%
    \let\@evenfoot\@oddfoot}%
  \global\let\docincludeaux\relax
 \gdef\@oddfoot{%
   \expandafter\ifx\csname ver@\currentfile\endcsname\relax
    File \thepart: {\ttfamily\currentfile} %
   \else
    \GetFileInfo{\currentfile}%
    File \thepart: {\ttfamily\filename} %
    Date: \filedate\ %
    Version \fileversion
    \fi
    \hfill\thepage}%
 \let\@evenfoot\@oddfoot}%
%    \end{macrocode}
% \end{macro}
% \begin{environment}{ddangernote}\end{environment}
% \begin{ddanger}
%   Use the double danger bend if there is something which could cause
%   serious problems when used in a wrong way. Better the normal user
%   does not know about such things.
% \end{ddanger}
%    \begin{macrocode}
\ExplSyntaxOn
\newenvironment {ddangernote}
  {
    \begin{trivlist}\item[]\noindent
    \begingroup\hangindent=3.5pc\hangafter=-2
    \cs_set:Npn \par{\endgraf\endgroup}
    \hbox to0pt{\hskip-\hangindent\dbend\kern2pt\dbend\hfill}\ignorespaces
  }{
      \par\end{trivlist}
  }
\ExplSyntaxOff  
%    \end{macrocode}
% 
% \begin{ddangernote}
% This is a double bend danger sign from \pkg{manfnt}\footcite{manfnt}
% \end{ddangernote}
%
%
%    \begin{macrocode}
\def\task#1#2{}
%</class>
%    \end{macrocode}
% \Finale
%
