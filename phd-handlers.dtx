% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd-pkgmanager --- a package to shorten preambles
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
This file provides a phd for defining a class.
%</readme>
%<*readmemd>
###The `phd` LaTeX2e package

The `phd` latex package and the class with the same name provide
convenient methods to create new styles for books, reports
and articles. It also loads the most commonly used packages 
and resolves conflicts.

This work consists of the file  `phd.dtx`,
and the derived files   `phd.ins`,  `phd.pdf`, and `phd.sty`.

###Installation

run
          phd-lua.bat on windows
           pdflatex phd.dtx
           makeindex -s gind.ist -g phd 

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com

### Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use one command:

      \cxset{chapter name font-size = Huge,
             chapter number font-size = HUGE} 

### Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs. At present I estimate
that I have completed about 70% of the work that needs
to be done.

__The package as it stands is not production stable.__ 


%</readmemd>
%
%<*TODO>
1. On final round add pkg options. This was left as last in order not to solve problems by adding
    options. Too many options are not a good User Interface.
2.  Finish symbol management, both text and math. Math already 80% incorporated.
3.  Better integration of indexing commands.   
4.  Revisit layout manager for Chapters. Broke again in tests.
5.  Docs. Add all references.
6.  Incorporate phd class for more flexibility.
7.  Improve package manager.
8.  Group script loading for better font management.
9.  General font management to relook it again.
10. Add all style sections (about 100 already prepared). Once they
     are all working issue beta version.
%</TODO>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phd --- A package to beautify documents.
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble

%\BaseDirectory{C:/users/admin/my documents/github/phd}
%\usedir{MWE}
\generate{\file{\jobname.sty}{
  \from{\jobname.dtx}{HANDLER}}
  }

%\nopreamble\nopostamble

%</install>

%<install>\endbatchfile
%<*internal>
%\usedir{tex/latex/phd}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble

\generate{
	\file{README.txt}{\from{\jobname.dtx}{readme}}
  }

\generate{
  \file{\jobname.md}{\from{\jobname.dtx}{readmemd}}
}
\generate{
  \file{\jobname-todo.tex}{\from{\jobname.dtx}{TODO}}
}

\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*driver>

%\listfiles
%gdef\@onlypreamble{} % TO BE REMOVED NEEDED FOR TUTS
\NeedsTeXFormat{LaTeX2e}[2017/04/15]%
\RequirePackage[2017/04/15]{latexrelease}
\documentclass[twoside,11pt,a4paper]{ltxdoc}
\usepackage{microtype}
\usepackage[bottom=2cm]{geometry}
\savegeometry{std}
% \usepackage[style=mla]{biblatex}
\usepackage{phd}
\usepackage{phd-documentation}
\usepackage{phd-toc}
\usepackage{phd-runningheads}
\usepackage{phd-lowersections}
\usepackage{makeidx}
%

\usepackage{phd-lists}
\pagestyle{headings}
\sethyperref
\cxset{palette bbc}
\makeindex
\begin{filecontents}{defaults-chapters}
%%    General Defaults for Chapters
\cxset{%    
    chapter title margin-top-width    =  0cm,
    chapter title margin-right-width  =  1cm,
    chapter title margin-bottom-width = 10pt,
    chapter title margin-left-width   = 0pt,
    chapter align                     = left,
    chapter title align               = left, %checked
    chapter name                      = hang,
    chapter format                    = fashion,
    chapter font-size                 = Huge,
    chapter font-weight               = bold,
    chapter font-family               = sffamily,
    chapter font-shape                = upshape,
    chapter color                     = auto,
    chapter number prefix             = ,
    chapter number suffix             = ,
    chapter numbering                 = arabic,
    chapter indent                    = 0pt,
    chapter beforeskip                = -3cm,
    chapter afterskip                 = 30pt,
    chapter afterindent               = off,
    chapter number after              = ,
    chapter arc                       = 0mm,
    chapter background-color          = bgsexy,
    chapter grow left                 = 0mm,
    chapter grow right                = 0mm, 
    chapter rounded corners           = northeast,
    chapter shadow                    = fuzzy halo,
    chapter border-left-width         = 0pt,
    chapter border-right-width        = 0pt,
    chapter border-top-width          = 0pt,
    chapter border-bottom-width       = 0pt,
    chapter padding-left-width        = 0pt,
    chapter padding-right-width       = 10pt,
    chapter padding-top-width         = 10pt,
    chapter padding-bottom-width      = 10pt,
    chapter number color              = white,
    chapter label color               = white,    
    }
 \cxset{    
    chapter number font-size        = Huge,
    chapter number font-weight      = bfseries,
    chapter number font-family      = sffamily,
    chapter number font-shape       = upshape,
    chapter number align            = Centering,
    }
\cxset{%    
     chapter title font-size        = Huge,
     chapter title font-weight      = bold,
     chapter title font-family      = calligra,
     chapter title font-shape       = upshape,
     chapter title color            = black,
     }    
\end{filecontents}

% input the defaults
\input{defaults-chapters}  

\cxset{chapter title color= creamy,
       chapter label color = creamy,
       chapter number color = creamy,
       chapter number color = white,
       chapter number font-size = Huge,
       subsection afterindent = false,
       chapter name = CHAPTER,
       chapter label case = upper,
       chapter number align=left,
       part format = traditional,
       part background-color=spot,
       part beforeskip                = -3cm,
       part afterskip                 = 30pt,
       section color = auto,
       }
\begin{document}
\DEBUGOFF
\parindent1em
\coverpage{asia}{Book Design Monographs}{Camel Press}{HANDLER}{DESIGN} 
\pagestyle{empty}
\secondpage
\pagestyle{empty}
\clearpage

\tableofcontents

\pagestyle{empty}
\setcounter{secnumdepth}{6}
\parskip0pt plus.1ex minus.1ex
\mainmatter
\pagenumbering{arabic}
\pagestyle{headings}        
\makeatletter
%\@debugtrue

\makeatother
\DocInput{\jobname.dtx}
\printindex
 %
% 
\end{document}
%</driver>
% \fi
% 
%  \CheckSum{0}
%  \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \changes{1.0}{2013/01/26}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
% \GetFileInfo{phd.dtx}
% 
%  \def\fileversion{v1.0}          
%  \def\filedate{2012/03/06}
% \title{The \textsf{phd} package.
% \thanks{This
%        file (\texttt{phd.dtx}) has version number \fileversion, last revised
%        \filedate.}
% }
% \author{Dr. Yiannis Lazarides \\ \url{yannislaz@gmail.com}}
% \date{\filedate}
%
%
% 
% ^^A\maketitle
% 
% ^^A\frontmatter
%  ^^A\coverpage{./images/hine02.jpg}{Book Design }{Camel Press}{}{}
%  \newpage
% ^^A\secondpage
% \pagestyle{empty}
%
%
% 
%
%
% \pagestyle{headings}
% \raggedbottom
%  \OnlyDescription
%
%  ^^A\StopEventually{\printindex}

% \CodelineNumbered
% \pagestyle{headings}
% 
% 
% ^^A\part{IMPLEMENTATION AND FRIENDS}
% 
%
% \chapter{Handlers Package Code Implementation Objectives and Strategy}
% 
% \epigraph{
% I was reflecting on the convoluted Java frameworks widely adopted at work. Those hefty frameworks brought coding structures and conventions to large engineering teams; meanwhile, they also sucked the fun of programming like a Pastafarian monster slurping all the tomato sauce on a plate of spaghetti.
%}{\href{http://blog.zmxv.com/2015/07/code-golf-at-google.html}{Zhen Wang}}
%
% We start by outlining what we are trying to achieve with this package:
%
% \begin{enumerate}
% \item To provide a declarative interface to enable users to modify headings by
%       setting keys, rather than writing macros.  
% \item The interface must be able to manupulate properties of headings down to
%       the last detail.
% \item To provide a compatibility mode, where documents wishing to test the package
% can have an easy switch to switch in and out. This is also important for the testing of the package.
% \item To provide a number of templates that cover most of the typical use case.
% \item To provide means for a plug-in architecture for extensions.

% \end{enumerate}
% 
% \section{Terminology}
%
%  \begin{description}
%  \item [document] Any written item, as a book, article, or letter, especially 
%                  of a factual or informative nature.
%  \item [heading] A division of a document or document series. For a normal
%        book headings are chapters, sections etc. However we allow for
%        specifying a more complex document divided into books, volumes
%        parts etc. For example the Bible has Books, chapters and verses,
%        where a legal document might require divisions such as clauses.
%        In general these divisions are numbered. These document divisions
%        are stored in the comma list \refCom{phd_book_divisions_clist}.
%  \item [head] A typeset heading, such as chapter head, or section head.
%        This can include a counter, label and title for example, 
%        \emph{Chapter 1 Introduction}.
%  \item [dom] This is a programming interface that provides a structured
%        representation of the document (a tree) and it defines a way
%        that the structure can be accessed. Although \latexe does not
%        offer a standard way to build such a tree (mainly because
%        \tex does not require the marking of paragraphs, it is 
%        useful to think of the document as a tree structure. We also
%        allow for a semi-automated way to build such a tree (with the 
%        exception that paragraphs are not included).
% \item [element] A part of the document tree that can be styled on
%       its own. For example the chapter label, or the section number.
%
% \end{description}
%
% \section{Users}
%  We classify users according to the \LaTeX3 terminology as a) programmers b) template designers
%  and c) authors.
% \subsection{Author}
%  We assume that the author has an exising template which she is using but might want to do
%  some minor modifications, for example use an italic shape for the font of the mark, but an 
%  upright font for the page numbers. 
%
% {\obeylines 
%~~ |\cxset|
%~~~~~|{|
%~~~~~~~~\textit{chapter number color}~~|format          = apa,|
%~~~~~~~~\textit{section title font-size} |font-size   = Large,|
%~~~~~|}|
%}  
%
% We follow the idea of representing the basic elements of documents
% as elements, each one having a parent in order to specify
% the element we need to style as accurate as possible. One can think of
% this approach being congruent with objects in other languages.
% As a matter fact nothing stops us from defining a key value
% interface as shown below.
%
% {\obeylines 
%~~ |\cxset|
%~~~~~|{| 
%~~~~~~~~\textit{header.even.mark.font.size}   = |Large,|
%~~~~~~~~\textit{header.even.mark.font.family} = |serif,|
%~~~~~|}|
%}  
%
% This would pehaps make it easier for the template designer, but I have rejected
% the idea as my aim is to make it easy for the author, who can search the template
% and just enter a couple of new proerty values.
%
% \subsection{Template designer}
% \pagestyle{headings}
% The template designer in the example above would have selected the format style
% from a number of predefined formats (templates) or would have created a style
% called \textit{apa} from an existing template and modified it using declarative
% key style.
%
% \subsection{The programmer}
%
% The programmer in the example above could have created the basic format
% \textit{apa} by using both declarative as well as defining or using existing
% macros. To the programmer we offer an extension mechanism, where the contents
% of a |ps@| command are defined. For example the programmer can define a new
% style using \tikzname, but without having to worry about defining full |ps@|
% and their interface.
%
% \section{Preliminaries}
%
%  Standard file identification. We first announce the package 
%	 and require that it be used with \LaTeX2e. 
% \iffalse
%<*HANDLER>
% \fi
%  
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[2017/04/15]%
\RequirePackage[2017/04/15]{latexrelease}
\ProvidesFile{phd-handlers}[2015/1/13 v1.0 less preamble (YL)]%
%    \end{macrocode}
%
% 
% \section{Source2e Interface}
% 
% I am not very fond of mixing expl3 control sequences with source2e commands. Here
% we provide an interface for all these commands we might use. 
% This section can be revisited once expl3 code becomes available.
%
%    \begin{macrocode}
\ExplSyntaxOn
\let\ltxtoday\today
\let\phd_hang_from:nn \@hangfrom
\newif\if@ltxcompat \@ltxcompatfalse
\ExplSyntaxOff
%    \end{macrocode}
%
% \section{PGF Key Handlers}
% 
% One of the greateset ideas in key management was pgf's handlers.
% New handlers can be added in quite easily and they are very versatile in
% this respect.
%
% \subsection{Font family handler}
% This handler first checks if the font-family has been supplied as a
% list. In this case it will call check font and pick the first available
% font.
%    \begin{macrocode}
\ExplSyntaxOn
\pgfkeys{%
   /handlers/.alias/.code=
      \pgfkeysedef\pgfkeyscurrentpath{%
                  \noexpand\pgfkeysalso{\pgfkeysdefaultpath#1={##1}}},%
     % /handlers/.alias/.value required,%
     % /handlers/.blank/.code=\pgfkeyssetvalue{\pgfkeyscurrentpath/.@blank}{#1},%
     % /handlers/.blank/.default=\pgfkeysnovalue,%
}

\clist_new:N \allowed_font_family_options
\clist_gset:Nn \allowed_font_family_options 
  {
    sffamily,rmfamily,ttfamily, normal,italic,oblique,
    itshape,slshape,upshape,sans-serif,serif,monospace,
    inherit,auto,normalfont
  }
% create aliases for some of the names to match those commonly
% used in css  NEEDS TESTING 
\cs_gset_eq:cc {bold} {bfseries}
  
  \pgfkeys{/handlers/.font-family~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_font_family_options {##1 } 
          {
           \gdef #1 {##1}
          } 
          {
            \gdef #1 {\sffamily}
          }
      }
  }   
   \pgfkeys{/handlers/.fontfamily/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:cpn {#1} { \normalfont } } 
               { rmfamily   } { \cs_gset:cpn {#1} { \rmfamily   } } 
               { serif      } { \cs_gset:cpn {#1} { \rmfamily   } } 
               { sans-serif } { \cs_gset:cpn {#1} { \sffamily   } } 
               { sffamily   } { \cs_gset:cpn {#1} { \sffamily   } }
               { ttfamily   } { \cs_gset:cpn {#1} { \ttfamily   } } 
              }
             {                                   }
             { \cs_gset:cpn {#1} {\cs:w ##1 \cs_end:} }
     }   
   }    
   
\ExplSyntaxOff    
%    \end{macrocode}
%
%  \subsection{Font face handler}  
%  The handler |.font-face in| creates a command for activating a font face
%  and also activates if it was not ? 
%  \begin{docCommand}{title_font_face} { \meta {font name}}
%   This peculiar handler is a store in that can be used for all elements. We defined
%   them as \meta{element}|_font_face|. This took a bit long to figure out. The
%   |allowed_font_face_options| will eventually be linked with the font loading mechanism.
%  \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn  
\clist_new:N \allowed_font_face_options
\clist_gset:Nn \allowed_font_face_options 
  {
    sffamily,rmfamily,ttfamily, normal,italic,oblique,
    itshape,slshape,upshape,sans-serif,serif,monospace,
    inherit,auto,tiresias,arial,pan
  }
% creat aliases for some of the names to match those commonly
% used in css.    
  
  \pgfkeys{/handlers/.font-face~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
         \IfNoValueTF {##1} {\@empty} 
           {
            \cs_if_exist:NTF { #1 } 
              { \gdef#1 {##1} }
              { \gdef#1 {\rmfamily} } %add error trapping as well
           }
          }
               
  }        
  
 \ExplSyntaxOff 
%    \end{macrocode}
% \subsection{Font face handler}
%    \begin{macrocode}
\ExplSyntaxOn
 \pgfkeys{/handlers/.set~font-face/.code=\pgfkeysalso {
     \pgfkeyscurrentpath/.code=
           \def\tempa{##1}
           \def\tempb{normal}
           \def#1{##1}
           \ifx\tempa\tempb
              \def#1{\normalfont}
           \fi
   }
 }   
\ExplSyntaxOff
%    \end{macrocode}
%
% \subsection{Fonts style handler}
%  This controls the input for font-shape or font-style, which they are equivalent.
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \allowed_font_style_options
\clist_gset:Nn \allowed_font_style_options {normal,upshape,itshape,oblique,slshape,italic}
% create some aliases also for these options.
\cs_gset_eq:cc {normal}{upshape}  
\cs_gset_eq:cc {italic}{itshape}
\cs_gset_eq:cc {oblique}{slshape}

\pgfkeys{/handlers/.font-style~in/.code =
     
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_font_style_options {##1 } 
          {
           \gdef #1 {##1}
          } 
          {
            \gdef#1 {upshape} %Plus error message
          }
      }
  }  
  \pgfkeys{/handlers/.fontstyle/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { normal       } { \cs_gset:cpn {#1} { \upshape   } }
               { upshape      } { \cs_gset:cpn {#1} { \upshape   } }  
               { itshape      } { \cs_gset:cpn {#1} { \itshape   } } 
               { italic       } { \cs_gset:cpn {#1} { \itshape   } } 
               { oblique      } { \cs_gset:cpn {#1} { \slshape   } } 
               { slshape      } { \cs_gset:cpn {#1} { \slshape   } } 
               { scshape      } { \cs_gset:cpn (#1) { \scshape   } }
             }
             {                                                     }
             { \cs_gset:cpn {#1} {##1}                          }
      }
   }    
  
\pgfkeys{/handlers/.listformat/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { normal       } { \cs_gset:cpn {#1} { \upshape   } }
               { upshape      } { \cs_gset:cpn {#1} { \upshape   } }  
               { itshape      } { \cs_gset:cpn {#1} { \itshape   } } 
               { italic       } { \cs_gset:cpn {#1} { \itshape   } } 
               { oblique      } { \cs_gset:cpn {#1} { \slshape   } } 
               { slshape      } { \cs_gset:cpn {#1} { \slshape   } } 
               { scshape      } { \cs_gset:cpn (#1) { \scshape   } }
             }
             {                                                     }
             { \cs_gset:cpn {#1} {##1}                          }
      }
   }   
\ExplSyntaxOff  
%    \end{macrocode}
%  
%   \begin{docCommand}{title_font_weight}{ \meta{font weight name}}
%     Handler for defining the font-weight of an element.
%   \end{docCommand}  
%   These are all very repetitive and could have been replaced by one
%   handler at the cost of obfuscating the code. 
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \allowed_font_weight_options
\clist_gset:Nn \allowed_font_weight_options 
  {
    normal,bold,bfseries,mdseries,none
  }
 \pgfkeys{/handlers/.font-weight~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none        } { \cs_gset:Npn #1 { empty    } } 
               { bold        } { \cs_gset:Npn #1 { bfseries } } 
               { normal      } { \cs_gset:Npn #1 { normalfont } } 
               { bfseries    } { \cs_gset:Npn #1 { bfseries } } 
               { mdseries    } { \cs_gset:Npn #1 { mdseries } } 
              }
             {                         }
             { \cs_gset:Npn #1 {empty} }
      }
}   
%    \end{macrocode}
%
% The |.fontweight| handler is used to define keys for \docValue{font-weight}.
%    \begin{macrocode}   
    \pgfkeys{/handlers/.fontweight/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:cpn {#1} { } } 
               { bold       } { \cs_gset:cpn {#1} { \bfseries } } 
               { normal     } { \cs_gset:cpn {#1} { } } 
               { bfseries   } { \cs_gset:cpn {#1} { \bfseries } } 
               { mdseries   } { \cs_gset:cpn {#1} { \mdseries } } 
              }
             {                               }
             { \cs_gset:cpn {#1} { } }
      }
   }   
\ExplSyntaxOff   
%    \end{macrocode}
%  The \texttt{font-size in} handler is defined next.
%  This can be set both as a command or a name.
%  
%  \begin{docCommand} {allowed_keys_font_size} {\meta{list of allowed keys}}
%    list with all allowed keys in the |phd system|
%  \end{docCommand} 
%
%  Coding this through |expl3| is such a pleasure and cut the previous code in half! 
%  The mavericks of the LaTeX3 Team pulled it off! It also
%  enables better error trapping and the allowed words can be configurable, one day!
%  For example if 38/52 is typed one can automatically set it to a specific size?
%  Could also allow say 10pt check in list if we have them and set it.
%  The keys auto, inherit, autoscale need development.
%
%  \docValue{auto} should scale one step down from parent element.
%  |inherit| takes the same value as the parent element
%  |autoscale| will fit the contents in the width of its container
%  box. (All three for next version)
%
%    \begin{macrocode}
\ExplSyntaxOn   
  
  \clist_new:N   \allowed_keys_font_size
  \clist_gset:Nn \allowed_keys_font_size 
    { 
      normal,tiny,footnotesize,small,
      scriptsize,
      large,Large,LARGE,
      huge,Huge,HUGE,HHUGE,
      HHHUGE,auto,inherit,
      autoscale,
    }
    
  \pgfkeys{/handlers/.font-size~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_keys_font_size {##1 } 
          {
           \cs_gset:Npn #1  {##1}
          } {normalsize}
      }
   }
%    \end{macrocode}  
%
% When the storing key is provided as a name we use the \docValue{.fontsize} handler.
%
%    \begin{macrocode}  
    \pgfkeys{/handlers/.fontsize/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { normal     } { \cs_gset:cpn {#1} { \normalsize } }
               { tiny      } { \cs_gset:cpn {#1} { \tiny      } } 
               { small      } { \cs_gset:cpn {#1} { \small      } }  
               { scriptsize } { \cs_gset:cpn {#1} { \scriptsize } }  
               { large      } { \cs_gset:cpn {#1} { \large      } } 
               { Large      } { \cs_gset:cpn {#1} { \Large      } } 
               { LARGE      } { \cs_gset:cpn {#1} { \LARGE      } } 
               { huge       } { \cs_gset:cpn {#1} { \huge       } } 
               { Huge       } { \cs_gset:cpn {#1} { \huge       } } 
               { HUGE       } { \cs_gset:cpn {#1} { \HUGE       } } 
               { HHUGE      } { \cs_gset:cpn {#1} { \HHUGE      } } 
               { HHHUGE     } { \cs_gset:cpn {#1} { \HHHUGE     } } 
              }
             {                         }
             { \cs_gset:cpn {#1} {##1} }
      }
   }    
\ExplSyntaxOff  
%    \end{macrocode}
% \subsection{Capitalization handler}
%  This handler is for making text upper or lower case. Took
%  a few tests to get it right! Will have to go to expl3 when
%  these work ok. \FIRE
%    \begin{macrocode}
\ExplSyntaxOn  
  \clist_new:N  \allowed_options_case 
  \clist_gset:Nn \allowed_options_case 
    { 
      lower,upper,none
    }
    
  \pgfkeys{/handlers/.case~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:Npn #1 { empty             } } 
               { lower      } { \cs_gset:Npn #1 { MakeTextLowercase } } 
               { lowercase  } { \cs_gset:Npn #1 { MakeTextLowercase } } 
               { upper      } { \cs_gset:Npn #1 { MakeTextUppercase } } 
               { uppercase  } { \cs_gset:Npn #1 { MakeTextUppercase } } 
               { upper case } { \cs_gset:Npn #1 { MakeTextUppercase } } 
             }
             {                         }
             { \cs_gset:Npn #1 {empty} }
      }
  }
  
\pgfkeys
 {/handlers/.case/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
         \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:cpn {#1} { \empty             } } 
               { lower      } { \cs_gset:cpn {#1} { \MakeTextLowercase } } 
               { lowercase  } { \cs_gset:cpn {#1} { \MakeTextLowercase } } 
               { upper      } { \cs_gset:cpn {#1} { \MakeTextUppercase } } 
               { uppercase  } { \cs_gset:cpn {#1} { \MakeTextUppercase } } 
               { upper~case } { \cs_gset:cpn {#1} { \MakeTextUppercase } } 
             }
             {                         }
             { \cs_gset:cpn #1 {\MakeTextLowercase} }
      }
  }  
  
 \pgfkeys
 {/handlers/.store/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
         \cs_gset:cpn {#1} {##1}
      }
  }   
\ExplSyntaxOff  
%    \end{macrocode}
% \subsection{Alignment handler}
%  This handler is for aligning text. We cater for all variations.
%    \begin{macrocode}
\ExplSyntaxOn  
  \pgfkeys{/handlers/.textalign/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none        } {  \cs_gset:cpn {#1} {}               } 
               { left        } {  \cs_gset:cpn {#1} { \RaggedRight } } 
               { RaggedLeft  } {  \cs_gset:cpn {#1} { \RaggedLeft  } } 
               { raggedleft  } {  \cs_gset:cpn {#1}  { \raggedleft } }
               { right       } {  \cs_gset:cpn {#1} { \RaggedLeft  } } 
               { RaggedRight } {  \cs_gset:cpn {#1} { \RaggedRight } } 
               { raggedright } {  \cs_gset:cpn {#1} { \raggedright } } 
               { center      } {  \cs_gset:cpn {#1} { \Centering   } } 
               { centre      } {  \cs_gset:cpn {#1} { \Centering   } } 
               { centering   } {  \cs_gset:cpn {#1} { \centering   } }
               { Centering   } {  \cs_gset:cpn {#1} { \Centering   } }
               { flushleft   } {  \cs_gset:cpn {#1} { \flushleft   } }
               { flushright  } {  \cs_gset:cpn {#1} { \flushright  } }
             }
             {                          }
             { \cs_gset:cpn #1 {\empty} }
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% 
% \subsection{On off general handlers}
%  This handler is for programmatically setting on off variables.
% 
%    \begin{macrocode}
\ExplSyntaxOn  
  \pgfkeys{/handlers/.onoff/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { on    }  { %\cs_gset:cpn {#1} {##1}  
                            \bool_if_exist:cTF {#1} { \bool_gset_true:c {#1} }
                                                 { \bool_new:c {#1}
                                                   \bool_gset_true:c {#1} 
                                                 } 
                          } 
               
               { off    }  { 
                            \bool_if_exist:cTF {#1} { \bool_gset_false:c {#1} }
                                                 { \bool_new:c {#1}
                                                   \bool_gset_false:c {#1} 
                                                 } 
                          } 
              
              { true    }  { %\cs_gset:cpn {#1} {##1}  
                            \bool_if_exist:cTF {#1} { \bool_gset_true:c {#1} }
                                                 { \bool_new:c {#1}
                                                   \bool_gset_true:c {#1} 
                                                 } 
                          } 
               
              { false    }  { 
                            \bool_if_exist:cTF {#1} { \bool_gset_false:c {#1} }
                                                 { \bool_new:c {#1}
                                                   \bool_gset_false:c {#1} 
                                                 } 
                          }             
             
             
             }
             {                           }
             { }%\cs_gset:cpn {#1} {empty} }
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}

% \subsection{Shadow handlers}
% 
% Many components can be rendered with shadows. This can be done through the
% tcolorbox shadowing commands or directly through \tikzname. The way parameters
% are specified in both cases results in multi-argument keys, which is generally
% against the philosophy of the mark-up semantics of the |phd| package. Most
% of these keys required color specification and or size specification.
% 
% Since colors are linked to palettes, I decided that the color part would belong to
% the palette settings rather than the shadow keys. Also any sizing of shadows has been
% delegated to default macros. This simplifies the user interface tremendously. 
% Should a template designer wish to provide a more complicated shadow, this can be
% achieved through the style property of the element.
%
% Shadows are only available when the box rendering engine depend on tcolorbox. 
%
%    \begin{macrocode}  

\ExplSyntaxOn
 \pgfkeys
 {/handlers/.shadow/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
         \str_case_x:nnTF {##1}  
             {
               { none               } { \cs_gset:cpn {#1} { {no~shadow} } } 
               { off               } { \cs_gset:cpn {#1} { {no~shadow} } } 
               { on               } { \cs_gset:cpn {#1} { {drop~shadow} } } 
               { drop~shadow        } { \cs_gset:cpn {#1} { drop~shadow } }
               { drop~lifted~shadow } { \cs_gset:cpn {#1} { {##1}       } } 
               { fuzzy~halo         } { \cs_gset:cpn {#1} { halostyle   } }
             }
             {                       }
             { \cs_gset:cpn {#1} {##1} }
      }
  } 
\ExplSyntaxOff  
%    \end{macrocode} 
% \tcbdocmarginnote{31/07/2017 Nasty bug fix, did not brace one argument of cpn, resulted redefining the |l|} 
% \subsection{Sectioning format handler}
%  This handler manages sectioning type formats. Not all of them are currently
%  defined.
%    \begin{macrocode}  
\ExplSyntaxOn
  \msg_new:nnnn {phd-handlers} {undefined-format}
    {`#1'~is~not~a~defined~format}
    {You~have~to~define~and~register~the~format~`#1'~before~you~can~use~it.}
    
  \clist_new:N   \allowed_options_format
  \clist_gset:Nn \allowed_options_format 
    { 
      plain, block, display, runin, leftmargin,
      rightmargin, drop, wrap, frame, custom, inline, inmargin,
      hanginmargin, paperback,fashion,traditional,hang,
    } 
  \pgfkeys{/handlers/.format~in/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_options_format {##1 } 
          {
           \cs_gset:cpn {#1} {##1} %true code
          } 
          {
             \cs_if_exist:cTF{##1}{ \cs_gset:cpn {#1}  {##1}}
             {
               \msg_error:nnx { phd-handlers } { undefined-format } {##1}
               % define it in any case until we have a stable API
               \cs_gset:cpn {#1}  {##1}
             } %false code
          } % to add that this is custom message and check if defined
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
%    \begin{macrocode} 

\ExplSyntaxOn
   \msg_new:nnnn {phd-handlers} {undefined-color}
    {`#1'~is~not~a~defined~color}
    {You~have~to~define~the~color~`#1'~before~you~can~use~it.~I~am~using~the~`current~default~color. Press~any~key~to~ continue.}
  \clist_new:N   \allowed_color_options
  \clist_gset:Nn \allowed_color_options 
    { 
      auto, palette,
    } 
  \pgfkeys{/handlers/.colorin/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_color_options  {##1 } 
          {
           %check to see if palette is defined
           \cs_if_exist:cTF{palettename}{\cs_gset:cpn{#1} {\color{the#1color}} }{
          % \cs_gset:cpn {#1} {\color{##1}}
           }
           
          } 
          {
           { 
           % We check that the color is defined
              \@ifundefined{\string\color@##1}{
                 \msg_error:nnx { phd-handlers } { undefined-color } {##1}
                 \colorlet{##1}{black}
               }
               { 
                 \cs_gset:cpn {#1} {\color{##1}} 
               }
           } %FIRE MUST CATER FOR SPECIALS
          } % to add that this is custom message and check if defined
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \subsection{Number format handler}
%
% \tcbdocmarginnote{U 3-07-2015}
%   This handler handles the definition of |\the|\meta{section} type commands. As
%   the first argument of the key handler is a command we need to remove the
%   |\the| part in order to define the counter correctly. One day we will
%   remove all \latexe's counters and use our own, then thsi would be unecessary.
%   as we need to gobble four tokens we need to define a |\use_v:nnnnn|, as
%   \pkgname{expl3} does not have one.
%   
% \begin{docCommand} {use_v:nnnnn} { \marg{arg1} \marg{arg2} \marg{arg3} \marg{arg4} \marg{arg5} }
%    Gobbles five arguments.
%  \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn 
  \cs_set:Npn \use_v:nnnnn #1#2#3#4#5 {#5}
   \cs_new:Npn \remove_the:#1
     {
       \exp_after:wN \use_v:nnnnn \token_to_str:N #1
     }
%    \end{macrocode}
% next we provide a function to remake the |the<name>| based on the
% key handler input.
%    \begin{macrocode}      
   \cs_gset:Npn \make_the_cmd: #1#2 
     {
       \cs_gset:Npn \countername { \remove_the:{#1} }
       \cs_gset:Npn #1 
         {
           \exp_after:wN \exp_after:wN \exp_after:wN #2
           \exp_after:wN \cs:w c@\countername\cs_end:
         }
    }  
%    \end{macrocode}
% In comparison to the mind twister above the key-handler is easily defined next
% and cuts quite a bit of code later.
%    \begin{macrocode}       
  \pgfkeys{/handlers/.numbering~in/.code = 
    
    \pgfkeysalso
      {  
        \pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:Npn #1     {}               }
               { arabic     } { \make_the_cmd: {#1} { \@arabic     } } 
               { Alpha      } { \make_the_cmd: {#1} { \@Alph       } } 
               { alph       } { \make_the_cmd: {#1} { \@alph       } } 
               { Roman      } { \make_the_cmd: {#1} { \@Roman      } } 
               { roman      } { \make_the_cmd: {#1} { \@roman      } }
               { WORDS      } { \make_the_cmd: {#1} { \WORDS@cx    } }
               { Words      } { \make_the_cmd: {#1} { \Words@cx    } }
               { words      } { \make_the_cmd: {#1} { \words@cx    } }
               { ordinals   } { \make_the_cmd: {#1} { \ordinals@cx } }
               { Ordinals   } { \make_the_cmd: {#1} { \ordinals@cx } }
               { ORDINALS   } { \make_the_cmd: {#1} { \ORDINALS@cx } }
               % add padzeroes later
             }
             {                         }
             { \cs_gset:Npn #1 {##1}   }
      }
  }
\ExplSyntaxOff  
%    \end{macrocode} 
%</HANDLER>
\endinput

