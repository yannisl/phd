% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd-scriptsmanager --- a package to shorten preambles
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

%</readme>
%<*readmemd>
# The `phd-scriptsmanager` LaTeX2e package version 0.08.0

The `phd-scriptsmanager` latex package and the class 
with the same name provide
convenient methods to create new styles for books, reports
and articles. It also loads the most commonly used packages 
and resolves conflicts.

This work consists of the file  

     `phd-scriptsmanager.dtx`,
     
and the derived files   

     `phd-scriptsmanager.ins`,  
     `phd-scriptsmanager.pdf`, 
     
     and 
     
     `phd-scriptsmanager.sty`.

## Installation

The documentation of this package uses numerous fonts not available in a
normal `TeX` distribution. Before you regenerate it, make sure you install these
fonts first. All fonts are with an open source license. 

The fonts we require for the `phd` system to be fully functional and capable
to typeset almost _any_ script or language that existed or is still live are
the following:

- The [noto](https://www.google.com/get/noto/) fonts from Google. the fonts
  are licenced under the [Apache License Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)  or the [SIL Open Font License, Version 1.1]. Download and
  install all the fonts.

- The ancient fonts provided by [George Douros](http://users.teilar.gr/~g1951d/). 

- The Tiresias PCfont font from  [Tiresias](http://www.tiresias.org/fonts/). This font
  is not actually used for scripts, but for experiments in readability. It looks
  very good for headings. The aim of this organization is to make Information
  Communication Technologies accessible to blind and partially sighted people. This
  I thought was a good opportunity to promote their work.
  
- code2000.ttf and code2001.ttf 

- Shonar Bangla font.

- Vrinda

- RibenUni.ttf from [hilledu.com]{http://uni.hilledu.com/} for Chakma script fonts.

If you have Windows

- Microsoft JhengHei and SimSun

There are many more fonts, I will revisit these docs to provide full documentation.

Once you ready then

run
     
      `phd-lua.bat` on windows
      
          

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com

## Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use the command `\cxset`:

      \cxset{chapter name font-size = Huge,
             chapter number font-size = HUGE} 

##  Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs. At present I estimate
that I have completed about 80% of the work that needs
to be done.

__The package as it stands is not production stable.__ 


%</readmemd>
%
%<*TODO-SCRIPTSMANAGER>
## phd-scriptmanager
1.  Document fully all fonts not availabe at CTAN and provide links or folder for download.
2.  More selective de-activation of scripts via keys.
3.  Messaging and errors need to be extended.
4.  Scripts DB and fonts DB for same.
5.  Test Module.
6.  On Demand loading of fonts.
%</TODO-SCRIPTSMANAGER>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phd-scriptsmanager --- A package to beautify documents.
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble

%\BaseDirectory{C:/users/admin/my documents/github/phd}
%\usedir{MWE}
\generate{\file{\jobname.sty}{
  \from{\jobname.dtx}{SCRIPTS}}
  }

%\nopreamble\nopostamble

%</install>

%<install>\endbatchfile
%<*internal>
%\usedir{tex/latex/phd}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble

\generate{
	\file{README.txt}{\from{\jobname.dtx}{readme}}
  }

\generate{
  \file{\jobname.md}{\from{\jobname.dtx}{readmemd}}
}
\generate{
  \file{\jobname-todo.tex}{\from{\jobname.dtx}{TODO-SCRIPTSMANAGER}}
}

\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*driver>
%\listfiles
\NeedsTeXFormat{LaTeX2e}[2017/04/15]%
\RequirePackage[2017/04/15]{latexrelease}
\documentclass[twoside,11pt,a4paper]{ltxdoc}
\usepackage[bottom=2cm]{geometry}
\usepackage{microtype}
\savegeometry{std}
\usepackage{phd}

\let\HUGE\Huge %Needs fixing
\usepackage{phd-documentation}
\usepackage{phd-toc}
%\usepackage{phd-runningheads}
\usepackage{phd-lowersections}
\usepackage{makeidx}
\usepackage{phd-lists}

\pagestyle{headings}
\usepackage{bera}
\sethyperref

\addbibresource{phd1.bib}

\cxset{palette architectural}
\makeindex
\cxset{section afterindent=off,
       subsection afterindent=off,
       chapter label background-color=white,
       chapter label font-weight=none,
       chapter number background-color=white,
       chapter background-color=white,
       chapter title before background-color=bgsexy,
       chapter title padding-bottom-width=10pt,
       chapter title margin-bottom-width=10pt,
       chapter title afterskip = 10pt,
       chapter frame-color=white,
       chapter shadow=none,
       chapter title align=RaggedRight,
       section format=hang,
       subsection format=hang,
       subsubsection format=hang,
       chapter opening=any}

     
\begin{document}


\DEBUGOFF
\parindent1em
\coverpage{asia}{Book Design Monographs}{Camel Press}{SCRIPTS}{DESIGN} 
\pagestyle{empty}
%\coverpage{habtoor-city}{Delay Claim}{HLS-DSE/JV}{HABTOOR CITY}{MEP CLAIM} 
\secondpage
\pagestyle{empty}
\clearpage

\tableofcontents

\pagestyle{empty}
\setcounter{secnumdepth}{6}
\parskip0pt plus.1ex minus.1ex
\mainmatter
\pagenumbering{arabic}
\pagestyle{headings} 
\hbadness=10001  

\hfuzz=50pt 
\vfuzz=50pt 

\vbadness=\maxdimen   
\makeatletter
%\@debugtrue

\makeatother
\newfontfamily\aegean{Aegean}
%\newfontfamily\lineara{Aegean.ttf}
%\newfontfamily\cypriote{Aegean.ttf}
\let\lineara\aegean
\let\cypriote\aegean
%\newfontfamily\lycian{Aegean.ttf}
\let\lycian\aegean
\let\lydian\lycian
\let\lydianfont\aegean
\let\carian\lydianfont
\newfontfamily\oldpersian{Noto Sans Old Persian}
\newfontfamily\inscriptionalpahlavi{Noto Sans Inscriptional Pahlavi}
\newfontfamily\imperialaramaic{NotoSansImperialAramaic-Regular.ttf}
\newfontfamily\avestan{NotoSansAvestan-Regular.ttf}
%\input{./sections/languages} OK

%\input{./languages/greek}
%\input{./languages/middle-eastern-scripts} OK
%\input{./languages/elbasan}
%\input{./languages/south-east-asian-scripts}
%
\cxset{chapter afterindent=off,
       subparagraph afterindent=on}
\input{south-asian-scripts}
\input{./languages/east-asian-scripts}
%\input{./languages/ancient-and-historic-scripts} %OK
%\input{./languages/modern-scripts}
%\input{./sections/i18n} 
%\input{./l3sections/l3main}
%\input{./golang/golang-01}
%\input{./golang/tools}


%\input{./sections/chapterdesign}
%\cxset{chapter format=block}
\input{./sections/languages}
\input{./sections/i18n}
\DocInput{\jobname.dtx}

\nocite{*}
\printbibliography
%\printindex
 %
% 
\end{document}
%</driver>
% \fi
% 
%  \CheckSum{0}
%  \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \changes{1.0}{2013/01/26}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
% \GetFileInfo{phd.dtx}
% 
%  ^^A\def\fileversion{v1.0}          
%  \def\filedate{2012/03/06}
% \title{The \textsf{phd} package.
% \thanks{This
%        file (\texttt{phd.dtx}) has version number ^^A\fileversion, last revised
%        \filedate.}
% }
% \author{Dr. Yiannis Lazarides \\ \url{yannislaz@gmail.com}}
% \date{\filedate}
%
%
% 
% ^^A\maketitle
% 
% ^^A\frontmatter
%  ^^A\coverpage{./images/hine02.jpg}{Book Design }{Camel Press}{}{}
%  \newpage
% ^^A\secondpage
% \pagestyle{empty}
%
%
% 
%
%
% \pagestyle{headings}
% \raggedbottom
%  \OnlyDescription
%
%^^A\StopEventually{\printindex}

% \CodelineNumbered
% \pagestyle{headings}
% 
% 
% ^^A\part{IMPLEMENTATION AND FRIENDS}
% 
%
% \chapter{Scripts Package Code Implementation Objectives and Strategy}
% 
% \epigraph{
% I was reflecting on the convoluted Java frameworks widely adopted at work. Those hefty frameworks brought coding structures and conventions to large engineering teams; meanwhile, they also sucked the fun of programming like a Pastafarian monster slurping all the tomato sauce on a plate of spaghetti.
%}{\href{http://blog.zmxv.com/2015/07/code-golf-at-google.html}{Zhen Wang}}
%
% \section{Specification}
%   We start by outlining what we are trying to achieve with this package:
%
%   \begin{enumerate}
%   \item To provide a declarative interface to enable modifying headings by
%       setting keys, rather than writing macros.  
%   \item The interface must be exhaustive enabling individual elements of a sectioning
%       block to change colors, widths, fonts etc,
%   \item To provide higher level styles that can style the heading with setting
%       only one key. 
%   \item to devise a scheme where the overall \enquote{shape} of a block be determined
%       using formats.
%   \item To provide a compatibility mode, where documents wishing to test the package
%      can have an easy switch to switch in and out. This is also important for the testing of the package.
%   \item To provide a number of templates that cover most of the typical use case.
%   \item To provide means for a plug-in architecture for extensions.
%   \item Allow the typesetting of any writing system defined in Unicode 10, with the
%      exception of any script that there are no fonts available. 
%   \item Allow the automatic generation of environemnts and text commands for writing systems.
%   \item Interface with the PHD-language modules---which in turn interfaces with Babel and Polyglossia.
%   \item Provide a CLI tool to make it easier to install all the missing fonts.
%   \item Allow for the creation of pan-unicode fonts. 
% \end{enumerate}
% 
% \section{Terminology}
%
%  \begin{description}
%  \item [document] Any written item, as a book, article, or letter, especially 
%                  of a factual or informative nature.
%  \item [heading] A division of a document or document series. For a normal
%        book headings are chapters, sections etc. However we allow for
%        specifying a more complex document divided into books, volumes
%        parts etc. For example the Bible has Books, chapters and verses,
%        where a legal document might require divisions such as clauses.
%        In general these divisions are numbered. These document divisions
%        are stored in the comma list \refCom{phd_book_divisions_clist}.
%  \item [head] A typeset heading, such as chapter head, or section head.
%        This can include a counter, label and title for example, 
%        \emph{Chapter 1 Introduction}.
%  \item [dom] This is a programming interface that provides a structured
%        representation of the document (a tree) and it defines a way
%        that the structure can be accessed. Although \latexe does not
%        offer a standard way to build such a tree (mainly because
%        \tex does not require the marking of paragraphs, it is 
%        useful to think of the document as a tree structure. We also
%        allow for a semi-automated way to build such a tree (with the 
%        exception that paragraphs are not included).
% \item [element] A part of the document tree that can be styled on
%       its own. For example the chapter label, or the section number.
%
% \end{description}
%
% \section{Users}
%  We classify users according to the \LaTeX3 terminology as a) programmers b) template designers
%  and c) authors.
% \subsection{Author}
%  We assume that the author has an exising template which she is using but might want to do
%  some minor modifications, for example use an italic shape for the font of the mark, but an 
%  upright font for the page numbers. 
%
% {\obeylines 
%~~ |\cxset|
%~~~~~|{|
%~~~~~~~~\textit{chapter number color}~~|format          = apa,|
%~~~~~~~~\textit{section title font-size} |font-size   = Large,|
%~~~~~|}|
%}  
%
% We follow the idea of representing the basic elements of documents
% as elements, each one having a parent in order to specify
% the element we need to style as accurate as possible. One can think of
% this approach being congruent with objects in other languages.
% As a matter fact nothing stops us from defining a key value
% interface as shown below.
%
% {\obeylines 
%~~ |\cxset|
%~~~~~|{| 
%~~~~~~~~\textit{header.even.mark.font.size}   = |Large,|
%~~~~~~~~\textit{header.even.mark.font.family} = |serif,|
%~~~~~|}|
%}  
%
% This would pehaps make it easier for the template designer, but I have rejected
% the idea as my aim is to make it easy for the author, who can search the template
% and just enter a couple of new proerty values.
%
% \subsection{Template designer}
% \pagestyle{headings}
% The template designer in the example above would have selected the format style
% from a number of predefined formats (templates) or would have created a style
% called \textit{apa} from an existing template and modified it using declarative
% key style.
%
% \subsection{The programmer}
%
% The programmer in the example above could have created the basic format
% \textit{apa} by using both declarative as well as defining or using existing
% macros. To the programmer we offer an extension mechanism, where the contents
% of a |ps@| command are defined. For example the programmer can define a new
% style using \tikzname, but without having to worry about defining full |ps@|
% and their interface.
%
% \section{Preliminaries}
%
%  Standard file identification. We first announce the package 
%	 and require that it be used with \LaTeX2e. 
% \iffalse
%<*SCRIPTS>
% \fi
%  
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[2017/04/15]%
\RequirePackage[2017/04/15]{latexrelease}
\ProvidesFile{phd-lists}[2015/1/13 v1.0 less preamble (YL)]%
%    \end{macrocode}
%
% \chapter{Scripts and Languages }
% 
%    \begin{macrocode} 
%
\ifengine
  {
    \PassOptionsToPackage{shorthands=off,italian,french,spanish,greek,ngerman,%
                                                 UKenglish}{polyglossia}
    \RequirePackage{polyglossia}
    \setdefaultlanguage{UKenglish}
  }  
  {%
   \PassOptionsToPackage{shorthands=off,italian,french,spanish,greek,ngerman,%
                                                UKenglish}{babel}
   \RequirePackage{babel}
   %babel
   \selectlanguage{UKenglish}
  }
  {\PassOptionsToPackage{shorthands=off,italian,french,spanish,greek,UKenglish }{babel}
    \RequirePackage{babel}
    \setdefaultlanguage{UKenglish}
  }
\begin{otherlanguage}{french}
\global\let\frenchenumerate\enumerate
%\global\let\endfrenchenumerate\endenumerate
\end{otherlanguage}
%
%    \end{macrocode}
%
%    \begin{macrocode}  
\RequirePackage[italian,UKenglish]{xlayouts}
%    \end{macrocode} 
% The clist \refCom{g_phd_scripts_clist} holds a list of all the scripts that have been loaded.
% Managing the user interface is problematic, we will have users that require
% only one script and users that might want all of them.
% There is also the issue between the blurring of alphabets, languages and scripts
% Since we will always specify a pan-unicode font, which we will make available
% with the |phd| package. We map all scripts to this font first.
%
% \begin{docCommand}{g_phd_scripts_clist} {\meta{clist}}
%   Holds a clist of all scripts loaded.
% \end{docCommand}
%
% 
%  Declare two global lists to hold all the scripts available.
% The |\script_prop| holds info for each script loaded
%
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \g_phd_scripts_clist
\clist_new:N \g_phd_noto_clist
\prop_new:N \script_prop
%\input{notolist.txt.tex}
%    \end{macrocode}
%
% \begin{docCommand}{g_phd_noto_clist}{\meta{clist}}
% Holds a list of all noto fonts available.
% \end{docCommand} 
%
% \begin{docCommand}{printnotofontlist}{clist}
% It typesets a list in a two column environment with all the available Noto fonts.
% \end{docCommand}

% 
%    \begin{macrocode}
\cs_set:Npn \printnotofontlist 
  {
    \begin{multicols}{2}
      \clist_map_inline:Nn \g_phd_noto_clist
        {
          ##1\par 
		  }
    \end{multicols}  
  }
%    \end{macrocode}
%	
% 
% 
%    \begin{macrocode}	
\prop_put:Nnn \script_prop {name}{Armenian}
\prop_put:Nnn \script_prop {fonts}{NotoArmenian-Regular.ttf, Others}
\prop_get:NnN \script_prop {fonts}\l_tempa_tl
\prop_put:Nnn \script_prop {group}{Europe}
\prop_get:NnN \script_prop {group} \l_tempa_tl
%    \end{macrocode}
%
% \begin{docCommand}{SetPanUnicodeFont}{\marg{font name}}
%  Sets the pan-unicode font. This font is to be used as a default for all the scripts
%  The user can override it with another font.
% \end{docCommand}
%
%    \begin{macrocode}
\NewDocumentCommand\SetPanUnicodeFont { m }
  {
     \gdef\panunicodefontface{#1}
     \newfontfamily\panunicode[Scale=MatchUppercase]{#1}
  }
%    \end{macrocode}  
%
%  We set the \docAuxCommand{panunicode} to |code2000.ttf|.
%
%    \begin{macrocode}  
\SetPanUnicodeFont{code2000.ttf}    
%    \end{macrocode}

% \begin{docCmd} {makepanfontfamily} { \marg{script name} }
%    
% \end{docCmd}
%    \begin{macrocode}
\cs_gset:Npn \makepanfontfamily#1
  {
%  \newfontfamily\cs:w #1fontfamily\cs_end: { #2 }
  \cs_gset_eq:cN {#1fontfamily} \panunicode
  \cs_gset_eq:cc {#1} {#1fontfamily}
}
%    \end{macrocode}
% 
% \begin{docCmd} {add_a_script:n} { \marg{script name}}
%   Given a script name this function, adds it to the tracking list
%   creates an appropriate envrironment and also a |text<script>| command. 
%   This might overwrite similar commands defined by other
%   packages.
% \end{docCmd}
%    \begin{macrocode}
\cs_gset:Npn \add_a_script:n #1
 {
   \clist_gput_left:Nn \g_phd_scripts_clist {#1 }
   \createscriptenvironment {#1}
   \createtextscript {#1}
 }   
 
 % add a script
\NewDocumentCommand\addascript { m } 
  {
    \add_a_script:n {#1}
  }
  
% Mock an environment 
\gdef\createscriptenvironment #1{
   \exp_after:wN\gdef\csname #1script\endcsname{\group_begin:
      \csname #1fontfamily\endcsname}
   \exp_after:wN\gdef\cs:w end#1script\cs_end:{\group_end: }
}  
\ExplSyntaxOff
%    \end{macrocode}
%  
% \begin{docCommand}{createtextscript}{ \marg{script name}}
%   This creates a command of the form |\text|\meta{script name} i.e., for tibetan
%   it will produce |\texttibetan|
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \createtextscript #1{
   \long\exp_after:wN\gdef\csname text#1\endcsname ##1
   {
      \group_begin: 
      \cs:w #1fontfamily\cs_end:
        ##1
     \group_end:
   }
}  
%
%
\cs_gset:Npn \makefontfamily#1#2 {
\if_meaning:w\panunicodefontface#2
  \else:
  \exp_after:wN
  \newfontfamily\cs:w #1fontfamily\cs_end: { #2 }
  \cs_gset_eq:cc {#1} {#1fontfamily}
\fi:  
}

\ExplSyntaxOff

\NewDocumentCommand\AddScript { m } {
    \cxset{script/.code=\addascript{##1}}
    \cxset{#1 font/.code=\makefontfamily{#1}{##1}}
    \cxset{script=#1}
    \cxset{#1 font=\panunicodefontface}
}

\cxset{add script/.code = \AddScript{#1}}

\ExplSyntaxOn
\clist_gset:Nn \g_phd_scripts_clist 
  {
      armenian,
      %hebrew,
      % arabic,
      syriac,
      thaana,
      devanagari,
      bamum,
      bengali,
      brahmi,
      buhid,
      bopomofo,
      cham,
      cherokee,
      cjk,
      coptic,
      cypriot,
      %e
      ethiopic,
      georgian,
      glagolitic,
      gurmukhi,
      gujarati,
      kayahli,
      lao,
      lisu,      
      kannada,
      malayalam,
      myanmar,
      ogham,
      oriya,
      oldturkic,
      phoenician, 
      runic,
      tamil,
      thai,
      tibetan,
      tifinagh, 
      telugu, 
      vai,
      rejang,
      saurashtra,
      sinhala,
      sylhetinagari,
      sundanese,%check this
      yi,%check
      meitei,%check
      mongolian,
}

\clist_map_inline:Nn\g_phd_scripts_clist 
  {
    \AddScript{#1}
    \makepanfontfamily {#1}
  }
\ExplSyntaxOff

\newfontfamily\arabicfont[Script=Arabic]{Amiri}
\newfontfamily\arabicfonttt[Script=Arabic,Scale=.75]{DejaVu   Sans Mono}
\newenvironment{Arabic}
   {\bgroup \arabicfont}
   {\egroup}
%    \end{macrocode}
%
% A small utility macro to typeset unicode tables
% examples can be see in the chapters for scripts.
%puts the unicode label (removes last char and adds x)
%
% \begin{docCommand} {putunicode@label} {\marg{unformatted string}} 
%  This macro receives a number in hexadecimal, removes the last
%  0 and replaces it with an x. It then prepends a U+ to fomat it
%  as a Unicode number e.g. U+0100x
% \end{docCommand}
% 
%    \begin{macrocode}
\newcounter{glyph@count}%counts glyphs
%    \end{macrocode}
%		
%		
%    \begin{macrocode}
\ExplSyntaxOn
\def\textU#1{{\unicodenumberfam #1}}
\ExplSyntaxOff
%    \end{macrocode}
%		
%    \begin{macrocode}
\def\putunicode@label#1#2;{%
%    \end{macrocode}
%    
%    \begin{macrocode}
\def\reformat@unicode@string##1{%
   \textU{U+}%
  \let\z\empty%
  \expandafter\@tfor\expandafter\i\expandafter:\expandafter=#2;\do{%
  \if\i;%
    \textU{x}%
  \else%
    \textU{\z}%
  \fi%
  \edef\z{\i}%
 }%
}%
  \makebox[5em]{\reformat@unicode@string{#2}\hfill}%
}
%    \end{macrocode}
% 
% \begin{docCommand} {putchar@cx} {\meta{char}}
% \end{docCommand}
% 
%    \begin{macrocode}


\bgroup \catcode`\"=12 
\def\putchar@cx#1{%

\stepcounter{glyph@count}
%\let\oldactive@prefix\active@prefix
%\let\active@prefix\relax
   \iffontchar\font\n
     \char\the\n$_{\pgfmathparse{Hex(\the\r@cx)}\text{\pgfmathresult}}$%
      %
   \else
    {\arial\graybox}
   \fi
%\let\active@prefix\oldactive@prefix
 }
\global \let\putchar@cx\putchar@cx
\egroup
%    \end{macrocode}
%    
%  typesets one row of a unicode table
%    \begin{macrocode}    
\def\urow@cx#1{%
    \n=#1% 
    \r@cx=0%
    \expandafter\putunicode@label#1;%
    \loop%
        \ifnum\n<\numexpr#1+16\relax%
        \makebox[1.9em]{\expandafter\putchar@cx{#1}}%
        \advance\r@cx by1%  
        \ifnum\r@cx>16\r@cx=1\relax\else\fi
        \advance\n by1%
    \repeat
    \par
}

\def\typeseturows@cx#1{%
\@for\next:=#1\do{%
  \urow@cx\next\vskip3pt}%
}

\newcount\r@cx%
\newcount\n%
\newcommand\unicodetable[2]{%
\bgroup
  % added to ensure csquotes does not interfere
  %\catcode`\"=12 
  \par
  \leavevmode%
   \r@cx=0%
   {\hbox to 5em{\ignorespaces}}%
   \loop%
    \ifnum\r@cx<16\ignorespaces 
    \makebox[1.9em]{\pgfmathparse{Hex(\the\r@cx)}\pgfmathresult}%
    \advance\r@cx by\@ne%  
   \repeat
   \vskip3pt\par
   \@nameuse{#1}%
   \typeseturows@cx{#2}%
\egroup
}
%    \end{macrocode}
% \begin{docCommand} {unicodenumber} {\meta{string}}
% Typesets a string such as |x1020| in a typewriter font.
% \end{docCommand}
%    \begin{macrocode}    
\DeclareRobustCommand\unicodenumber[1]{{\ttfamily #1\xspace}}
%    \end{macrocode}
%    
%    \begin{macrocode}
\def\putdescription#1:{%
  {\parindent0pt 
  \begin{minipage}[t]{4cm}
  \bgroup\panunicode
  \hangindent20pt
  #1\par
  \egroup
  \end{minipage} 
  }
}
%    \end{macrocode}

% \begin{docCmd}{parsefields}{ \marg{unicode number, delimited with:}{rest of line}}
%   parses a line of text of the form \texttt{10900: Phoenician Letter Alf}
% \end{docCmd}
%    \begin{macrocode}
\long\def\parsefields #1:#2\@@{%
    \ifx\par#1
    \else 
        {\small\aegean U+#1}%
         %%\iffontchar\font"#1 %
          \makebox[2.1em]{\color{theunicodesymbolcolor}\symbol{"#1}}% 
          \expandafter\putdescription#2\vskip3pt
        %%\else
          %%{\aegean \makebox[2.1em]{} Unallocated\par}%
        %%\fi
    \fi  
  }%
% Check if it can be saved
\newread\tempstream%s
%    \end{macrocode}
%
% \begin{docCommand}{printunicodeblock}{ \oarg{no columns} \marg{filename} \marg{fontcmd}}
%  The macro prints a unicode table from a file of definitions. This is
%   printed in a two column environment by default. ^^A\Fire fails on Carian
%
%  The lines have the form of:
%
%  \texttt{10900: Phoenician Letter Alf}
% \end{docCommand}
% 
%    \begin{macrocode}
%\ExplSyntaxOn
\DeclareDocumentCommand{\printunicodeblock}{O{2} m m }
  {
    \bgroup
    \leavevmode\parindent0pt\par
    \begin{multicols}{#1}%
     #3
      \openin\@inputcheck=#2
      \loop\unless\ifeof\@inputcheck
      \read\@inputcheck to\fileline %
      %\fileline
      \expandafter\parsefields \fileline:\@@ 
      \repeat
    \end{multicols}%
      \immediate\closein\@inputcheck
      \egroup
  }
\let\PrintUnicodeBlock\printunicodeblock
%\ExplSyntaxOff
%    \end{macrocode}
% 
%    \begin{macrocode}
\let\indicative\pan
%\newfontfamily\brahmi{Noto Sans Brahmi}
% ^^A \newfontfamily\bengal[Script=Bengali,Scale=1]{Shonar Bangla}
%    \end{macrocode}
%</SCRIPTS>
\endinput