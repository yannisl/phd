%%
%% This is file `fancyvrb.sty',
%%
%% COPYRIGHT 1992-1999, by Timothy Van Zandt <tvz@zandtwerk.kellogg.nwu.edu>
%%           2010-2018, by Herbert Voss <hvoss@tug.org>
%%
%% This package may be distributed under the terms of the LaTeX Project Public
%% License, as described in lppl.txt in the base LaTeX distribution.
%% Either version 1.3 or, at your option, any later version.
%%
%% DESCRIPTION:
%%   fancyvrb.sty is a LaTeX style option, containing flexible
%%   verbatim environments and commands and extensive documentation.
%%
% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd-documentation - version 1.0 (2018-10-26)
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt

This work has the LPPL maintenance status `author-maintained'

This work consists of all files listed in README.md
%</readme>
%<*readmemd>
###The `phd-documentation` LaTeX2e package

The `phd` latex package and the class with the same name provide
convenient methods to create new styles for books, reports
and articles. It also loads the most commonly used packages 
and resolves conflicts.

This work consists of the file  `phd-documentation.dtx`,
and the derived files   `phd-documentation.ins`,  `phd-documentation.pdf`, 
and `phd-documentation.sty`.

###Installation

run
           phd-lua.bat on windows
           pdflatex phd.dtx
           makeindex -s gind.ist -g phd 

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com

### Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use one command:

      \cxset{chapter name font-size = Huge,
             chapter number font-size = HUGE} 

### Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs. At present I estimate
that I have completed about 70% of the work that needs
to be done.

__The package as it stands is not production stable.__ 


%</readmemd>
%
%<*TODO>
1.  Split package into three diffferent parts. One for listings settings. Use def, docCommands and
    indexing commands. Indexing commands remove symbols defs into sybpackage.
2.  Finish symbol management, both text and math. Math already 80% incorporated.
%</TODO>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\if_meaning:w \fmtname\nameofplainTeX\else
  \expandafter \begingroup
\fi
%</internal>
%<*install>
\input l3docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phd --- A package to beautify documents.
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble
%\BaseDirectory{C:/users/admin/my documents/github/phd}
%\usedir{MWE}
\generate{\file{\jobname.sty}{%
  \from{\jobname.dtx}{package}%
   }%
  }%
%\nopreamble\nopostamble
%</install>
%<install>\endbatchfile
%<*internal>
%\usedir{tex/latex/phd}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\generate{
	\file{README.txt}{\from{\jobname.dtx}{readme}}
  }
\generate{
  \file{\jobname.md}{\from{\jobname.dtx}{readmemd}}
}
\generate{
  \file{\jobname-todo.md}{\from{\jobname.dtx}{TODO}}
}
\if_meaning:w \fmtname\nameofplainTeX
  \expandafter \endbatchfile
\else
  \expandafter \endgroup 
\fi
%</internal>
%<*driver>
%\listfiles
\NeedsTeXFormat{LaTeX2e}[2017/04/15]
\documentclass[book,oneside,10pt,a4paper,
               microtype=off]{phddoc}
\let\textls\textit               
%\usepackage[left=3cm,bottom=2cm]{geometry}
%\savegeometry{std}
% \usepackage[style=mla]{biblatex}
\usepackage{phd-scriptsmanager}
\usepackage{phd-lowersections}
%\usepackage{phd-toc}
\sethyperref
% add bib resource
\addbibresource{phd1.bib}% Syntax f
%\usepackage{phd-toc}
\makeindex
\PageIndex
\EnableCrossrefs
\urlstyle{rm}

\usepackage[cache=false]{minted} 
\usemintedstyle[latex]{borland}  
\setminted[html]{fontsize=\footnotesize,style=friendly}
\input{phd-documentation-defaults.def}
\cxset{palette oprah,
       subsection afterindent=off}
%\usepackage{hypdoc}
\let\solution\undefined
%\usepackage{fancyvrb-ex}
\usepackage{tasks}
\usepackage{exsheets}
\usepackage{exsheets-listings}
\usepackage{xfancyvrb}
\usepackage{xcoffins}
\begin{document}
\DEBUGOFF
\overfullrule0pt
\parindent1em
\coverpage{monkey}{Book Design Monographs}{Camel Press}{LaTeX}{Verbatims} 
\pagestyle{empty}

\secondpage
\pagestyle{empty}
\clearpage

\tableofcontents

\pagestyle{empty}
\setcounter{secnumdepth}{6}
\parskip0pt plus.1ex minus.1ex
\mainmatter
\pagenumbering{arabic}
\pagestyle{headings} 
% \input{./sections/characters}
% \input{./l3sections/l3token}
%
% \input{./sections/grouping}
%\input{./sections/verbatim}
\DocInput{\jobname.dtx}
%\EnableImplementation
%\DocInputAgain{\jobname.dtx}
%\IndexInput{phddoc.sty}
%\nocite{*}
%\printbibliography

%\PrintIndex 
\end{document}
%</driver>
%\fi
%
% \DoNotIndex{\@,\@@par,\@beginparpenalty,\@empty}
% \DoNotIndex{\@flushglue,\@gobble,\@input}
% \DoNotIndex{\@makefnmark,\@makeother,\@maketitle}
% \DoNotIndex{\@namedef,\@ne,\@spaces,\@tempa}
% \DoNotIndex{\@tempb,\@tempswafalse,\@tempswatrue}
% \DoNotIndex{\@thanks,\@thefnmark,\@topnum}
% \DoNotIndex{\@@,\@elt,\@forloop,\@fortmp,\@gtempa,\@totalleftmargin}
% \DoNotIndex{\",\/,\@ifundefined,\@nil,\@verbatim,\@vobeyspaces}
% \DoNotIndex{\|,\~,\ ,\active,\advance,\aftergroup,\bgroup,\bgroup}
% \DoNotIndex{\mathcal,\csname,\def,\documentstyle,\dospecials,\edef}
% \DoNotIndex{\egroup}
% \DoNotIndex{\else,\endcsname,\egroup ,\endinput,\endtrivlist}
% \DoNotIndex{\exp_after:wN ,\fi,\fnsymbol,\futurelet,\cs_gset:Npn ,\global}
% \DoNotIndex{\hbox,\hss,\if,\if@inlabel,\if@tempswa,\if@twocolumn}
% \DoNotIndex{\ifcase}
% \DoNotIndex{\ifcat,\iffalse,\if_meaning:w ,\ignorespaces,\index,\input,\item}
% \DoNotIndex{\jobname,\kern,\leavevmode,\leftskip,\cs_set_eq:NN ,\llap,\lower}
% \DoNotIndex{\m@ne,\next,\newpage,\nobreak,\noexpand,\nonfrenchspacing}
% \DoNotIndex{\obeylines,\or,\protect,\raggedleft,\rightskip,\rm,\sc}
% \DoNotIndex{\setbox,\setcounter,\small,\space,\string,\strut}
% \DoNotIndex{\strutbox}
% \DoNotIndex{\thefootnote,\thispagestyle,\topmargin,\trivlist,\tt}
% \DoNotIndex{\twocolumn,\typeout,\vss,\vtop,\xdef,\z@}
% \DoNotIndex{\,,\@bsphack,\@esphack,\@noligs,\@vobeyspaces,\@xverbatim}
% \DoNotIndex{\`,\catcode,\end,\escapechar,\frenchspacing,\glossary}
% \DoNotIndex{\hangindent,\hfil,\hfill,\hskip,\hspace,\ht,\it,\langle}
% \DoNotIndex{\leaders,\long,\makelabel,\marginpar,\markboth,\mathcode}
% \DoNotIndex{\mathsurround,\mbox,\newcount,\newdimen,\newskip}
% \DoNotIndex{\nopagebreak}
% \DoNotIndex{\parfillskip,\parindent,\parskip,\penalty,\raise,\rangle}
% \DoNotIndex{\section,\setlength,\TeX,\topsep,\underline,\unskip,\verb}
% \DoNotIndex{\vskip,\vspace,\widetilde,\\,\%,\@date,\@defpar}
% \DoNotIndex{\[,\{,\},\]}
% \DoNotIndex{\count@,\if_int_compare:w,\loop,\today,\uppercase,\uccode}
% \DoNotIndex{\baselineskip,\begin,\tw@}
% \DoNotIndex{\a,\b,\c,\d,\e,\f,\g,\h,\i,\j,\k,\l,\m,\n,\o,\p,\q}
% \DoNotIndex{\r,\s,\t,\u,\v,\w,\x,\y,\z,\A,\B,\C,\D,\E,\F,\G,\H}
% \DoNotIndex{\I,\J,\K,\L,\M,\N,\O,\P,\Q,\R,\S,\T,\U,\V,\W,\X,\Y,\Z}
% \DoNotIndex{\1,\2,\3,\4,\5,\6,\7,\8,\9,\0}
% \DoNotIndex{\!,\#,\$,\&,\',\(,\),\+,\.,\:,\;,\<,\=,\>,\?,\_}
% \DoNotIndex{\discretionary,\immediate,\makeatletter,\makeatother}
% \DoNotIndex{\meaning,\newenvironment,\par,\scan_stop:,\renewenvironment}
% \DoNotIndex{\repeat,\scriptsize,\selectfont,\the,\undefined}
% \DoNotIndex{\arabic,\do,\makeindex,\null,\number,\show,\write,\@ehc}
% \DoNotIndex{\@author,\@ehc,\@ifstar,\@sanitize,\@title,\everypar}
% \DoNotIndex{\if@minipage,\if@restonecol,\ifeof,\ifmmode}
% \DoNotIndex{\lccode,\newtoks,\onecolumn,\openin,\p@,\SelfDocumenting}
% \DoNotIndex{\settowidth,\@resetonecoltrue,\@resetonecolfalse,\bf}
% \DoNotIndex{\clearpage,\closein,\lowercase,\@inlabelfalse}
% \DoNotIndex{\selectfont,\mathcode,\newmathalphabet,\rmdefault}
% \DoNotIndex{\bfdefault}
%
%  \CheckSum{0}
%  \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \changes{1.0}{2013/01/26}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
% \GetFileInfo{phd.dtx}
% 
%  \def\fileversion{v1.0}          
%  \def \filedate{2012/03/06}
% \title{The \textsf{phd} package.
% \thanks{This
%        file (\texttt{phd.dtx}) has version number \fileversion, last revised
%        \filedate.}
% }
% \author{Dr. Yiannis Lazarides \\ \url{yannislaz@gmail.com}}
% \date{\filedate}
%
%
% 
% ^^A\maketitle
% 
% ^^A\frontmatter
%  ^^A\coverpage{./images/hine02.jpg}{Book Design }{Camel Press}{}{}
%  \newpage
% ^^A\secondpage
% \pagestyle{empty}
%
%
% 
%
%
% \pagestyle{headings}
% \raggedbottom
%  \OnlyDescription
%  
% ^^A\StopEventually{\PrintIndex}
%
% \CodelineNumbered
% \pagestyle{headings}
% 
% \chapter{Package Development}
%
% Timothy Van Zandt's package has been developed in 1992 and is still widely used, especially in
% defining verbatim commands and environments. I could not find a |.dtx| file on \ctan and as I 
% was looking to understand how verbatim code works I decided to translate it to expl3, who at
% first mind sound as madness. The method in the madness though was to at the same time test
% how well two other packages of mine worked by using this code as a test file. The other
% two packages colorize latex3 packages and classes in a different way than other packages such
% as listings work.
%
% The other benefit of this developemnt was to reinforce my understanding of \tex especially in
% regards to the use of active characters, catcoding and the like.
%
% ^^A\part{IMPLEMENTATION AND FRIENDS}
% 
% 
% \iffalse
%<*package>
% \fi
% \chapter{Code Implementation Objectives and Strategy}

% \section{Preliminaries}
% 		We first handle the package definitions. Although the package essentially is an
% 		|expl3| package we define it as a \latex2e as it contains some \latex2 materials.
%    \begin{macrocode}
%<@@=fv>
\NeedsTeXFormat{LaTeX2e}
\def\fileversion{3.1a}
\def\filedate{2018/11/20}
\ProvidesPackage{xfancyvrb}[\filedate]
\message{Style option: `xfancyvrb' v\fileversion \space  <\filedate> (YL)}
%    \end{macrocode}
%  \TestFiles{fvtest.tst}
% standard test not to load the package again
%    \begin{macrocode}
\csname xfancyvrb@loaded\endcsname
\let\xfancyvrb@loaded\endinput
%\ProcessOptions
\@ifpackageloaded{xcolor}{}{\RequirePackage{xcolor}}
%    \end{macrocode}
% \begin{macro}[int]{fv_define_key:nnnn}
%   Define compatibility commands to keep the style of the code consistent with l3.
%    \begin{macrocode}
\ExplSyntaxOn 
\let\fv_define_key:nnnn\define@key      
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{FV@error,FV@eha}
%    \begin{macrocode}
\ExplSyntaxOn
 
\cs_set:Npn \FV@Error#1#2{%
  \edef\@tempc{#2}\exp_after:wN \errhelp\exp_after:wN {\@tempc}%
  \errmessage{FancyVerb Error:^^J\space\space #1^^J}}

\def\FV@eha{Your command was ignored. Type <return> to continue.}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% Shorthands for messagesinspired from |fontspec|. The original |fancyvrb| code
% is rich in error trapping. \latexe errors have been mapped to l3 messages.
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \@@_error:n     { \msg_error:nn     {xfancyvrb} }
\cs_new:Npn \@@_error:nn    { \msg_error:nnn    {xfancyvrb} }
\cs_new:Npn \@@_error:nx    { \msg_error:nnx    {xfancyvrb} }
\cs_new:Npn \@@_warning:n   { \msg_warning:nn   {xfancyvrb} }
\cs_new:Npn \@@_warning:nx  { \msg_warning:nnx  {xfancyvrb} }
\cs_new:Npn \@@_warning:nxx { \msg_warning:nnxx {xfancyvrb} }
\cs_new:Npn \@@_info:n      { \msg_info:nn      {xfancyvrb} }
\cs_new:Npn \@@_info:nx     { \msg_info:nnx     {xfancyvrb} }
\cs_new:Npn \@@_info:nxx    { \msg_info:nnxx    {xfancyvrb} }
\cs_new:Npn \@@_trace:n     { \msg_trace:nn     {xfancyvrb} }
\ExplSyntaxOff
%    \end{macrocode}
% Allow messages to be written with spaces acting as normal:
%    \begin{macrocode}
\ExplSyntaxOn
\cs_generate_variant:Nn \msg_new:nnn  {nnx}
\cs_generate_variant:Nn \msg_new:nnnn {nnxx}
\cs_new:Nn \@@_msg_new:nnn
  { \msg_new:nnx {#1} {#2} { \tl_trim_spaces:n {#3} } }
\cs_new:Nn \@@_msg_new:nnnn
  { 
    \msg_new:nnxx {#1} {#2} { \tl_trim_spaces:n {#3} } 
                            { \tl_trim_spaces:n {#4} } 
  }
\char_set_catcode_space:n {32}

\@@_msg_new:nnn {xverbatim}{not-vervbatim-command}
  {
    Command \string#1 is not an xverbatim command.
  }
  
\ExplSyntaxOff
  
%    \end{macrocode}
%% DG/SR modification begin - Jan. 21, 1998
%% Suggested by Bernard Gaulle to solve a compatibility problem with `french'
%% (it introduce the restriction to put \VerbatimFootnotes AFTER the preambule)
%% \def\VerbatimFootnotes{\cs_set_eq:NN \@footnotetext\V@footnotetext}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set_eq:NN \V@footnote\footnote
\def\VerbatimFootnotes
  {
    \cs_set_eq:NN \@footnotetext\V@footnotetext
    \cs_set_eq:NN \footnote\V@footnote
  }

%% DG/SR modification end
\cs_set:Npn \V@footnotetext
  {
    \afterassignment\v_footnotetext_aux
    \cs_set_eq:NN \@tempa
  }
  
\def\v_footnotetext_aux{%
  \insert\footins\bgroup
  \csname reset@font\endcsname
  \footnotesize
  \interlinepenalty\interfootnotelinepenalty
  \splittopskip\footnotesep
  \splitmaxdepth\dp\strutbox
  \floatingpenalty \@MM
  \hsize\columnwidth
  \@parboxrestore
  \edef\@currentlabel{\csname p@footnote\endcsname\@thefnmark}%
  \@makefntext{}%
  \rule{\z@}{\footnotesep}%
  \bgroup
  \aftergroup\fv_footnotetext_auxiii
  \ignorespaces}
  
\cs_set:Npn \fv_footnotetext_auxiii {\strut\egroup}
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage{keyval}
%    \end{macrocode}
%   
% \begin{variable}{\l_@@_tmp_int}
% \begin{variable}{\l_@@_tmp_prop}
% \begin{variable}{\l_@@_tmp_tl}
%   Scratch space.
%   
%    \begin{macrocode}
\ExplSyntaxOn
\int_new:N  \l_@@_tmp_int
\prop_new:N \l_@@_tmp_prop
\tl_new:N   \l_@@_tmp_tl
\cs_set:Npn   \l_@@_tmpa: {}
\ExplSyntaxOff
%    \end{macrocode}
% \end{variable}
% \end{variable}
% \end{variable}
%
% \begin{macro}{\fv_define_boolean_key:nnTF}{\Arg{family}\Arg{keyname}\Arg{true code}\Arg{false code}}
% Timothy Van Zandt used keyval, but provided a couple of modifications to it.
% Prefix |KV| is from the keyval package and has to be used. 
% Suffixes |default| 
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npx \g_@@_prefix_tl{KV}

\cs_set:Npn \fv_space_tl{\c_space_token}

\cs_set:Npn \define@booleankey#1#2#3#4
  {
    \cs_set:cpn {\g_@@_prefix_tl @#1@#2@default}{#3}%
    \cs_set:cpn {KV@#1@#2@false}{#4}%
    \cs_set:cpn {KV#1@#2}##1{\KV@booleankey{##1}{#1}{#2}}  
  }
  
\cs_set:Npn\KV@booleankey#1#2#3{%
  \edef\@tempa{#1}
  \exp_after:wN \KV_booleankey_aux:nnnn \@tempa\scan_stop:\@nil{#2}{#3}
  }
  
\cs_set:Npn \KV_booleankey_aux:nnnn #1#2\@nil#3#4{%
  \use:c {KV@#3@#4@\if t#1default\else\if T#1default\else false\fi\fi}}
%    \end{macrocode} 
% Map the |\define@booleankey| to l3 style for consistency. 
%    \begin{macrocode}
\cs_gset_eq:NN \fv_define_boolean_key:nnTF \define@booleankey  
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% Define some of the default key settings.
% \begin{macro}{\fv_none_tl, \fv_auto_tl, \fvset}
%  Use token lists to hold values for keys, rather than definitions. Use
%  |tl_new:N| to avoid errors in re-definitions.
%    \begin{macrocode}  
\ExplSyntaxOn
\tl_new:N \fv_none_tl
\tl_new:N \fv_auto_tl
\tl_set:Nn \fv_none_tl {none}
\tl_set:Nn \fv_auto_tl {auto}

% the |\setkeys| is from the keyval package. If we have xkeyval
% probably it is redefined.
\cs_set_nopar:Npn\fvset#1{\setkeys{FV}{#1}}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\fv_command:nn, \fv_command_auxi}
%  Handles star commands and optional commands. We can also replace with 
%  xparse if necessary.
%    \begin{macrocode}
\ExplSyntaxOn
%\def\FV@Command#1#2{%
%  \@ifstar
%    {\def\FV@KeyValues{#1,showspaces}\FV@@Command{#2}}%
%    {\def\FV@KeyValues{#1}\FV@@Command{#2}}}
\tl_new:N \fv_key_values_tl 

\cs_new:Npn \fv_command:nn#1#2
  {
    \@ifstar
      {
      \tl_gput_left:Nn \fv_key_values_tl{#1,showspaces}\fv_command_auxi{#2}}%
      {\tl_gput_left:Nn \fv_key_values_tl{#1}\fv_command_auxi{#2}}
  }
%    \end{macrocode}
% \end{macro}
%
% Used for SaveVerbs etc |FVC| prefix
%    \begin{macrocode}    
\cs_set:Npn \fv_command_auxi#1{%
  \@ifnextchar[%
    {\fv_get_keyvalues:nn {\use:c {FVC@#1}}}
    {\use:c {FVC@#1}}}
    
   
\cs_set:Npn \fv_get_keyvalues:nn #1[#2]
  {
    \tl_gput_left:Nn\fv_key_values_tl {#2}
    \tl_use:N #1
  }
\ExplSyntaxOff  
%    \end{macrocode}  
%
% \begin{macro}{\fv_custom_verbatim_command:nnnn}
% 		Auxiliary macro to check if command has not been defined.
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \fv_custom_verbatim_command:nnnn  #1 #2 #3 #4
  {
    \bgroup
      \fvset{#4}
    \egroup   
    \cs_if_free:cTF {FVC@#3}
      {\@@_warning:nx {verbatim-not-defined} {#1}}
      {#1{#2}{\fv_command:nn{#4}{#3}}}
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CustomVerbatimCommand, \RecustomVerbatimCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \CustomVerbatimCommand
  {
    \fv_custom_verbatim_command:nnnn \newcommand
  }

\cs_set:Npn \RecustomVerbatimCommand
  {
    \fv_custom_verbatim_command:nnnn \renewcommand
  }
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fv_environment}{\Arg{verbatim name}\Arg{options}}
% |FVB@Verbatim| prefix FVB used for begin verbatim etc.
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \fv_environment:nn #1 #2
{
  \tl_gput_left:Nn \fv_key_values_tl{#1}
  \char_set_catcode_active:N \^^M
   \@ifnextchar[
    {
     \char_set_catcode_end_line:N \^^M
     \fv_get_keyvalues:nn { \use:c {FVB@#2} }
    }
    {
      \char_set_catcode_end_line:N \^^M
      \use:c {FVB@#2}
    }
}
\ExplSyntaxOff
%    \end{macrocode}   
% \end{macro} 

% \begin{macro}{\NewVerbatimEnvironment,\RenewVerbatimEnvironment,\fv_make_verbatim_env:nnnn}
% I have changed the original names from Custom/Recustom to New/Renew to make it more
% understandable to users.
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \NewVerbatimEnvironment
  {
    \fv_make_verbatim_env:nnnn \newenvironment
  }

\cs_set:Npn \RenewVerbatimEnvironment
  {
    \fv_make_verbatim_env:nnnn \renewenvironment
  }
  
\cs_set_eq:NN \CustomVerbatimEnvironment\NewVerbatimEnvironment
\cs_set_eq:NN \RecustomVerbatimEnvironment\RenewVerbatimEnvironment
%    \end{macrocode}
%
% |\fvset| is set in a group so if there are errors, they are easier to locate.
%    \begin{macrocode}
\cs_set:Npn \fv_make_verbatim_env:nnnn #1#2#3#4
 {
    \bgroup
      \fvset{#4}
    \egroup  
    \cs_if_free:cTF {FVB@#3}%
      {\FV@Error{`#3' is not an xfancyvrb environment.}\@eha}
      {
         #1{#2}{\fv_environment:nn{#4}{#3}}{\use:c{FVE@#3}}
         #1{#2*}{\fv_environment:nn{#4,showspaces}{#3}}{\use:c {FVE@#3}}
      }
  }
\ExplSyntaxOff     
%    \end{macrocode}  
% \end{macro}

% \begin{macro}{\DefineVerbatimEnvironment}\Arg{environment name} \Arg{Verbatim} \Arg{options} 
% Defines a new verbatim environment based on an existing. It creates two macros
% |\my_verbatim| and |\my_verbatim*|
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \DefineVerbatimEnvironment #1 #2 #3
  {
    \cs_set:cpn {#1}     { \fv_environment:nn{#3}{#2} }
    \cs_set:cpn {end#1}  { \use:c {FVE@#2} }
    \cs_set:cpn {#1*}    { \fv_environment:nn{#3,showspaces}{#2} }
    \cs_set:cpn {end#1*} { \use:c {FVE@#2} }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\fv_use_values:} 
% To use the values we need to iterate through the comma list of values. I have kept the
% original definition here which uses the \pkg{keyval} |\KV@do| to iterate. One night
% I will need to come back to this and completely divorce |keyval|, but this daughter 
% of David Carlisle is such a sweet girl\ldots.
%
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \fv_use_values:
  {
    \cs_if_eq:NNTF \fv_key_values_tl \c_empty_tl {}
    {
     
      \cs_set:Npn \KV@prefix{KV@FV@}
      \exp_after:wN \KV@do\fv_key_values_tl,\scan_stop:,
      
      % we cannot just use this, as keyval handles defaults etc.
      %\clist_map_inline:Nn \fv_key_values_tl {\cs:w \KV@prefix##1\cs_end:w}
      \tl_gclear:N \fv_key_values_tl
    }
  }
\ExplSyntaxOff  
%    \end{macrocode}  
% \end{macro}
%
% \begin{macro}{\fv_catcodes:}
% Set up the preliminary work by setting all the catcodes.
%    \begin{macrocode} 
\ExplSyntaxOn
\cs_set:Npn \fv_catcodes:
  {
    \cs_set_eq:NN \do\@makeother\dospecials  % The usual stuff.
    \fv_active_white_space_tl                % See below.
    \FV@FontScanPrep                         % See below.
    \fv_catcodes_hook_tl                     % A style hook.
    \fv_verb_codes_tl                        % A user-defined hook.
  }
\ExplSyntaxOff  
%    \end{macrocode}  
% \end{macro}
%
% \begin{macro}{\FV@ActiveWhiteSpace}
% Set the catcodes for white spaces to be active.
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \fv_active_white_space_tl
  {
    \char_set_catcode_active:N \^^M   % End of line
    \catcode`\ =\active               % Space
    \catcode`\^^I=\active             % Tab
  }  
  
\cs_set_eq:NN \FV@ActiveWhiteSpace \fv_active_white_space_tl       
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
 
%
% \begin{macro}{\fv_catcodes_hook_tl, \fv_add_to_hook:nn}
%    \begin{macrocode} 
\ExplSyntaxOn
\tl_new:N \fv_catcodes_hook_tl

\cs_set:Npn \fv_add_to_hook:nn #1 #2
  {
    %\exp_after:wN \def\exp_after:wN #1\exp_after:wN {#1#2\scan_stop:}
    \tl_put_right:Nn #1{#2}
  }
\ExplSyntaxOff  
%    \end{macrocode} 
% \end{macro}


% \begin{macro}{codes, codes*}
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{codes}[]
  {
    \cs_set:Npn \fv_verb_codes_tl {#1\scan_stop:}
  }
 
% change this to proper tl 
\fv_define_key:nnnn{FV}{codes*}
  {
    \exp_after:wN 
      \def\exp_after:wN\fv_verb_codes_tl \exp_after:wN {\fv_verb_codes_tl #1\scan_stop:}
  }
\fvset{codes}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{vspace}
%  Key for adding space at the top of the list. 
%    \begin{macrocode}
\fv_define_key:nnnn{FV}{vspace}[\topsep]
  {
    \def\FancyVerbVspace {#1}
  }
\fvset{vspace}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{commandchars}[\\\{\}]
  {\cs_set_nopar:Npx \@tempa{#1}%
    \if_meaning:w \@tempa\fv_none_tl
      \cs_set_eq:NN \fv_command_chars:nnn\scan_stop:
    \else
      \fv_define_command_chars:nnn #1 \scan_stop:\scan_stop:\scan_stop:
    \fi}
\ExplSyntaxOff    
%    \end{macrocode} 
%   
% \begin{macro}{\fv_define_command_chars:nnn}\Arg{command char}\Arg{begin group char}\Arg{end group char}
%    Characters which define the character which starts a macro 
%    and marks the beginning and end of a group; thus letting us 
%    introduce \emph{escape} sequences in verbatim code. By
%    default it is empty.
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \fv_define_command_chars:nnn #1 #2 #3
  {
    \cs_set:Npn \fv_command_chars
      {
        \catcode`#1=0\scan_stop:
        \catcode`#2=1\scan_stop:
        \catcode`#3=2\scan_stop:
      }
  }
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% Add the command chars to the catcode hook 
%    \begin{macrocode}
\ExplSyntaxOn
\fv_add_to_hook:nn \fv_catcodes_hook_tl \fv_command_chars:nnn
\ExplSyntaxOff
%    \end{macrocode}
%

% \begin{macro}{commentchar}
%  Key to set a character as a comment character i.e, |\catcode `!=14|.
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{commentchar}[\!]{
    \cs_set_nopar:Npn \@tempa{#1}
    \if_meaning:w \@tempa\fv_none_tl
      \cs_set_eq:NN \fv_comment_char\scan_stop:
    \else
      \def\fv_comment_char{\catcode`#1=14}
    \fi
  }

\fv_add_to_hook:nn\fv_catcodes_hook_tl\fv_comment_char


\fvset{commandchars=none,commentchar=none}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{firstline, \fv_parse_start:n}
% \begin{macrocode}
\fv_define_key:nnnn{FV}{firstline}
  {
    \afterassignment
      \fv_parse_start:n \@tempcnta=0#1\scan_stop:\@nil{#1}
  }
  
  
\def\fv_parse_start:n #1\scan_stop:\@nil#2
  {
  \if_meaning:w \@nil#1\@nil
    \edef\fv_start_num_int{\the\@tempcnta}%
    \cs_set_eq:NN \FancyVerbStartString\scan_stop:
  \else
    \edef\FancyVerbStartString{#2}%
  \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\fv_define_default_key:nn}
%    \begin{macrocode}
\cs_new:Npn \fv_define_default_key:nn #1#2
  {
    \cs_set:cpn {KV@FV@#1@default} {#2}
  }  
  
%\def\KV@FV@firstline@default{%
%  \cs_set_eq:NN \fv_start_num_int\z@
%  \cs_set_eq:NN \FancyVerbStartString\scan_stop:}
  
\fv_define_default_key:nn {firstline}
  {
    \cs_set_eq:NN \fv_start_num_int\c_zero_int
    \cs_set_eq:NN \FancyVerbStartString\scan_stop:
  }  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{lastline}
% 		Define the |lastline| key. Take an integer to denote the lastline.
%    \begin{macrocode}
\fv_define_key:nnnn{FV}{lastline}{%
  \afterassignment\fv_parse_stop:nn \@tempcnta=0#1\scan_stop:\@nil{#1}}
\ExplSyntaxOff  
%    \end{macrocode} 
% \end{macro}
%
% \begin{macro}{\fv_parse_stop:nn, \KV@FV@lastline@default}
%    Use a delimited macro to capture the stop number. Set the stop string to relax. We can
%    only select by numbers or strings. 
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \fv_parse_stop:nn #1\scan_stop:\@nil#2
  {
    \if_meaning:w \@nil#1\@nil
      \cs_set_nopar:Npx \fv_verb_stop_num:n{\the\@tempcnta}
      \cs_set_eq:NN \fv_verb_stop_string_tl\scan_stop:
    \else
      \cs_set_nopar:Npx \fv_verb_stop_string_tl{#2}
    \fi
  }
  
\def\fv_define_key_default:nn {lastline} 
  {
  	  \cs_set_eq:NN \fv_verb_stop_num:n \c_zero_int
    \cs_set_eq:NN \fv_verb_stop_string_tl\scan_stop:
  }
\ExplSyntaxOff  
\fvset{firstline,lastline}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fv_codeline_int}
%  	Define a counter to take care of the numbering of lines.
%    \begin{macrocode}
\ExplSyntaxOn
\int_zero_new:N \fv_codeline_int
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%

% \begin{macro}{\fv_preprocess_line:}
%  Start by incrementing the counter and then find StartStop
%    \begin{macrocode}
\ExplSyntaxOn
\def\fv_preprocess_line:
  {
    % increase counter by one 
    \int_gincr:N \fv_codeline_int
    \FV@FindStartStop
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fv_preprocessline_auxii}
% \label{lin:preprocess}
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \fv_preprocessline_auxii
  {
    \FV@StepLineNo
    \fv_gobble:
    \exp_after:wN \fv_process_line:n\exp_after:wN {\fv_line}
  }
\ExplSyntaxOff  
%    \end{macrocode}  
% \end{macro}
%
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@FindStartStop{\FV@DefineFindStart\FV@FindStartStop}
\ExplSyntaxOff
%    \end{macrocode}

%% \def\FV@DefinePreProcessLine{%
%%   \setcounter{FancyVerbLine}{0}%
%%   \FV@DefineFindStart}
%
% \begin{macro}{\c@fv_verbline_int, \DefineFindStart}
%    \begin{macrocode}
\ExplSyntaxOn
 \int_new:N \c@fv_verbline_int
 \cs_set:Npn \FV@DefineFindStart
  {
    \if_meaning:w  \FancyVerbStartString\scan_stop:
      \if_int_compare:w \fv_start_num_int < \c_two
        \FV@DefineFindStop
      \else: 
        \cs_set_eq:NN \FV@FindStartStop\FV@FindStartNum
      \fi:
    \else:
      \cs_set_eq:NN \FV@FindStartStop\FV@FindStartString
    \fi:
  }
\ExplSyntaxOff  
%    \end{macrocode}  
% \end{macro} 
%

% \begin{macro}{\FV@FindStratNum}
%    \begin{macrocode} 
\ExplSyntaxOn 
\cs_set:Npn \FV@FindStartNum
  {
    \if_int_compare:w \fv_start_num_int > \fv_codeline_int
    \else:
      \FV@DefineFindStop
      \exp_after:wN \fv_preprocessline_auxii
    \fi:
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@FindStartString}
%  Find the string marked as START. We do by comparing the meaning.
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@FindStartString
  {  
    \exp_after:wN \fv_find_startstring_aux:
    {\meaning\fv_line}
    {\meaning\FancyVerbStartString}
  }
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\fv_find_startstring_aux:}{\Arg{1}\Arg{2}}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \fv_find_startstring_aux: #1 #2
  {  
     \edef\@fooA{#1} \edef\@fooB{#2}
     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     \typeout{\meaning\@fooA \space\space \meaning\@fooB}
     \if_meaning:w  \@fooA\@fooB
       \typeout{Call stop} 
       \FV@DefineFindStop
     \fi:
  }
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% 
% \begin{macro}{\FV@DefineFindStop, \FV@FindStopNum}
%  Find start and stop number.
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@DefineFindStop 
  {
    \if_meaning:w \fv_verb_stop_string_tl\scan_stop:
      \if_int_compare:w \FancyVerbStopNum < \@ne
        \cs_set_eq:NN \FV@FindStartStop\fv_preprocessline_auxii
      \else:
        \cs_set_eq:NN \FV@FindStartStop\FV@FindStopNum
      \fi:
    \else:
      \cs_set_eq:NN \FV@FindStartStop\FV@FindStopString
    \fi:
  }
  
\cs_set:Npn \FV@FindStopNum
  {
    \if_int_compare:w \FancyVerbStopNum>\fv_codeline_int
    \else:
      \cs_set_eq:NN \FV@FindStartStop\scan_stop:
      \ifeof\fv_infile\else
        \immediate\closein\fv_infile
      \fi:
    \fi:
    \if_int_compare:w\FancyVerbStopNum<\fv_codeline_int
    \else:
      \fv_preprocessline_auxii
    \fi:
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}

% \begin{macro}{FV@FindStopString}  
% Compares the contents of a line to that of a STOP string
% if the meaning is the same then we found the marker.
% Here we can use a string, but I have kept the original definition
% this way we maybe allowed to use a macro as a stop string
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@FindStopString
  {
    \exp_after:wN \fv_FindStopString_aux:nn
    {\meaning\fv_line}
    {\meaning\fv_verb_stop_string_tl}
  }

% The auxiliary function to compare
\cs_set:Npn \fv_FindStopString_aux:nn #1#2
  { 
    \edef\@fooA{#1} \edef\@fooB{#2}%
    \if_meaning:w \@fooA\@fooB
      \cs_set_eq:NN \FV@FindStartStop\scan_stop:
      \ifeof\fv_infile
      \else
        \immediate\closein\fv_infile
      \fi
    \else
      \exp_after:wN \fv_preprocessline_auxii
    \fi
  }
\ExplSyntaxOff  
%    \end{macrocode}  
% \end{macro}
%  

% \begin{macro}{\fv_gobble:,\fv_gobbleii,\fv_gobbleiii, \fv_gobbleiiii}
%    This is where \tex got its notorious repudation that programming using \tex iss black art!
%    The purpose of the gobble key is to set how many characters
%    to gobble. It is set to gobble anything less than 9 parameters.
%    Gobbling starts with |\fv_gobble:| during the line pre-processing.
%    see \ref{lin:preprocess}. If gobbling is valid then this is let
%    to auxiliary 2 |\fv_gobbleii| defined below, which starts the chain
%    with |auxiii| and |iiii|.
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \fv_gobbleii
  {
  \exp_after:wN \exp_after:wN \exp_after:wN \fv_gobbleiii
  \exp_after:wN \fv_gobbleiiii\fv_line
    \@nil\@nil\@nil\@nil\@nil\@nil\@nil\@nil\@nil\@nil\@@nil
  }
%    \end{macrocode}

%    \begin{macrocode}    
\cs_set:Npn \fv_gobbleiii#1\@nil#2\@@nil{\cs_set:Npn \fv_line{#1}}
%    \end{macrocode}
%
%    \begin{macrocode}
\fv_define_key:nnnn{FV}{gobble}{%
  \@tempcnta=#1\scan_stop:
  \if_int_compare:w\@tempcnta<\@ne
    \cs_set_eq:NN \fv_gobble:\scan_stop:
  \else
    \if_int_compare:w\@tempcnta>9
      \FV@Error{gobble parameter must be less than 10}\FV@eha
    \else
      % why is teh counter here? 
      \renewcommand{\fv_gobbleiiii}[\@tempcnta]{}
      \cs_set_eq:NN \fv_gobble: \fv_gobbleii
    \fi
  \fi}
%    \end{macrocode} 
% Define the auxiliary to empty. 
%    \begin{macrocode}
\cs_set:Npn \fv_gobbleiiii {}
%    \end{macrocode}
%
% Define the default |gobble| key to be equal to |\scan_stop:| and set it.
%    \begin{macrocode}
\def\KV@FV@gobble@default
  {
    \cs_set_eq:NN \fv_gobble:\relax
  }
\fvset{gobble}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@Scan
  {
    \fv_catcodes:
    \VerbatimEnvironment
    \FV@DefineCheckEnd
    \FV@BeginScanning
  }
\ExplSyntaxOff    
%    \end{macrocode} 

%
% \begin{macro}{\VerbatimEnvironment}  
%  Sets the local environment name to the current environment.
%  remember xdef.  
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \VerbatimEnvironment 
  {
     \if_meaning:w \FV@EnvironName \scan_stop:
       \cs_gset_nopar:Npx \FV@EnvironName{\@currenvir}
     \fi:
  }
  
\cs_set_eq:NN \FV@EnvironName\scan_stop:
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%

%    \begin{macrocode}
\ExplSyntaxOn
\bgroup
\catcode`\!=0
\catcode`\[=1
\catcode`\]=2
!gdef!FV@CheckEnd@i#1[!FV@@CheckEnd#1\end{}!@nil]

!gdef!FV@@CheckEnd@i#1\end#2#3!@nil[!def!@tempa[#2]!def!@tempb[#3]]

!gdef!fv_checkendiii_i[\end{}]
\catcode`!\=12

!gdef!FV@CheckEnd@ii#1[!FV@@CheckEnd#1\end{}!@nil]
!gdef!FV@@CheckEnd@ii#1\end#2#3!@nil[!def!@tempa[#2]!def!@tempb[#3]]
!gdef!fv_checkendiii_ii[\end{}]
!catcode`!{=12
!catcode`!}=12

!gdef!FV@CheckEnd@iii#1[!FV@@CheckEnd#1\end{}!@nil]
!gdef!FV@@CheckEnd@iii#1\end{#2}#3!@nil[!def!@tempa[#2]!def!@tempb[#3]]
!gdef!fv_checkendiii_iii[\end{}]
!catcode`!\=0

!gdef!FV@CheckEnd@iv#1[!FV@@CheckEnd#1\end{}!@nil]
!gdef!FV@@CheckEnd@iv#1\end{#2}#3!@nil[!def!@tempa[#2]!def!@tempb[#3]]
!gdef!fv_checkendiii_iv[\end{}]
\egroup 
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
\def\FV@BadCodes#1{%
  \FV@Error
    {\string\catcode\space of \exp_after:wN \@gobble\string#1 is wrong:
    \the\catcode`#1}%
    {Only the following catcode values are allowed:
    ^^J\@spaces \exp_after:wN \@gobble\string\\ \space\space --> 0 or 12.
    ^^J\@spaces \string{ \string} --> 1 and 2, resp., or both 12.
    ^^JTo get this error, either you are a hacker or you got bad advice.}%
  \def\FV@CheckEnd##1{\iftrue}}
  
\def\FV@DefineCheckEnd{%
  \if_int_compare:w\catcode`\\=\z@
    \if_int_compare:w\catcode`\{=\@ne               
      \cs_set_eq:NN \FV@CheckEnd\FV@CheckEnd@i
      \cs_set_eq:NN \FV@@CheckEnd\FV@@CheckEnd@i
      \cs_set_eq:NN \FV@@@CheckEnd\fv_checkendiii_i
    \else
      \if_int_compare:w\catcode`\{=12
        \cs_set_eq:NN \FV@CheckEnd\FV@CheckEnd@iv
        \cs_set_eq:NN \FV@@CheckEnd\FV@@CheckEnd@iv
        \cs_set_eq:NN \FV@@@CheckEnd\fv_checkendiii_iv
      \else
        \FV@BadCodes\{%
      \fi
    \fi
  \else
    \if_int_compare:w\catcode`\\=12
      \if_int_compare:w\catcode`\{=\@ne
        \cs_set_eq:NN \FV@CheckEnd\FV@CheckEnd@ii
        \cs_set_eq:NN \FV@@CheckEnd\FV@@CheckEnd@ii
        \cs_set_eq:NN \FV@@@CheckEnd\fv_checkendiii_ii
      \else
        \if_int_compare:w\catcode`\{=12
          \cs_set_eq:NN \FV@CheckEnd\FV@CheckEnd@iii
          \cs_set_eq:NN \FV@@CheckEnd\FV@@CheckEnd@iii
          \cs_set_eq:NN \FV@@@CheckEnd\fv_checkendiii_iii
        \else
          \FV@BadCodes%check this
        \fi
      \fi
    \else
      \FV@BadCodes%
    \fi
  \fi}
  
\bgroup
  \char_set_catcode_active:N \^^M
  \cs_gset:Npn \FV@BeginScanning #1^^M 
    {
      \def\@tempa{#1}\if_meaning:w \@tempa\@empty\else\@@_bad_begin_error:\fi%
      \FV@GetLine
    }
\egroup 

\cs_set:Npn \@@_bad_begin_error: #1
 {
  \exp_after:wN \@temptokena\exp_after:wN {\@tempa}%
  \FV@Error
    {Extraneous input `\the\@temptokena' between
      \string\begin{\FV@EnvironName}[<key=value>] and line end}%
   {This input will be discarded. Hit <return> to continue.}
 }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{macro}{\FV@GetLine}
% The |\@noligs| is from the kernel and breaks ligatures. Get the
% line using |\FancyVerbGetLine| and pass it onto |\fv_check_scan:n |
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@GetLine
  { \@noligs\exp_after:wN \fv_check_scan:n \FancyVerbGetLine }
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FancyVerbGetLine}
% Reads and process one line at a time. The line is delimited by |^^M|.
%    \begin{macrocode}
\ExplSyntaxOn
\bgroup
  \char_set_catcode_active:N \^^M
  \cs_gset:Npn \FancyVerbGetLine#1^^M
    {
      \@nil%
      % check if line contains |\end|
      \FV@CheckEnd{#1}%
      % check if we are within the environment
      \if_meaning:w \@tempa\FV@EnvironName            
        \if_meaning:w \@tempb\FV@@@CheckEnd
        \else
          \FV@BadEndError
        \fi
        \cs_set_eq:NN \next\fv_end_scanning: 
      \else:
        \cs_set:Npn \fv_line{#1}%
        \cs_set:Npn \next {\fv_preprocess_line:\FV@GetLine}%
      \fi:
    \next
    }
\egroup
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%

% \begin{macro}{\fv_end_scanning: }
%  
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \fv_end_scanning: 
  {
    \cs_set_nopar:Npx \next{\exp_not:N \end{\FV@EnvironName}}
    % tex_global:Dly set the marker for the comparisons
    \cs_gset_eq:NN \FV@EnvironName\scan_stop:
    % iterate
    \next
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
% \end{macro}
%    \begin{macrocode}
\def\FV@BadEndError{%
  \exp_after:wN \@temptokena\exp_after:wN {\@tempb}%
  \FV@Error
      {Extraneous input `\the\@temptokena' between
        \string\end{\FV@EnvironName} and line end}%
      {This input will be discarded. Type <return> to continue.}}

\ExplSyntaxOn  
\cs_if_free:cTF {@currenvline}
   { \cs_set_eq:NN \@currenvline\@empty } {}

\def\fv_check_scan:n #1{\@ifnextchar\@nil{\@gobble}{\FV@EOF}}


\msg_new:nnn {xfancyvrb}{no-end} {I~could~not~find~
    `\string\end{\FV@EnvironName}'~to~end~
    a~verbatim~environment~\@currenvline. 
    Probably~ you~mistyped~the environment~name or 
    included an extraneous
    space, or are using an improperly defined 
    verbatim environment.
    Hit return and I will try to terminate this job.}
    
\cs_set:Npn \fv_check_scan:n  #1
  {
    \if_meaning:w \@nil#1\@empty
    \else:
    \exp_after:wN
    \msg_fatal:nn {xfancyvrb}{no-end}
    \fi:
  }



\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
\def\FV@EOF{%
  \FV@Error{Couldn't find `\string\end{\FV@EnvironName}' to end
    a verbatim environment\@currenvline.}%
    {Probably you mistyped the environment name or included an extraneous
    ^^Jspace, or are using an improperly defined verbatim environment.
    ^^JHit return and I will try to terminate this job.}%
  \fv_end_scanning: 
  \end{document}}
\ExplSyntaxOff  
%    \end{macrocode}  


% \subsection{Verbatim input}
%
% \begin{macro}{\fv_infile,\fv_input:}
% Allocate a stream and read the contents line by line. Send to preprocess
% which takes care of what to do. \Verb*|a b c|
%    \begin{macrocode}
\ExplSyntaxOn
\ior_new:N \fv_infile

\cs_set:Npn \fv_input: #1
  {
    \ior_open:Nn \fv_infile{#1}
    \ior_if_eof:NTF \fv_infile
      {
        \FV@Error{No verbatim file #1}\FV@eha
        \ior_close:N \fv_infile
      }  
      {
        \fv_catcodes:
        \fv_input_aux:
      }
  }
  
\cs_set:Npn \fv_input_aux:
  {
    \cs_set:Npn \fv_line{}
    \fv_readline:
    \ior_if_eof:NTF\fv_infile
      {
        \if_meaning:w \fv_line\@empty
        \else
          \fv_preprocess_line:
        \fi
        \ior_close:N \fv_infile
      }
      {
        \fv_preprocess_line:
        \fv_input_aux:
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\fv_readline:}
% This can be replaced |ior_str_get?|
% Reads one line from a stream.
%    \begin{macrocode} 
\ExplSyntaxOn
\bgroup
\char_set_catcode_active:N \^^M 
\cs_gset:Npn \fv_readline:
  {
    \ifeof\fv_infile
    \else
      %\immediate\read\fv_infile to\@tempa%
      \ior_get:NN \fv_infile\@tempa
      \exp_after:wN 
        \fv_readLine_aux:nnn \@tempa^^M\scan_stop:^^M\@nil
    \fi
  }
\cs_gset:Npn \fv_readLine_aux:nnn #1^^M#2^^M#3\@nil
  {
    \exp_after:wN \def\exp_after:wN\fv_line\exp_after:wN{%
      \fv_line#1}%
   \if_meaning:w \scan_stop:#2\@empty\exp_after:wN \fv_readline:\fi
  }
\egroup 
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \fv_formatting_prep:
  {
    \tex_global:D\fv_codeline_int\z@
    \frenchspacing                   % Cancels special punctuation spacing.
    \fv_setup_font:                  % See below.
    \fv_define_whitespace:           % See below.
    \tl_use:N \fv_define_active_tl   % Use any active user definitions
    \FancyVerbFormatCom
    
  }       % A user-defined hook (formatcom parameter).
\ExplSyntaxOff  
%    \end{macrocode}  

% \begin{macro}{\fv_setup_font:}
%     Setup the fonts based on a test for existence of |\selectfont| which should not be necessary. This
%     part I am not happy at all. Original fancyvrb code more all less hard-coded font families, did
%     not allow for coloring or text direction.
%    \begin{macrocode}
\ExplSyntaxOn
\exp_after:wN 
  \if_meaning:w \csname selectfont\endcsname\scan_stop:
    \cs_set:Npn \fv_setup_font:
      {
        \FV@BaseLineStretch
        \if_meaning:w \@currsize\small
          \normalsize
        \else
          \small
        \fi
        \@currsize
        \fv_fontsize:
        \FV@FontFamily
      }
  \else:
    \cs_set:Npn \fv_setup_font:
     {
       
       \FV@BaseLineStretch
       \bfseries\color{blue}
       \macro@font\normalsize
       \fv_fontsize:
       \FV@FontFamily
%      \FV@FontSeries
%      \FV@FontShape
       \selectfont
       \@noligs
     }
  \fi:
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

%
% \subsection{Font parameter keys}
% Define all four axes of NFSS fonts as keys.
%
% \begin{macro}{fontsize}
% Define a key for font sizing.
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{fontsize}
  {  
     %\show\fv_auto_tl
     \cs_set_nopar:Npx \@tempa{#1}
     %\show\@tempa
     \cs_if_eq:NNTF\@tempa\fv_auto_tl
    {
      \cs_set_eq:NN \fv_fontsize:\scan_stop:
    }  
    {
      \cs_set:Npn \fv_fontsize:{#1}
    
    }
  }

\cs_set:Npn \KV@FV@fontsize@default
  {
    \cs_set_eq:NN \fv_fontsize:\scan_stop:
  }  
  
\ExplSyntaxOff  
%    \end{macrocode} 
% \end{macro}
% 
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{baselinestretch}[auto]{%
  \cs_set_nopar:Npx \@tempa{#1}%
  \if_meaning:w \@tempa\fv_auto_tl
    \cs_set_eq:NN \FV@BaseLineStretch\scan_stop:
  \else:
    \cs_set:Npn\FV@BaseLineStretch{\cs_set:Npn \baselinestretch{#1}}%
  \fi:
}

\def\KV@FV@baselinestretch@default{\cs_set_eq:NN \FV@BaseLineStretch\scan_stop:}

% set without a |\| i.e., fontfamily=tt
\fv_define_key:nnnn{FV}{fontfamily}{%
  \cs_if_free:cTF {FV@fontfamily@#1}%
    {\cs_set:Npn \FV@FontScanPrep{}\cs_set:Npn \FV@FontFamily{\fontfamily{#1}}}
    {\use:c {FV@fontfamily@#1}}
}   
\ExplSyntaxOff
%    \end{macrocode}
%    \begin{macrocode} 
\ExplSyntaxOn 
\fv_define_key:nnnn{FV}{fontseries}{%
  \cs_set_nopar:Npx \@tempa{#1}%
  \if_meaning:w \@tempa\fv_auto_tl
    \cs_set_eq:NN \FV@FontSeries\scan_stop:
  \else:
    \cs_set:Npn \FV@FontSeries{\fontseries{#1}}%
  \fi:
}
\ExplSyntaxOff
%    \end{macrocode}
% \begin{macro}{fontshape}
%    \begin{macrocode}
\ExplSyntaxOn  
\fv_define_key:nnnn{FV}{fontshape}{%
  \cs_set_nopar:Npx \@tempa{#1}%
  \if_meaning:w \@tempa\fv_auto_tl
    \cs_set_eq:NN \FV@FontShape\scan_stop:
  \else
    \def\FV@FontShape{\fontshape{#1}}%
  \fi}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{FV@MakeActive, \FV@MakeUnActive}
% In an expl3 catcode regime |~| is category 10 for space. We set it back to other
% As it interfered in unknow ways!
%
% However, as short so far explanation is as follows:
% It has to do with ligatures the |@noligs| and the backquote character.
% It is all unecessary if we use a more modern font such as lmodern as the font.
%    \begin{macrocode}
\ExplSyntaxOn
\char_set_catcode_other:N \~
\def\FV@MakeActive#1{%
  \catcode`#1=\active
  
  % this can be simplified?
  \def\next##1{\expandafter\def\expandafter\FV@MakeUnActive\expandafter{%
      \FV@MakeUnActive\def##1{\string##1}}}%
    
    % use lccode to keep original catcode of token  
    \bgroup
      \lccode`~=`#1\relax\expandafter\next\expandafter~
    \egroup
  }

\cs_set:Npn \FV@MakeUnActive{}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\FV@ScanPrep}
%    \begin{macrocode}
\bgroup
% Set the backquote to active
\char_set_catcode_active:N \`

\cs_gset:Npn \FV@fontfamily@tt%
  {%
    \def\FV@FontScanPrep{\FV@MakeActive\`}%
    \def\FV@FontFamily{\ttfamily\edef`{{\string`}}}%
  }
  
  
\cs_gset:Npn \FV@fontfamily@cmtt
  {
    \def\FV@FontScanPrep{\FV@MakeActive\`}
    \def\FV@FontFamily
      {
        \edef`{{\string`}}\fontfamily{cmtt}
      }
  }
\egroup
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
% 
% \begin{Verbatim}[fontfamily=cmtt,gobble=1]
%   This is some 'text' with `quotes` and fi typset in cmtt
% \end{Verbatim}
% \begin{Verbatim}[fontfamily=tt,gobble=1]
%   This is some 'text' with `quotes` and fi typset in tt
% \end{Verbatim}
% \begin{Verbatim}[fontfamily=helvetica,gobble=1]
%   This is some 'text' with `quotes` and fi typeset in courier
% \end{Verbatim}
%
% \begin{macro}{tt, cmtt,cmtt-spanish, courier,helvetica}
% Define some key values for the typewriter font. This is a very awkward way to define
% them. I will simplify later, as well as make it more user friendly.
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:cpn {FV@fontfamily@cmtt-spanish}
  {
    \def\FV@FontScanPrep{}
    \def\FV@FontFamily{\fontfamily{cmtt}}
  }
\cs_set:cpn {FV@fontfamily@courier}
  {
    \cs_set:Npn \FV@FontScanPrep{}%
    \cs_set:Npn \FV@FontFamily{\fontfamily{pcr}}
  }
\cs_set:cpn {FV@fontfamily@helvetica}
  {
    \def\FV@FontScanPrep{}
    \let\FV@FontFamily\sffamily
  }
\cs_set:cpn {FV@fontfamily@helvetica}
  {
    \def\FV@FontScanPrep{}
    \cs_set_eq:NN \FV@FontFamily\sffamily
  }
\cs_set:cpn {FV@fontfamily@panunicode}
  {\def\FV@FontScanPrep{}\let\FV@FontFamily\panunicode
  }
\ExplSyntaxOff
\fvset{fontfamily=pcr}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\myFont}
%    \begin{macrocode}

\ExplSyntaxOn
\def\myFont{}
\use:c {FV@fontfamily@myFont}{\def\FV@FontScanPrep{}\def\FV@FontFamily{\myFont}}
\fvset{fontfamily=tt,fontsize=auto,fontshape=auto,%
       baselinestretch=1}
\ExplSyntaxOff       
%    \end{macrocode}
% \end{macro}

%
% \begin{macro}{\FVDefineWhiteSpace} 
% The space and tab characters are defined and then set to appropriate
% internal macros.
%    \begin{macrocode}
\ExplSyntaxOn
\bgroup
  \catcode`\ =\active
  \catcode`\^^I=\active
 
  \gdef\fv_define_whitespace:{\def {\fv_space_tl}\def^^I{\fv_tab:}}%
\egroup
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\fv_tab}
% Puts a tab in an hbox and typesets.
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \fv_tab:
  {
    \dim_set:Nn \l_tmpa_dim {\fv_verb_tab_size_tl\fontdimen2\font}
    \hbox_to_wd:nn\l_tmpa_dim {\hss\fv_tab_char}
  }
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{defineactive}
%    \begin{macrocode}
\ExplSyntaxOn
\tl_new:N \fv_define_active_tl
\fv_define_key:nnnn{FV}{defineactive}[]
  {
    \cs_set:Npn \fv_define_active_tl{#1\scan_stop:}
  }

\fv_define_key:nnnn{FV}{defineactive*}
  {
    \tl_put_right:Nn \fv_define_active_tl {#1}
  }
\fvset{defineactive}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{showspaces}
% The default definition of visible spaces (|showspaces=true|) could allow font commands to escape under some circumstances, depending on how it is used:

% When redefining the tab, you should include the font family, font shape, and text color in the definition.  Otherwise these may be inherited from the surrounding text.  This is particularly important when using the tab with syntax highlighting, such as with the \pkg{minted} or \pkg{pythontex} packages. \pkg{fvextra} patches \pkg{fancyvrb} tab expansion so that variable-width symbols such as |\rightarrowfill| may be used as tabs. 
% 
% I have changed the below to use |\textvisiblespace| instead of |{\tt }|, thus making it incompatible with
% people using \tex.
%
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_boolean_key:nnTF{FV}{showspaces}
  {\def\fv_space_tl{{\FancyVerbSpace}}}
  {\def\fv_space_tl{\ }}
  {\catcode`\~=12 \cs_gset:Npn \FancyVerbSpace{\textvisiblespace}}
  
\fvset{showspaces=false}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{tabsize, \fv_tab_size_tl}
%  Define the |tabsize| key, which has to be less than 100. Store it in |\fv_verb_tab_size_tl|.
%
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{tabsize}
  {
    \int_set:Nn \l_tmpa_int{#1}
    \if_int_compare:w \l_tmpa_int > 100
      \FV@Error{Tab size too large: `\int_use:N\l_tmpa_int'. (Max size = 100)}\FV@eha
    \else:
    \cs_set_nopar:Npx \fv_verb_tab_size_tl { \int_use:N\l_tmpa_int }
    \fi:
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{showtabs}
%    \begin{macrocode}
\ExplSyntaxOn  
\fv_define_boolean_key:nnTF{FV}{showtabs}
  {\cs_set:Npn \fv_tab_char{\fancy_verb_tab}}
  {\cs_set_eq:NN \fv_tab_char\scan_stop:}
  
\fvset{tabsize=2,showtabs=true}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fancy_verb_tab \FancyVerbTab}
%  Draws the tab symbol |\fancy_verb_tab| \FancyVerbTab
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \fancy_verb_tab
  { 
    \tex_valign:D
      {
        \vfil##\vfil\tex_cr:D
        \hbox:n {$\scriptscriptstyle-$} \tex_cr:D
        \hbox_to_wd:nn {0pt}
          { 
            \hss$\scriptscriptstyle\rangle\mskip -.8mu$ 
          }\tex_cr:D
        \hbox:n 
          {
            $\scriptstyle\mskip -3mu\mid\mskip -1.4mu$
          }\cr
    }
  }
\let\FancyVerbTab \fancy_verb_tab  
\ExplSyntaxOff      
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fv_tab_box}
% Holds the contents of a tab.
%    \begin{macrocode}  
\ExplSyntaxOn 

\box_new:N \fv_tab_box
%    \end{macrocode}
% Initialize auxiliary. 
%    \begin{macrocode}
\cs_set:Npn \fv_obey_tabs_init_aux:
  {
    \dim_set:Nn\l_tmpb_dim {\fv_verb_tab_size_tl\fontdimen\tw@\font}
    
    \edef\fv_obey_tab_size: {\number\l_tmpb_dim}
    
    \dim_add:Nn\@tempdimb{\fontdimen\tw@\font}
    \advance\@tempdimb-\fv_verb_tab_size_tl~sp  
    
    \cs_set:Npx \FV@@ObeyTabSize{\number\@tempdimb}
    \cs_set_eq:NN \fv_obey_tabs:\@@_obey_tabs:
    \cs_set_eq:NN \fv_tab:\FV@TrueTab
  }

\cs_set:Npn \@@_obey_tabs: #1
  {
    \hbox_set:Nn \fv_tab_box {#1}
    \box_use:N \fv_tab_box
  }

\cs_set_eq:NN \fv_obey_tabs:\scan_stop:

\cs_set:Npn \FV@TrueTab
  {
    \egroup
    \@tempdima=\fv_obey_tab_size: ~sp\scan_stop:
    \@tempcnta=\wd\fv_tab_box
    \advance\@tempcnta\FV@@ObeyTabSize\scan_stop:
    \divide\@tempcnta\@tempdima
    \multiply\@tempdima\@tempcnta
    \advance\@tempdima-\wd\fv_tab_box
    \setbox\fv_tab_box\hbox\bgroup
    \unhbox\fv_tab_box\kern\@tempdima\hbox_to_wd:nn \z@ {\hss\fv_tab_char}
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{obeytabs}
%    \begin{macrocode} 
\ExplSyntaxOn   
\fv_define_boolean_key:nnTF{FV}{obeytabs}%
  {\cs_set_eq:NN \fv_obey_tabs_init: \fv_obey_tabs_init_aux:}%
  {\cs_set_eq:NN \fv_obey_tabs_init: \scan_stop:}
\fvset{obeytabs=false}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{formatcom}
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{formatcom}[]{\def\FancyVerbFormatCom{#1\scan_stop:}}

\fv_define_key:nnnn{FV}{formatcom*}{%
  \exp_after:wN \def\exp_after:wN \FancyVerbFormatCom\exp_after:wN {%
    \FancyVerbFormatCom#1\scan_stop:}}
    
\fvset{formatcom}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@XLeftMargin,\FV@XRightMargin}
% Keys for setting |xleftmargin| and |xrightmargin|
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FancyVerbFormatLine #1
  {
    \fv_obey_tabs:{#1}
  }
  
\fv_define_key:nnnn{FV}{xleftmargin}{\def\FV@XLeftMargin{#1}}
\cs_set_eq:NN \FV@XLeftMargin\z@

\fv_define_key:nnnn{FV}{xrightmargin}{\def\FV@XRightMargin{#1}}
\cs_set_eq:NN \FV@XRightMargin\z@

\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_boolean_key:nnTF{FV}{resetmargins}%
  {\cs_set_eq:NN \if@FV@ResetMargins\iftrue}
  {\cs_set_eq:NN \if@FV@ResetMargins\iffalse}
\fvset{resetmargins=false}
\ExplSyntaxOff
%    \end{macrocode}
% 
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{listparameters}{\def\FV@ListParameterHook{#1}}
\def\FV@ListParameterHook{}
\ExplSyntaxOff
%    \end{macrocode}
% \begin{docKey}[FV]{hfuzz}{ = \Arg{dim}}{default:2pt}
%  Sets \cs{hfuzz}.
% The original code was:
% \begin{Verbatim}[fontfamily=tt,gobble=1]
% \@tempdima=#1\relax
% \edef\fv_hfuzz{\number\@tempdima sp}}
% \end{Verbatim}
% \end{docKey}
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{hfuzz}
  {
    \cs_set_nopar:Npx \fv_hfuzz {\dim_to_decimal_in_sp:n { #1 }sp}
  } 
\fvset{hfuzz=2pt}
\ExplSyntaxOff
%    \end{macrocode}
% 
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_boolean_key:nnTF{FV}{samepage}%
  {\cs_set:Npn \fv_interline_penalty{\interlinepenalty\@M}}%
  {\cs_set_eq:NN \fv_interline_penalty\scan_stop:}
\fvset{samepage=false}
\ExplSyntaxOff
%    \end{macrocode}
% 
% \begin{macro}{\FV@List}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@List#1
  {
    \bgroup
    \fv_use_values:
    \fv_leave_vmode:
    \if@inlabel
    \else
       \setbox\@labels=\box\voidb@x
   \fi
   \fv_list_nesting:n {#1}%
   \FV@ListParameterHook
   \FV@ListVSpace
   \FV@SetLineWidth
   \fv_interline_penalty
   \cs_set_eq:NN \fv_process_line:n\fv_list_process_line_i:n
   \fv_catcodes:
   \fv_formatting_prep:
   \fv_obey_tabs_init: 
   \FV@BeginListFrame
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\fv_leave_vmode:}
% |\leavevmode| will start a paragraph if necessary unboxing a void box.
% It has no effect in horizontal or math mode.
% l3 has its own version which does not use a a void box. in vertical mode it switches to horizontal mode, and inserts a box of width |\parindent|, followed by the |\everypar| token list.
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \fv_leave_vmode:
  {
    \if@noskipsec
      \mode_leave_vertical:
    \else
      \if@FV@ResetMargins
        \if@inlabel
          \mode_leave_vertical:
        \fi
      \fi
    \fi
    \if_mode_vertical:
      \@noparlisttrue
    \else:
      \@noparlistfalse\unskip\par
    \fi:
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\fv_nesting:n}
%    \begin{macrocode} 
\ExplSyntaxOn 
\cs_set:Npn\fv_list_nesting:n  #1
  {
    \if@FV@ResetMargins
      \@listdepth=\z@
    \else
      \if_int_compare:w\@listdepth>5\scan_stop:
        \@toodeep
      \else
        \advance\@listdepth\@ne
      \fi
    \fi
    \rightmargin\z@
    \cs:w @list\romannumeral\the\@listdepth\cs_end:
    \if_int_compare:w #1 = \z@
      \rightmargin\z@
      \leftmargin\z@
    \fi
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@ListVSpace}
% Adjusts vertical space to the top of the list.
%    \begin{macrocode} 
\ExplSyntaxOn 
\cs_set:Npn \FV@ListVSpace
  {
%  \@topsepadd\topsep
    \@topsepadd=\FancyVerbVspace
    \if@noparlist
      \advance\@topsepadd\partopsep
    \fi
    \if@inlabel
      \skip_vertical:n \parskip
    \else
      \if@nobreak
        \skip_vertical:n \parskip
        \tex_clubpenalty:D \@M
      \else
        \addpenalty\@beginparpenalty
        \@topsep\@topsepadd
        \advance\@topsep\parskip
        \addvspace\@topsep
      \fi
    \fi
    \tex_global:D\@nobreakfalse
    \tex_global:D\@inlabelfalse
    \tex_global:D\@minipagefalse
    \tex_global:D\@newlistfalse
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}

%
% \begin{macro}{\FV@SetLineWidth}
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \FV@SetLineWidth
  {
    \if@FV@ResetMargins
    \else
      \advance\leftmargin\@totalleftmargin
    \fi
    \advance\leftmargin\FV@XLeftMargin\scan_stop:
    \advance\rightmargin\FV@XRightMargin\scan_stop:
    \linewidth\tex_hsize:D
    \advance\linewidth-\leftmargin
    \advance\linewidth-\rightmargin
    \hfuzz\fv_hfuzz\scan_stop:
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fv_list_process_line:n}
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \fv_list_process_line:n #1
  {
    \hbox_to_wd:nn \tex_hsize:D
      {
        \kern\leftmargin
        \hbox_to_wd:nn \linewidth
          { 
            \FV@LeftListNumber
            \FV@LeftListFrame
            \FancyVerbFormatLine{#1}\hss
            \FV@RightListFrame
            \FV@RightListNumber
          }
        \hss
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\fv_list_process_line_i:n}
%  First level list processing.
%    \begin{macrocode}  
\ExplSyntaxOn  
\cs_set:Npn \fv_list_process_line_i:n #1
 {
  \hbox:n 
    {
      \if_box_empty:N     %if_void
        \@labels
      \else:
        \hbox_to:nn \z@{\kern\@totalleftmargin\box_use_drop:N \@labels\hss}
      \fi:
      \fv_list_process_line:n {#1}
    }
  \cs_set_eq:NN \fv_process_line:n\fv_list_process_line_ii:n
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%

% \begin{macro}{\fv_list_process_line_ii:n}
% In second level list nesting. Process the line and set |\fv_process_line:n| to the
% next level.
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \fv_list_process_line_ii:n #1
  {
    \setbox\@tempboxa = \fv_list_process_line:n{#1}%
    \cs_set_eq:NN \fv_process_line:n \fv_list_process_line_iii:n
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fv_list_process_line_iii:n}
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \fv_list_process_line_iii:n#1{%
  {\advance\interlinepenalty\clubpenalty\penalty\interlinepenalty}%
  \box\@tempboxa
  \setbox\@tempboxa=\fv_list_process_line:n {#1}%
  \cs_set_eq:NN \fv_process_line:n\fv_list_process_line_iv:n}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{fv_list_process_line_iv:n}
% Fourth level list nesting processing. This does not call the next level
% but gives control to |\FV@EndList|, which calls the |\fv_process_last_line:|,
% which checks for an empty verbatim environment and then continues.
%
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \fv_list_process_line_iv:n#1{%
  \penalty\interlinepenalty
  \box\@tempboxa
  \setbox\@tempboxa=\fv_list_process_line:n {#1}}%
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro} 
%
% \begin{macro}{\FV@EndList}
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \FV@EndList
  {
    \fv_list_process_last_line: 
    \FV@EndListFrame
    \@endparenv
    \egroup 
    \@endpetrue
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fv_list_process_last_line: }
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \fv_list_process_last_line: 
  {
    \if_meaning:w \fv_process_line:n\fv_list_process_line_iv:n
      {\advance\interlinepenalty\widowpenalty\penalty\interlinepenalty}
      \box\@tempboxa
    \else
      \if_meaning:w \fv_process_line:n\fv_list_process_line_iii:n
        {\advance\interlinepenalty\widowpenalty
          \advance\interlinepenalty\clubpenalty
          \penalty\interlinepenalty}
        \box\@tempboxa
      \else
        \if_meaning:w \fv_process_line:n\fv_list_process_line_i:n
          \FV@Error{Empty verbatim environment}{}
          \fv_process_line:n{}
        \fi
      \fi
    \fi
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@VerbatimBegin}
% Starts the list.
%    \begin{macrocode} 
\ExplSyntaxOn
\cs_set:Npn \FV@VerbatimBegin{\FV@List\z@}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\FV@EndList}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@VerbatimEnd{\FV@EndList}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FVB@Verbatim{\FV@VerbatimBegin\FV@Scan}
\cs_set:Npn \FVE@Verbatim{\FV@VerbatimEnd}
\ExplSyntaxOff
%    \end{macrocode}
% 
% And finally defne the environment. 
%    \begin{macrocode}
\DefineVerbatimEnvironment{Verbatim}{Verbatim}{}
%    \end{macrocode}
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@UseVerbatim #1
  {
    \FV@VerbatimBegin#1\FV@VerbatimEnd
    \@doendpe\tex_global:D\@ignorefalse\ignorespaces
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{macro}{\VerbatimIput}
% The command \cs{VerbatimInput} (the variants \cs{BVerbatimInput} and \cs{LVerbatimInput}
% also exist) allows inclusion of the contents of a file with verbatim formatting. Of
% course, the various parameters which we have described for customizing can still be
% used. 
%    \begin{macrocode} 
\ExplSyntaxOn 
\cs_set:Npn \VerbatimInput {\fv_command:nn{}{VerbatimInput}}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FVC@VerbatimInput#1{\FV@UseVerbatim{\fv_input: {#1}}}
\ExplSyntaxOff
%    \end{macrocode} 
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@LVerbatimBegin{\FV@List\@ne}
\cs_set:Npn \FV@LVerbatimEnd{\FV@EndList}
\ExplSyntaxOff
%    \end{macrocode}
% 
% \begin{macro}{LVerbatim, \FV@LVerbatimBegin}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FVB@LVerbatim{\FV@LVerbatimBegin\FV@Scan}
\cs_set:Npn \FVE@LVerbatim{\FV@LVerbatimEnd}

\DefineVerbatimEnvironment{LVerbatim}{LVerbatim}{}

\cs_set:Npn \FV@LUseVerbatim#1
  {
    \FV@LVerbatimBegin#1\FV@LVerbatimEnd
    \@doendpe\tex_global:D\@ignorefalse\ignorespaces
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\LVerbatimInput}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \LVerbatimInput{\fv_command:nn{}{LVerbatimInput}}
\cs_set:Npn \FVC@LVerbatimInput#1{\FV@LUseVerbatim{\fv_input: {#1}}}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \section{Frames}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn  \FV@Frame@none
  {
    \cs_set_eq:NN \FV@BeginListFrame\scan_stop:
    \cs_set_eq:NN \FV@LeftListFrame\scan_stop:
    \cs_set_eq:NN \FV@RightListFrame\scan_stop:
    \cs_set_eq:NN \FV@EndListFrame\scan_stop:
  }
  
\cs_set:Npn  \FV@Frame@single
  {
    \cs_set_eq:NN \FV@BeginListFrame\FV@BeginListFrame@Single
    \cs_set_eq:NN \FV@LeftListFrame\FV@LeftListFrame@Single
    \cs_set_eq:NN \FV@RightListFrame\FV@RightListFrame@Single
    \cs_set_eq:NN \FV@EndListFrame\FV@EndListFrame@Single
  }
  
\cs_set:Npn  \FV@Frame@lines
  {
    \cs_set_eq:NN \FV@BeginListFrame\FV@BeginListFrame@Lines
    \cs_set_eq:NN \FV@LeftListFrame\scan_stop:
    \cs_set_eq:NN \FV@RightListFrame\scan_stop:
    \cs_set_eq:NN \FV@EndListFrame\FV@EndListFrame@Lines
  }
  
\cs_set:Npn  \FV@Frame@topline
  {
    \cs_set_eq:NN \FV@BeginListFrame\FV@BeginListFrame@Lines
    \cs_set_eq:NN \FV@LeftListFrame\scan_stop:
    \cs_set_eq:NN \FV@RightListFrame\scan_stop:
    \cs_set_eq:NN \FV@EndListFrame\scan_stop:
  }
  
\cs_set:Npn  \FV@Frame@bottomline{%
  \cs_set_eq:NN \FV@BeginListFrame\scan_stop:
  \cs_set_eq:NN \FV@LeftListFrame\scan_stop:
  \cs_set_eq:NN \FV@RightListFrame\scan_stop:
  \cs_set_eq:NN \FV@EndListFrame\FV@EndListFrame@Lines}

%% To define a frame with only a left line
\cs_set:Npn  \FV@Frame@leftline{%
  % To define the \FV@FrameFillLine macro (from \FV@BeginListFrame)
  \if_meaning:w \fv_fillcolor_tl\scan_stop:
    \cs_set_eq:NN \FV@FrameFillLine\scan_stop:
  \else
    \@tempdima\FV@FrameRule\scan_stop:
    \multiply\@tempdima-\tw@
    \edef\FV@FrameFillLine{%
      {\noexpand\fv_fillcolor_tl{\vrule\@width\number\@tempdima sp}%
      \kern-\number\@tempdima sp}}%
  \fi
  \cs_set_eq:NN \FV@BeginListFrame\scan_stop:
  \cs_set_eq:NN \FV@LeftListFrame\FV@LeftListFrame@Single
  \cs_set_eq:NN \FV@RightListFrame\scan_stop:
  \cs_set_eq:NN \FV@EndListFrame\scan_stop:}
  
\cs_set:Npn  \FV@BeginListFrame@Single{%
  \lineskip\z@
  \baselineskip\z@
  \if_meaning:w \fv_fillcolor_tl\scan_stop:
    \cs_set_eq:NN \FV@FrameFillLine\scan_stop:
  \else
    \@tempdima\FV@FrameRule\scan_stop:
    \multiply\@tempdima-\tw@
    \edef\FV@FrameFillLine{%
      {\noexpand\fv_fillcolor_tl{\vrule\@width\number\@tempdima sp}%
      \kern-\number\@tempdima sp}}%
  \fi
%% DG/SR modification begin - May. 19, 1998
%%  \fv_single_frameline:n 
  \fv_single_frameline:n {\z@}%
%% DG/SR modification end
  \penalty\@M
  \FV@SingleFrameSep
  \penalty\@M}

%    \end{macrocode}
% \begin{macro}{label}
% Print a label at the top or bottom depending on the |labelposition|. If the labelposition
% is set to |all| accept a parameter similar to a |\newcommand|. This must be braced.
%    \begin{macrocode}
\fv_define_key:nnnn{FV}{label}
  {
    \cs_set_nopar:Npx  \@tempa{#1}
    \if_meaning:w \@tempa\fv_none_tl
      \cs_set_eq:NN \fv_label_begin:n \scan_stop:
      \cs_set_eq:NN \fv_label_end:n \scan_stop:
    \else:
      \fv_labeli:n#1\@nil
    \fi:
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% The auxiliary macros.
%    \begin{macrocode} 
\ExplSyntaxOn 
\cs_set:Npn \fv_labeli:n{\@ifnextchar[{\fv_label_ii}{\fv_label_ii[]}}

\cs_set:Npn \fv_label_ii[#1]#2\@nil
  {
    \cs_set_nopar:Npn \@tempa{#1}%
    \cs_if_eq:NNTF \@tempa\empty
      {\cs_set:Npn \fv_label_begin:n {#2}}
      {
        \cs_set:Npn \fv_label_begin:n {#1}
        \cs_set:Npn \@@_label_position_bottomline:{\@ne}
      }

      \cs_set:Npn \fv_label_end:n {#2}
  }
  
\fvset{label={Test}}
%    \end{macrocode}
% \begin{macro}{labelposition}
% 		Key for positioning of label in framed verbatims. Possible options, |none|,
% 		|topline|, |bottomline|, |all|.
%
%    \begin{macrocode}
\fv_define_key:nnnn{FV}{labelposition}[none]
  {
    \cs_if_free:cTF {FV@LabelPosition@#1}
      { \FV@Error{Label position `#1' not defined.}\FV@eha }
      { \use:c {FV@LabelPosition@#1} }
    }
    
\cs_set:Npn  \FV@LabelPosition@none
  {
    \cs_set_eq:NN   \@@_label_position_topline:\scan_stop:
    \cs_set_eq:NN   \@@_label_position_bottomline:\scan_stop:
  }
  
\cs_set:Npn  \FV@LabelPosition@topline
  {
    \cs_set:Npn   \@@_label_position_topline:{\@ne}
    \cs_set_eq:NN \@@_label_position_bottomline:\scan_stop:
  }
  
\cs_set:Npn  \FV@LabelPosition@bottomline
  {
    \cs_set_eq:NN \@@_label_position_topline:\scan_stop:
    \cs_set:Npn  \@@_label_position_bottomline:{\@ne}
  }
%    \end{macrocode} 
% \end{macro}
%
% The |labelposition=all| can take a value of all. This permits different 
% labels to be positioned at the topline and bottom line but the syntax
% is not very user friendly. It is modelled after |\newcommand|
% |label={[Start of code]End of code}|.
% 
%    \begin{macrocode}
\cs_set:Npn  \@@_label_position_all
  {
  \cs_set:Npn  \@@_label_position_topline: {\c_one_int}
  \cs_set:Npn  \@@_label_position_bottomline: {\c_one_int}
  }
  
\cs_set_eq:NN \FV@LabelPosition@all \@@_label_position_all  

\fvset{labelposition=topline}

%    \end{macrocode}
% \begin{macro}{\fv_single_frameline:n }
% Draws a single line. Based on its value it selects the position to print. Numbers are outside the box. Not very good typography. Everything is drawn in an hbox. Changed hbox to l3 to allow for coloring.
% Persevere on the new code and then refactor.
%    \begin{macrocode}
\cs_set:Npn  \fv_single_frameline:n #1
  {
    \hbox_to_wd:nn \z@ 
      {
        \kern\leftmargin
        \if_int_compare:w#1=\z@
          \cs_set_eq:NN \FV@Label\fv_label_begin:n 
        \else
          \cs_set_eq:NN \FV@Label\fv_label_end:n 
        \fi
        \if_meaning:w \FV@Label\scan_stop:
          \fv_verb_rule_color:{\vrule \@width\linewidth \@height\FV@FrameRule}
        \else
          \if_int_compare:w#1=\z@
            \setbox\z@\hbox:n {\strut\enspace\fv_label_begin:n \enspace\strut}%
          \else
            \setbox\z@\hbox:n {\strut\enspace\fv_label_end:n \enspace\strut}%
          \fi
          \@tempdimb=\dp\z@
          \advance\@tempdimb -.5\ht\z@
          \@tempdimc=\linewidth
          \advance\@tempdimc -\wd\z@
          \divide\@tempdimc\tw@
          
          % topline
          \if_int_compare:w#1=\z@              
            \if_meaning:w \@@_label_position_topline:\scan_stop:
              \fv_verb_rule_color:
                {
                  \vrule \@width\linewidth \@height\FV@FrameRule
                }
            \else
              \fv_frame_line_with_label: 
            \fi
          % bottomline  
          \else                     
            \if_meaning:w \@@_label_position_bottomline:\scan_stop:
            \fv_verb_rule_color:{\vrule \@width\linewidth \@height\FV@FrameRule}%
            \else
              \fv_frame_line_with_label: 
            \fi
          \fi
        \fi
        \hss
      }
  }
\ExplSyntaxOff    
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fv_frame_line_with_label:}
%    \begin{macrocode}  
\ExplSyntaxOn  
\cs_set:Npn \fv_frame_line_with_label: 
  {
    \ht\z@\@tempdimb\dp\z@\@tempdimb%
    \fv_verb_rule_color:
      {
        \vrule \@width\@tempdimc \@height\FV@FrameRule
        \raise\@tempdimb\box\z@
        \vrule \@width\@tempdimc \@height\FV@FrameRule
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@BeginListFrame@Lines}
%    \begin{macrocode}
\cs_set:Npn \FV@BeginListFrame@Lines{%
  \bgroup
    \lineskip\z@skip
    \fv_single_frameline:n {\z@}%
    \kern-0.5\baselineskip\scan_stop:
    \baselineskip\z@skip
    \kern\FV@FrameSep\scan_stop:
  \egroup }%
%    \end{macrocode}  
% \end{macro}

%    \begin{macrocode}
\cs_set:Npn    \FV@EndListFrame@Lines{%
  \bgroup
    \baselineskip\z@skip
    \kern\FV@FrameSep\scan_stop:
    \fv_single_frameline:n {\@ne}%
  \egroup }
%    \end{macrocode}  
%    \begin{macrocode}  
\cs_set:Npn    \FV@SingleFrameSep{%
  \hbox_to_wd:nn \z@{%
    \kern\leftmargin
    \hbox_to_wd:nn \linewidth{%
      \fv_verb_rule_color:{%
        \if_meaning:w \fv_fillcolor_tl\scan_stop:
          \vrule\@width 0pt\@height\FV@FrameSep\scan_stop:
        \fi
        \vrule\@width\FV@FrameRule\scan_stop:
        \if_meaning:w \fv_fillcolor_tl\scan_stop:
          \hfil
        \else
          {\fv_fillcolor_tl\leaders\hrule\@height\FV@FrameSep\hfil}%
        \fi
        \if_meaning:w \fv_fillcolor_tl\scan_stop:
          \vrule\@width 0pt\@height\FV@FrameSep\scan_stop:
        \fi
        \vrule\@width\FV@FrameRule\scan_stop:}}%
    \hss}}
%    \end{macrocode}  
%    \begin{macrocode}    
\cs_set:Npn \FV@LeftListFrame@Single{%
  \strut
  {\fv_verb_rule_color:{\vrule \@width\FV@FrameRule}}%
  \FV@FrameFillLine
  \if_meaning:w \fv_fillcolor_tl\scan_stop:
    \kern\FV@FrameSep
  \else
    {\noexpand\leavevmode\fv_fillcolor_tl{\vrule\@width\FV@FrameSep}}%
  \fi}
%    \end{macrocode}  
%    \begin{macrocode}  
\cs_set:Npn \FV@RightListFrame@Single
  {
    \if_meaning:w \fv_fillcolor_tl\scan_stop:
      \kern\FV@FrameSep
    \else
      {\noexpand\leavevmode\fv_fillcolor_tl{\vrule\@width\FV@FrameSep}}%
    \fi
  {
    \noexpand\leavevmode\fv_verb_rule_color:{\vrule\@width\FV@FrameRule}}
  }

\cs_set:Npn \FV@EndListFrame@Single
  {
    \penalty\@M
    \FV@SingleFrameSep
    \penalty\@M
    \fv_single_frameline:n {\@ne}
  }
%    \end{macrocode} 
%
% \begin{macro}{framerule} 
%    \begin{macrocode}  
\fv_define_key:nnnn{FV}{framerule}{%
  \@tempdima=#1\scan_stop:
  \edef\FV@FrameRule{\number\@tempdima sp\scan_stop:}}
  
\cs_set:Npn \KV@FV@framerule@default{\cs_set_eq:NN \FV@FrameRule\fboxrule}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{framesep}
% The key value |framesep| is defined in terms of \latex's 
%    \begin{macrocode}
\fv_define_key:nnnn{FV}{framesep}{%
  \@tempdima=#1\scan_stop:
  \edef\FV@FrameSep{\number\@tempdima sp\scan_stop:}}

\def\KV@FV@framesep@default{\cs_set_eq:NN \FV@FrameSep\fboxsep}

\fvset{framerule,framesep}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{rulecolor}
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{rulecolor}
  {
    \cs_set_nopar:Npx \@tempa{#1}%
    \if_meaning:w \@tempa\fv_none_tl
      \cs_set_eq:NN \fv_verb_rule_color:\scan_stop:
    \else
      \cs_set_eq:NN \fv_verb_rule_color:\@tempa
    \fi
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro} 
%
% \begin{macro}{fillcolor, \fv_fillcolor_tl}
%    \begin{macrocode}  
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{fillcolor}
  {
    \cs_set_nopar:Npx \@tempa{#1}
    \if_meaning:w \@tempa\fv_none_tl
      \cs_set_eq:NN \fv_fillcolor_tl\scan_stop:
    \else:
      \cs_set_eq:NN \fv_fillcolor_tl\@tempa
    \fi:
  }
\fvset{rulecolor=none,fillcolor=none}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro} 
%
% \begin{macro}{frame, \FV@Frame@double} 
% The |double| option key code definition.
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@Frame@double
  {
    \cs_set_eq:NN \@@_frame_begin:\FV@FrameBegin@double
    \cs_set_eq:NN \@@_frame_line: \FV@FrameLine@double
    \cs_set_eq:NN \@@_frame_end: \FV@FrameEnd@double
  }
  
\fv_define_key:nnnn{FV}{frame}[none]{%
  \@ifundefined{FV@Frame@#1}%
    {\FV@Error{Frame style `#1' not defined.}\FV@eha}%
    {\use:c {FV@Frame@#1}}}
\fvset{frame=none}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{firstnumber, \fv_set_lineno:n}
% Define the |firstnumber| key.  
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{firstnumber}[auto]
{
    \cs_set:Npn \@tempa{#1}\cs_set:Npn \@tempb{auto}
    \if_meaning:w \@tempa\@tempb
      \cs_set:Npn \fv_set_lineno:n
        {
          \int_set:Nn \c@fv_verbline_int\fv_codeline_int
          \int_set:NN \c@fv_verbline_int\m@ne
        }
    \else:
      \def\@tempb{last}
      \if_meaning:w \@tempa\@tempb
        \cs_set_eq:NN \fv_set_lineno:n\scan_stop:
      \else:
        \cs_set:Npn \fv_set_lineno:n
          {
            \int_set:Nn \c@fv_verbline_int {#1}
            \int_add:Nn \c@fv_verbline_int {\m@ne}
          }
      \fi:
   \fi:
}  
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\ExplSyntaxOn  
\fv_define_boolean_key:nnTF{FV}{numberblanklines}
  {\cs_set_eq:NN \if@FV@NumberBlankLines\iftrue}
  {\cs_set_eq:NN \if@FV@NumberBlankLines\iffalse}
\fvset{numberblanklines=true}
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{macro}{\fv_refstepcounter:n, \FV@StepLineNo}
% We need to be able to step a counter as well as set its reference.
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \fv_refstepcounter:n#1
  {
    \int_gincr:c {c@#1}
    \protected@edef\@currentlabel{\csname p@#1\endcsname\arabic{fv_verbline_int}}
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_set:Npn \FV@StepLineNo
  {
    % defined when counter is stepped   
    \fv_set_lineno:n
    \cs_set:Npn \FV@StepLineNo
      {
        \if@FV@NumberBlankLines
          \fv_refstepcounter:n{fv_verbline_int}
        \else
          \if_meaning:w \fv_line\empty
          \else:
            \fv_refstepcounter:n {fv_verbline_int}
          \fi:
        \fi
      }
    \FV@StepLineNo
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \theFancyVerbLine{\rmfamily\tiny\arabic{fv_verbline_int}}
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{macro}{\FV@Numbers@none,\FV@Numbers@left,\Fv@Numbers@right}
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{numbers}[none]{%
  \cs_if_free:cTF {FV@Numbers@#1}
    {\FV@Error{Numbers~style~`#1'~not~defined.}\FV@eha}
    {\use:c {FV@Numbers@#1}}}
    
\cs_set:Npn \FV@Numbers@none 
  {
    \cs_set_eq:NN \FV@LeftListNumber\scan_stop:
    \cs_set_eq:NN \FV@RightListNumber\scan_stop:
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{stepnumber, \fv_stepnumber_int}
%    \begin{macrocode}
\ExplSyntaxOn
\int_new:N \fv_stepnumber_int
\fv_define_key:nnnn{FV}{stepnumber}{\fv_stepnumber_int#1}
\cs_set:Npn \KV@FV@stepnumber@default{\fv_stepnumber_int\c_one_int}

\fvset{stepnumber=1}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\FV@Numbers@Left}
%    \begin{macrocode}
\cs_set:Npn \FV@Numbers@left
  {
    \cs_set_eq:NN \FV@RightListNumber\scan_stop:
    
    \cs_set:Npn \FV@LeftListNumber
      {
        \@tempcnta=\fv_codeline_int
        \@tempcntb=\fv_codeline_int
        \divide\@tempcntb\fv_stepnumber_int
        \multiply\@tempcntb\fv_stepnumber_int
        \if_int_compare:w\@tempcnta=\@tempcntb
          \if@FV@NumberBlankLines
            \hbox_to_wd:nn \z@{\hss\theFancyVerbLine\kern\fv_number_sep:n }%
          \else
            \if_meaning:w \fv_line\empty
            \else
              \hbox_to_wd:nn \z@{\hss\theFancyVerbLine\kern\fv_number_sep:n }%
            \fi
          \fi
        \fi
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fv_numbers_right}
%    \begin{macrocode}  
\cs_set:Npn \FV@Numbers@right
  {
  \cs_set_eq:NN \FV@LeftListNumber\scan_stop:
  
  \cs_set:Npn \FV@RightListNumber
    {
      \@tempcnta=\fv_codeline_int
      \@tempcntb=\fv_codeline_int
      \divide\@tempcntb\fv_stepnumber_int
      \multiply\@tempcntb\fv_stepnumber_int
      \if_int_compare:w\@tempcnta=\@tempcntb
        \if@FV@NumberBlankLines
          \hbox_to_wd:nn \z@ {\kern\fv_number_sep:n \theFancyVerbLine\hss}
        \else
          \if_meaning:w \fv_line\empty
          \else
            \hbox_to_wd:nn \z@ {\kern\fv_number_sep:n \theFancyVerbLine\hss}%
          \fi
        \fi
      \fi
    }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l_numbersep_dim, \fv_number_sep:n }
%    \begin{macrocode}
\ExplSyntaxOn
\dim_new:N \l_numbersep_dim
\fv_define_key:nnnn{FV}{numbersep}
  {
    \dim_set:Nn \l_numbersep_dim {#1} 
    \cs_set_nopar:Npx \fv_number_sep:n  {\dim_use:N \l_numbersep_dim}
  }
\fvset{numbers=left,numbersep=12pt,firstnumber=1}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{BVerbatim}
%
%   	This produces boxed verbatims. Most of the previously define key-values can be used, as well 
%   	as to new keys |boxwith| and |baseline| that are used to align boxed verbatims against
%   	others.
% \begin{macro}{\FV@BVerbatimBegin, \FV@BVerbatimEnd}
% 		Starts the process, by opening the box and process the line. 		
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@BVerbatimBegin
  {
    \bgroup
      \fv_use_values:
      \FV@BeginVBox
      \cs_set_eq:NN \fv_process_line:n\FV@BProcessLine
      \fv_formatting_prep:
      \fv_obey_tabs_init: 
  }

\cs_set:Npn \FV@BVerbatimEnd{\FV@EndVBox\egroup }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@BeginVBox}   
%  Begin an |hbox| which contains either a |vbox|,|vtop| or |vtop| depending on the
%  value of the |baseline| key. 
%    \begin{macrocode}
\cs_set:Npn \FV@BeginVBox
  {
  \leavevmode
    \hbox\if_meaning:w \FV@boxwidth\scan_stop:\else~to\FV@boxwidth\fi\bgroup
    \ifcase
      \FV@baseline
      \vbox
      \or \vtop
      \or$\vcenter
    \fi\bgroup
  }
  
\cs_set:Npn \FV@EndVBox{\egroup\ifmmode$\fi\hfil\egroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{boxwidth}
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{boxwidth}{%
  \def\@tempa{#1}\def\@tempb{auto}%
  \if_meaning:w \@tempa\@tempb
    \cs_set_eq:NN \FV@boxwidth\scan_stop:
  \else
    \@tempdima=#1\scan_stop:
    \edef\FV@boxwidth{\number\@tempdima sp}%
  \fi
}
\ExplSyntaxOff 
%    \end{macrocode}
% \end{macro}
%  
% \begin{macro}{\KV@FV@boxwidth@default}
%   	The code for the default value of the key.
%    \begin{macrocode} 
\ExplSyntaxOn
\cs_set:Npn \KV@FV@boxwidth@default
  {
    \cs_set_eq:NN \FV@boxwidth\scan_stop:
  }
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{baseline}
% The |baselinekey| is used to set the alignment of boxed verbatims.
%    \begin{macrocode}
\ExplSyntaxOn
\fv_define_key:nnnn{FV}{baseline}{
  \ExplSyntaxOn 
  \if t#1\@empty\cs_set_eq:NN \FV@baseline\@ne
  \else
    \if c#1\@empty\cs_set_eq:NN \FV@baseline\tw@
      \else \cs_set_eq:NN \FV@baseline\z@
   \fi
  \fi
  \ExplSyntaxOff
  }
  
\ExplSyntaxOff  
  
\fvset{baseline=b,boxwidth}
\ExplSyntaxOn
\cs_set:Npn \FV@BProcessLine #1
  {
    \hbox{\FancyVerbFormatLine{#1}}
  }
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro} 
% 
%
% \begin{macro}{\FVB@BVerbatim, \FVE@BVerbatim}
%    \begin{macrocode}    
\ExplSyntaxOn
\cs_set:Npn \FVB@BVerbatim {\FV@BVerbatimBegin\FV@Scan}
\cs_set:Npn \FVE@BVerbatim{\FV@BVerbatimEnd}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{BVerbatim}
%    \begin{macrocode}
\DefineVerbatimEnvironment{BVerbatim}{BVerbatim}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@BUseVerbatim, \BVerbatimInput}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FV@BUseVerbatim#1{\FV@BVerbatimBegin#1\FV@BVerbatimEnd}
\cs_set:Npn \BVerbatimInput{\fv_command:nn{}{BVerbatimInput}}
\cs_set:Npn \FVC@BVerbatimInput#1{\FV@BUseVerbatim{\fv_input: {#1}}}
\cs_set:Npn \SaveVerbatim{\fv_environment:nn{}{SaveVerbatim}}
\ExplSyntaxOff
%    \end{macrocode}
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \FVB@SaveVerbatim#1
  {
    \@bsphack
    \bgroup
      \fv_use_values:
      \cs_set:Npn \SaveVerbatim@Name{#1}%
      \cs_gset:Npn \FV@TheVerbatim{}%
      \cs_set:Npn \fv_process_line:n ##1 
        {
          \exp_after:wN \cs_gset:Npn \exp_after:wN \FV@TheVerbatim\exp_after:wN 
            {
              \FV@TheVerbatim\fv_process_line:n {##1}
            }
        }
      \cs_gset:Npn \FV@TheVerbatim{}%
      \FV@Scan
  }
    
    
\cs_set:Npn \FVE@SaveVerbatim
  {
    \exp_after:wN \tex_global:D\exp_after:wN \cs_set_eq:NN 
    \csname FV@SV@\SaveVerbatim@Name\endcsname\FV@TheVerbatim
    \egroup\@esphack
  }
  
\DefineVerbatimEnvironment{SaveVerbatim}{SaveVerbatim}{}


\def\FV@CheckIfSaved#1#2{%
  \@ifundefined{FV@SV@#1}%
  {\FV@Error{No verbatim text has been saved under name `#1'}\FV@eha}%
  {#2{\csname FV@SV@#1\endcsname}}}


\cs_set:Npn \UseVerbatim{\fv_command:nn{}{UseVerbatim}}
\cs_set:Npn \FVC@UseVerbatim#1{\FV@CheckIfSaved{#1}{\FV@UseVerbatim}}
\cs_set:Npn \LUseVerbatim{\fv_command:nn{}{LUseVerbatim}}
\cs_set:Npn \FVC@LUseVerbatim#1{\FV@CheckIfSaved{#1}{\FV@LUseVerbatim}}
\cs_set:Npn \BUseVerbatim{\fv_command:nn{}{BUseVerbatim}}
\cs_set:Npn \FVC@BUseVerbatim#1{\FV@CheckIfSaved{#1}{\FV@BUseVerbatim}}


\newwrite\FV@OutFile
\cs_set:Npn \VerbatimOut{\fv_environment:nn{}{VerbatimOut}}
\cs_set:Npn \FVB@VerbatimOut#1
  {
    \@bsphack
    \bgroup
    \fv_use_values:
    \fv_define_whitespace:
    \cs_set:Npn \fv_space_tl{\c_space_tl}
    \FV@DefineTabOut
    \cs_set:Npn \fv_process_line:n{\immediate
    
    \FV@OutFile}
    \immediate\openout\FV@OutFile #1\scan_stop: 
    \cs_set_eq:NN \FV@FontScanPrep\scan_stop:
    \cs_set_eq:NN \@noligs\scan_stop:
    \FV@Scan
  }
    
\def\FVE@VerbatimOut{\immediate\closeout\FV@OutFile\egroup\@esphack}

\DefineVerbatimEnvironment{VerbatimOut}{VerbatimOut}{}
\cs_set:Npn \FV@DefineTabOut
  {
    \def\fv_tab:{}%
    \@tempcnta=\fv_verb_tab_size_tl\scan_stop:
    \loop\if_int_compare:w\@tempcnta>\z@
      \edef\fv_tab:{\fv_tab:\space}%
      \advance\@tempcnta\m@ne
    \repeat
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{macro}{\SaveVerb}
%   \cs{SaveVerb}\Arg{cs name to save to}
%   Saves a a verbatim command |\SaveVerb{danger}= \test \something =|. Can be used to save
%   verbatims and use later using |\UseVerb{danger}|. See usage at example \ref{ex:saveverb}
%   in Chapter~\ref{ch:verbatim}.
%
% There is one additional keyword \docAuxKey[FV]{aftersave}, which takes code to execute immediately 
% after saving the verbatim text into the storage bin. 
%    \begin{macrocode}  
\ExplSyntaxOn

% reminder |\fv_command| will get a macro with |FVC| prefix and indirectly call
% \FVC@SaveVerb
\cs_set:Npn \SaveVerb{\fv_command:nn{}{SaveVerb}}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macrocode}
\ExplSyntaxOn
\bgroup

\catcode`\^^M=\active%

% \#1 name
% \#2 =
% \something\something=
%
\cs_gset:Npn \FVC@SaveVerb#1#2
  {
    \cs_set:cpn {FV@SV@#1}{}%
    \bgroup
    
      % use any setttings
      \fv_use_values:%
      \fv_catcodes:%
    
      % define the EOL as outer to give an error if the user
      % missed an enclosing token.
      % we could use balance token from verbatim to improve
      % the user interface messages here.  
      \outer\def^^M{\FV@EOL}%
      
      % The key is defined using |\FancyVerbAfterSave|
      % Change original definitions to a tl
      \tl_gset_eq:NN \g_@@_after_save_code\FancyVerbAfterSave
      
      % change the character to other = 
      \char_set_catcode_other:N #2
    
      % This is a strange consruct revisit
      \tl_set:Nn\l_tmpa_tl {\tl_to_str:n{#2}} 
      
      \cs_set:Npn\@tempa{\def\FancyVerbGetVerb####1####2}
      % #2 for example can be an =, change to string 
      \exp_after:wN \@tempa\tl_to_str:n {#2}
      {
        \egroup 
        \cs_set:cpn {FV@SV@#1}{##2}\g_@@_after_save_code
      }
      % if the delimiter is not found continue with error
      \FancyVerbGetVerb\FV@EOL
  }
\egroup 


\cs_set:Npn \FV@EOL{%
  \egroup 
  \FV@Error%
    {Could not find the end delimiter of a short verb command}%
    {You probably just forget the end delimiter of a \string\Verb\space or
      \string\SaveVerb^^J%
      command, or you broke the literal text across input lines.^^J%
      Hit <return> to proceed.}}
      
\fv_define_key:nnnn{FV}{aftersave}{\def\FancyVerbAfterSave{#1}}

\fvset{aftersave=}

\cs_set:Npn \FV@UseVerb#1{\mbox{\fv_use_values:\fv_formatting_prep:#1}}

\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\UseVerb}
%    \begin{macrocode}
\ExplSyntaxOn
\DeclareRobustCommand\UseVerb{\fv_command:nn{}{UseVerb}}

\cs_set:Npn \FVC@UseVerb #1
  {
    \@ifundefined{FV@SV@#1}%
      {\FV@Error{Short verbatim text never saved to name `#1'}\FV@eha}%
      {\FV@UseVerb{\use:c {FV@SV@#1}}}
  }
\ExplSyntaxOff    
%    \end{macrocode}
% \end{macro}
%
% \section{\textbackslash Verb}
% \begin{macro}{\Verb}
%
% The |\Verb| command acts like verbatims |\verb|, but can use a key value interface. The definition code follow very closely to that of |\SaveVerb| and |\UseVerb|
%    \begin{macrocode}    
\ExplSyntaxOn
\cs_set_nopar:Npn \Verb{\fv_command:nn{}{Verb}}
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\ExplSyntaxOn
\char_set_catcode_other:N \~
\bgroup
\catcode`\^^M=\active%
\cs_gset:Npn \FVC@Verb#1
  {
  \bgroup%
    \fv_use_values:
    
    \fv_formatting_prep:

    \fv_catcodes:

    \outer\def^^M{}%

    \catcode`#1=12%

    \def\@tempa{\def\FancyVerbGetVerb####1####2}
    \exp_after:wN \@tempa\string#1{\mbox{##2}\egroup }%

    \FancyVerbGetVerb\FV@EOL
  }
\egroup
%

%\ExplSyntaxOff
%    \end{macrocode}
%
% \section{Short Verbatims}
%
%    Provide a function to make a certain character denote the start and stop of verbatim text 
% 	   without the need to put |\verb| in front. It is possible to use the key value interface as applicable.
% 		
%   ^^A \DefineShortVerb{\"}  
%   ^^A  "\test"

%   ^^A \UndefineShortVerb{\"}
%
% 		This is to test command printed using the short verbatim.
%
% 		Just a reminder we also have the |\MakeShortVerb| from \pkg{doc}
%    Also this can be shortened dramatically using xparse, but then we may loose
%    the keyval interface
%
% \subsection{Handling special characters}
%
%  The \cs{dospecial} macro is conventionally used by verbatim macros to alter the 
%  catcodes of the currently active characters. This was originally defined by 
%  Knuth in plainTeX and carried over to LaTeX by Lamport in |ltxplain.dtx| in |source2e|.
%
% It contains the 11 special characters.
%
% \begin{Verbatim}[gobble=1]
% \def\dospecials{\do\ \do\\\do\{\do\}\do\$\do\&\do\#\do\^
%                                           \do\_\do\%\do\~}
% \end{Verbatim}
%
% As with all Knuth type lists by defining appropriate macros for |do| one
% can manipulate the list items.
%
% With \latex3 there are two sequence lists provided to keep track of these 
% special characters. \docAuxCommand{l_char_special_seq} and
% \docAuxCommand{l_char_active_seq}. These are to designed to be maintained
% at the document level.
%
% Two sequences for dealing with special characters. The first is characters which may be
% active, the second longer list is for “special” characters more generally. Both lists are
% escaped so that for example bulk code assignments can be carried out. In both cases, the
% order is by ascii character code (as is done in for example |\ExplSyntaxOn|).
%
% Used to track which tokens will require special handling when working with verbatimlike
% material at the document level as they are not of categories letter (catcode 11) or
% other (catcode 12). Each entry in the sequence consists of a single escaped token, for
% example |\\| for the backslash or |\{| for an opening brace. Escaped tokens should be added
% to the sequence when they are defined for general document use.
%
% \begin{verbatim}
% \seq_new:N \l_char_special_seq
% 
% \seq_set_split:Nnn \l_char_special_seq { }
%   { \ \" \# \$ \% \& \\ \^ \_ \{ \} \~ }
%
% \seq_new:N \l_char_active_seq
%   \seq_set_split:Nnn \l_char_active_seq { }
%   { \" \$ \& \^ \_ \~ }
%\end{verbatim}
%
%
% Orthogonally to |\dospecials| LaTeX2e has \docAuxCommand{@sanitize} which changes teh catcode of all special characters except for braces to \enquote{other}. It can be used for commands like
% cs{index} taht want to write their arguments verbatim. As mentioned in the kernel this command
% should only be executed within a group, or chaos will ensue. 
%
% When we define a short verb both lists need to be kept uptodate. In our case we will
% update also the l3 lists.
%
% Unlike to the orginal definitions of fancyvrb which had a lot of acrobatics, we will
% simplify and make teh code more understandable using sequences.
%
% \begin{macro}{\fv_add_special:Nn}
%    \begin{macrocode}  
\ExplSyntaxOn

% Define a new sequence for sanitizing all the special chars. 
% Although LaTeX's sanitize can be considered a token list we will 
% define ours as a sequence so we can iterate better over it. 
\seq_new:N \fv_sanitize_seq:N
\seq_gset_split:Nnn \fv_sanitize_seq { } 
  { \ \" \# \$ \% \& \\ \^ \_ \~ }

\cs_set_eq:NN \fv_sanitize_add:Nn \seq_gput_right:Nn
\cs_set_eq:NN \fv_sanitize_pop_right:NN \seq_pop_right:NN  

% if we are in doc there is a command to add to specials we can use it
% or define it
\cs_if_exist:NTF\add@special 
  { 
      \cs_gset_eq:NN \fv_add_special:Nn \add@special 
  }
  { 
    \cs_gset:Npn \fv_add_special:Nn
      {
        \rem@special{#1}
        \exp_after:wN
          \gdef\expandafter
            \dospecials
              \expandafter {\dospecials \do #1} 
      }
    
    \cs_set:Npn \rem@special#1
      {
        \def\do##1
          {
            \ifnum`#1=`##1 \else \noexpand\do\noexpand##1\fi
          }
          
         % update the list globally
         \xdef\dospecials{\dospecials}%
         
         % fixing \@sanitize is the same except that we need to  
         % redefine \@makeother
        \group_begin:
        \cs_set:Npn \@makeother ##1
          {
            % left original definition here
            \ifnum`#1=`##1 \else \noexpand\@makeother\noexpand##1\fi
          }
            \xdef\@sanitize{\@sanitize}
        \group_end:
     }
  }  


\cs_set:Npn \DefineShortVerb{\FV@Command{}{DefineShortVerb}}

\char_set_catcode_other:N \~
\cs_set:Npn\FVC@@DefineShortVerb#1
  {
  
  \group_begin:
    % maybe not needed but to make sure
    \char_gset_catcode_active:N #1 
    
    % remember the `#1 is a number so that the lowercase `\~
    % will behave differently
    \lccode`\~=`#1%
    \lowercase{\gdef\@tempg{\edef~}\global\let\@temph~}
  \group_end:
  
  % Save the lowercase definition? In doc saved as
  \cs_set_eq:cN {FV@AC@\string#1} \@temph
  
  
   
  % Save the catcode of the short verb marker globally. Note
  % doc saves it in cc\string#1
  \cs_gset:cpx {FV@CC@\string#1} {\the\catcode`#1}
  
  
  \cs_set_eql:cN {FV@KV@\string#1} \FV@KeyValues
  
  \@tempg{
    \let\noexpand\FV@KeyValues\expandafter\noexpand
      \csname FV@KV@\string#1\endcsname
      \noexpand\FVC@Verb\expandafter\@gobble\string#1}
    
  % Add to specials the escaped character (say\")
  % Since we have checked already if it is included in the list, we have no worries to
  % add it.
  %\expandafter\def\expandafter\dospecials\expandafter{\dospecials\do#1}%
  \fv_add_special:Nn\dospecials{\do#1}
  % Add to the sanitize list
  %\expandafter\def\expandafter\@sanitize\expandafter{\@sanitize\@makeother#1}
  
  % Make the character active
  \catcode`#1=\active
  }

\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}  

% \begin{macro}{}
% \begin{macrocode} 
\ExplSyntaxOn
\def\UndefineShortVerb#1
  {
    \@ifundefined{FV@CC@\string#1}%
      {\FV@Error{`\expandafter\@gobble\string#1' is not a short
        verb character}\FV@eha}%
      {\FV@UndefineShortVerb#1}
  }



\def\FV@UndefineShortVerb#1
  {
    \catcode`#1=\csname FV@CC@\string#1\endcsname
%% DG/SR modification begin - Jun. 12, 1998
    \expandafter\let\csname FV@CC@\string#1\endcsname\relax
%% DG/SR modification end
    
%  \begingroup
%    \lccode`\~=`#1%
%    \lowercase{\gdef\@tempg{\let~}}%
%  \endgroup
%  \expandafter\@tempg\csname FV@AC@\string#1\endcsname
%  \def\@tempa##1\do#1##2\@nil##3\@nil##4\@@nil{##3\def\dospecials{##1##2}\fi}%
%  \expandafter\@tempa\dospecials\@nil\iftrue\@nil\do#1\@nil\iffalse\@nil\@@nil
%  \def\@tempa##1\@makeother#1##2\@nil##3\@nil##4\@@nil{%
%    ##3\def\@sanitize{##1##2}\fi}%
%  \expandafter\@tempa\@sanitize\@nil\iftrue\@nil\do#1\@nil\iffalse\@nil\@@nil
%  
}



\def\SaveMVerb{\FV@Command{}{SaveMVerb}}
\begingroup
\catcode`\^^M=\active%
\gdef\FVC@SaveMVerb#1#2{%
  \@ifundefined{FV@SVM@#1}{}%
    {\FV@Error{Moving verbatim name `#1' already used}%
      {I will overwrite the old definition. Hit <return> to continue.}}%
  \global\@namedef{FV@SVM@#1}{}%
  \begingroup%
    \let\FV@SavedKeyValues\FV@KeyValues%
    \FV@UseKeyValues%
    \FV@CatCodes%
    \outer\def^^M{}%
    \global\let\@tempg\FancyVerbAfterSave%
    \catcode`#2=12%
    \def\@tempa{\def\FancyVerbGetVerb####1####2}%
    \expandafter\@tempa\string#2{%
      \if@filesw
        \FV@DefineWhiteSpace%
        \let\FV@Space\space%
        \let\FV@Tab\space%
        \FV@MakeUnActive%
        \let\protect\string
        \immediate\write\@auxout{%
          \noexpand\SaveGVerb[\FV@SavedKeyValues]{#1}\string#2##2\string#2}%
      \fi
      \endgroup%
      \@namedef{FV@SV@#1}{##2}%
      \@tempg}%
    \FancyVerbGetVerb\FV@EOL}%
\endgroup
\def\SaveGVerb{\FV@Command{}{SaveGVerb}}
\begingroup
\catcode`\^^M=\active%
\gdef\FVC@SaveGVerb#1#2{%
  \global\@namedef{FV@SVG@#1}{}%
  \begingroup%
    \FV@UseKeyValues%
    \FV@CatCodes%
    \outer\def^^M{}%
    \catcode`#2=12%
    \def\@tempa{\def\FancyVerbGetVerb####1####2}%
    \expandafter\@tempa\string#2{\endgroup\global\@namedef{FV@SVG@#1}{##2}}%
    \FancyVerbGetVerb\FV@EOL}%
\endgroup
\def\UseMVerb{\protect\pUseMVerb}
\def\pUseMVerb{\FV@Command{}{pUseMVerb}}
\def\FVC@pUseMVerb#1{%
  \expandafter\ifx \csname FV@SVM@#1\endcsname\relax
    \expandafter\ifx \csname FV@SVG@#1\endcsname\relax
      \@warning{Moving verbatim text not defined for name `#1'}\FV@eha
      {\bf ??}%
    \else
      \FV@UseVerb{\@nameuse{FV@SVG@#1}}%
    \fi
  \else
    \FV@UseVerb{\@nameuse{FV@SVM@#1}}%
  \fi}
%    \end{macrocode}


% \end{macro}
%
%    \begin{macrocode}  
\ExplSyntaxOn
\exp_after:wN \if_meaning:w \csname documentclass\endcsname\scan_stop:
  \def\lrbox#1
    {%
      \edef\@tempa
        {
          \egroup 
          \setbox#1\hbox{%
            \bgroup\aftergroup}%
              \def\noexpand\@currenvir{\@currenvir}
        }
      \@tempa
      \@endpefalse
      \bgroup
        \ignorespaces
    }
    
    \def\endlrbox{\unskip\egroup}
\fi
\ExplSyntaxOff
%    \end{macrocode}
%    \begin{macrocode}

\InputIfFileExists{fancyvrb.cfg}{}{}
%    \end{macrocode}
%%
\endinput
%</package>
%%
%% End of file `fancyvrb.sty'.
