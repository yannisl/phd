% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd-toc
A package to manage running heads in LaTeX
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
This file provides a template for defining a class.
%</readme>
%<*readmemd>
###The `phd-toc` LaTeX2e package

The `phd-toc` latex package is part of the `phd` budle and the class 
with the same name provide
convenient methods to create new styles for books, reports
and articles. It package loads a suite of commonly used packages 
and resolves conflicts. 

This work consists of the file  `phd-toc.dtx`,
and the derived files   `phd-toc.ins`,  `phd-toc.pdf`, and `phd-toc.sty`.

###Installation

run the script `phd-lua`

           phd-lua phd-pkgmanager.dtx on windows

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com

### Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use one command:

      \cxset{chapter name font-size: Huge,
             chapter number font-size: HUGE} 

### Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs. At present I estimate
that I have completed about 80% of the work that needs
to be done.

__The package as it stands is not production stable.__ 


%</readmemd>
%<*todo>
Improve on User markup
%</todo>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phd-runningheads 
A package to manage running heads in LaTeX
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble
\postamble
 Copyright (C) 2015 by Dr. Yiannis Lazarides <yannislaz@gmail.com>
\endpostamble
%\usedir{tex/latex/\jobname}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{TOC}}
 }
%</install>
%<install>\endbatchfile
%<*internal>
%\usedir{source/latex/\jobname}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
%\usedir{doc/latex/demopkg}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\generate{
  \file{\jobname.md}{\from{\jobname.dtx}{readmemd}}
}
%\generate{
%  \file{phd-testhead.tex}{\from{\jobname.dtx}{TEST}}
%}
\generate{
  \file{\jobname-todo.tex}{\from{\jobname.dtx}{TODO}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*driver>
\NeedsTeXFormat{LaTeX2e}[2017/04/15]%
\ProvidesFile{phd-toc.drv}%
  [2013/01/13 v1.0 ]%
\documentclass[oneside,11pt,a4paper]{ltxdoc}
\usepackage[bottom=4cm,footskip=3cm,
            headheight=15pt, headsep=2cm]{geometry}
\savegeometry{std}

\usepackage{phd}

\usepackage{phd-documentation}
\usepackage{phd-colorpalette}
%\usepackage{phd-toc}
\usepackage{phd-lowersections}
\usepackage{phd-runningheads}
%\usepackage{verse}
\usepackage{threeparttablex}
\let\HUGE\Huge
\input{defaults-chapters}
\cxset{palette rouge,
          fashion image=hypatia}    
\sethyperref
\EnableCrossrefs
\CodelineIndex
\RecordChanges
%\def\toctitle#1{\protect\color{red}#1}
%\def\addcontentsline#1#2#3{%
% \addtocontents{#1}{\protect\contentsline{#2}{\protect\toctitle{#3}}{\thepage}}} 
%\definecolor{bgsexy}{HTML}{F09078}
%\definecolor{creamy}{HTML}{D83078}
%\cxset{chapter title color= creamy,
%       chapter label color = creamy,
%       chapter number color = creamy,
%       chapter number font-size = Huge,
%       subsection title color = creamy,
%       chapter name = CHAPTER,
%       chapter label case = upper,
%       chapter align=left,
%       chapter title align=left}
\input{defaults-chapters}  
\cxset{headings odd header background color = white,
         headings even header background color = white,
         section title font-shape = itshape,
         subsection afterindent=off,
         section format=hang,
         chapter format=traditional,
         chapter opening = right,
  }  
   
\def\textls{}
\begin{document}
  \pagestyle{empty}
  \coverpage{primitives}{Book Design Monographs}{Camel Press}{ON CONTENTS PAGES}{AND THEIR DESIGN} 
 \secondpage
 \newpage
 \frontmatter
 \pagestyle{plain}
 \tableofcontents
 \listoffigures
 \listoftables
 \newpage
%\input{./sections/acknow}
 \mainmatter
 \thispagestyle{plain}
 
 %\input{./sections/paragraphs}
% \input{./sections/geometry-chapter}
 %\input{./sections/floats}
% \input{./sections/macros}
% \input{./sections/luatex-fonts.tex}
% \input{./sections/verse}
% \input{./sections/pagenotes}
% 
% \input{./sections/elgreco}
% 
% \input{./sections/book.cls.tex}
% %\input{./sections/graphics} 
% %\input{./sections/charting01}
% %\input{south-asian-scripts}
% %\input{./sections/captions}
% %\input{./sections/docmacros}
%\input{./sections/tableofcontents}
  % \catcode `\| =12
%  \DeleteShortVerb
  \makeatletter
  \@debugfalse
  \DEBUGOFF
  \makeatother
  \input{./sections/toc-design}
  \input{./sections/tableofcontents}
  \pagestyle{headings}
  \DocInput{phd-toc.dtx}%
\end{document}
%</driver>
% \fi
% \CheckSum{553}
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{1.0}{2015/05/03}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \GetFileInfo{template.dtx}
% \providecommand*{\url}{\texttt}
%  \def\fileversion{v1.0}          
%  \def\filedate{2012/03/06}
% \title{The \textsf{\jobname} package.
% \author{Dr. Yiannis Lazarides}
% \thanks{This
%        file (\texttt{\jobname.dtx}) has version number 
%        \fileversion, last revised
%        \filedate.}
% }
% 
% \date{\filedate}
%
% \newpage
% ^^A\maketitle
% 
% \begin{summary}
%   This package forms part of the \pkgname{phd} bundle and can be used to manage running heads
%   with a key-value interface. It comes with a number of predefined styles, that cover most of the
%  common use cases for books and journals. It is still in alpha stage. However it will not hopefully
%  break anything if used and is compatible with the fancyhdr package.
% \end{summary}
%
%
%
% ^^A\StopEventually{}
%<*TOC> 
% ^^A \part{Package Implementation}
%  \appendix
% \def\chaptername{Appendix}
% \makeatletter\gdef\@chapapp{\appendixname}\makeatother
%\addtocontents{toc}{\protect\contentsline{chapter}{\protect\numberline{}Appendices}{}{}}
% 
% \chapter{Objectives and Design Philosophy}
% 
% ^^A\def\headhookleft{\agrid}
%  
% Before we start with the coding is importnat to outline the  package objectives:
%
% \begin{enumerate}
%  \item To simplify the user interface for specifying  contents pages in \latexe. This
%        is to be implemented as a key value interface.
% \item To make available a number of differently styled contents pages
%       so that the book designer can adjust properties, rather than creating new
%       layouts.
% \item To provide a key value interface to blend with the othes keys provided by
%  the \pkgname{phd}  package.
% \end{enumerate}

% \section{Terminology}
% 
% \begin{description}
%   \item [Table of Contents] A list of all document headings and the page reference.
%   \item [List of Figures] A list with all figures appearing in the document and
%                           the page where they are referenced. 
%   \item [List of Tables] 
%   \item [List of \meta{list name}] Other lists that can be found, such as list
%         of algorithms, listings etc.
%   \item [Element] An element is a particular component of a document that can 
%         be typeset individually, for example the title of a heading, 
%         for example in this section it is \emph{terminology}. This is an 
%         important concept used by the |phd| package following that of |html|. These
%         elements have |properties| which can be set using key value mark-up.
%         
%         The element name can be composed from different words to describe 
%         a particular document element. For example:
%
%         \begin{tabular}{lp{7cm}}
%           \texttt{toc}      & table of contents. This refers to ToC as a to level.\\
%           \texttt{toc name}           & The element name \\
%           \texttt{toc name} \meta{font-size} & The font size used to typeset the toc name.\\
%          \texttt{toc chapter page} \meta{font-size} & This refers to the font size of the page number of a chapter toc entry. \\  
%         \end{tabular} 
% \end{description}
%
% \section{Conventions}
%  The coding follows a strict set of conventions to enable automatic generation
%  of both code and keys.
%
% \paragraph{Key capitalization} All keys are defined using lower case letters. 
% This saves keystrokes and is easier to remember.
% 
% \paragraph{Spacing and hyphens} All element names use a space to divide the 
%       individual words. Property attributes that can be found in |CSS| are
%       written the same way as |css| with a hyphen, hence |font-size| and not
%       |font size|.
%
% \paragraph {Control sequences} We use the expl3 conventions for most of
%       control sequences. Keys stored in control sequences follow strictly
%       the naming convention of the key, but omitting any hyphens and replacing spaces with underscores. For example:
% 
% \begin{quote}
% |toc chapter page font-size = \phd_toc_chapter_page_fontsize|
% \end{quote}
% 
%      I have only used the |_tl| su suffix only where the cs is manipulated. For the rest
% I have followed expl3 conventions regarding suffixes.
%      Macros are prefixed with |phd_| where appropriate.
%
% \chapter{Implementation}
%
%	Most of the macros here are a re-write the LaTeX macros in a way that 
%	we can add appropriate hooks for styling. In writing this section
%	we had inspiration and used liberally code from Peter Wilson's 
%	\pkg{tocloft}., including the code for the image.
%
%    \begin{macrocode}
%
\NeedsTeXFormat{LaTeX2e}[2017/04/15]%
\ProvidesPackage{phd-toc}%
  [2017/04/15 v1.0 ToC styling]%
%    \end{macrocode}

% 
% 
% We will be using either chapter or section type headings for the ToC, etc.,
% so we need to know which of these the document class supports.
%
%    \begin{macrocode}
\ExplSyntaxOn
\newif\if@haschapter@cx\@haschapter@cxtrue
\int_new:N \toc_depth
\int_gset:Nn \toc_depth {\c@tocdepth}
%
\bool_new:N \haschapter_bool \bool_gset_true:N \has_chapter_bool
\bool_new:N \haspart_bool \bool_gset_true:N \haspart_bool
%
\cs_if_exist:cTF {part} 
   { \bool_gset_true:N \haspart_bool   } 
   { \bool_gset_false:N \haspart_bool  }
%   
\ExplSyntaxOff
%    \end{macrocode}
% 
% 
% {if@koma@cx}
% The \pkg{koma} classes have different defaults than the standard classes,
% so we need to know if a \pkg{koma} class has been loaded.
%    \begin{macrocode}
\newif\if@koma@cx  \@koma@cxfalse
\@ifclassloaded{scrartcl}{\@koma@cxtrue}{}
\@ifclassloaded{scrreprt}{\@koma@cxtrue}{}
\@ifclassloaded{scrbook}{\@koma@cxtrue}{}
%    \end{macrocode}
% 
%
% {if@memoir@cx}
%    \begin{macrocode}
\newif\if@memoir@cx  \@memoir@cxfalse
\@ifclassloaded{memoir}{\@memoir@cxtrue}{}
%    \end{macrocode}
% 
%
% Issue a warning if there are no recognised sectional divisions 
% and then skip the rest of the package code.
%    \begin{macrocode}
\@ifundefined{chapter}{%
  \@haschapter@cxfalse
  \@ifundefined{section}{%
    \PackageWarning{phd}%
      {I don't recognize any sectional divisions so I'll do very little 
      and many things can break}
    \renewcommand{\quit@cx}{\endinput}
    }{\PackageInfo{phd}{The document has section divisions}}
  }{\@haschapter@cxtrue
    \PackageInfo{phd}{The document has chapter divisions}}
%    \end{macrocode}
% bailing out or continue.
%
% 
%	We define a user macro and to be used in keys
%   a pagestyle for the first page of the ToC.
%   The default is the |plain| pagestyle. CHECK THIS.
%    \begin{macrocode}
\newcommand{\settocpagestyle}[1]{%
  \def\tocpagestyle@cx{\thispagestyle{empty}}} %CHANGED
 
%    \end{macrocode}
% 
% 
%
% {tocparskip@cx}
% The |\parskip| local to the ToC, etc., is set to the length |\phd_toc_parskip|.
%
%    \begin{macrocode}
\ExplSyntaxOn
%\newlength{\phd_toc_parskip}
\dim_new:N \phd_toc_parskip
\dim_set:Nn \phd_toc_parskip {1pt}
\ExplSyntaxOff
%    \end{macrocode}
% 
%
% \section{General Formatters}
%
% In order to provide maximum flexibility and to re-use code, we provide general
% formatting code. These in general start with the prefix \emph{format}. They take
% as input the basic parameters, required to format. The decoration parameters come
% from the key value interface.
%  
% \begin{docCommand}{format_toc_name:n} { \marg{prefix} }
%   Formats and typesets the conents name, in a ToC. 
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn

\newtcolorbox {float_box} [1]
  { 
    %size            = minimal,  
    enhanced,
    colback         = \cs_if_exist_use:cTF {#1_background_color}{}{white},
    colframe        = \cs_if_exist_use:cTF {#1_frame_color}{}{white},
    rounded~corners = all,
    arc=3mm,
    auto~outer~arc,
    boxsep          = 3pt,
    \cs_if_exist_use:cTF {#1_shadow}{}{no~shadow},
  } 
%    \end{macrocode}  
%
% \begin{docCommand}{phd_font_aux_toc:n}{ \meta{toc\textbar lof\textbar lot}}{ } 
%   This is an auxiliary command useful for setting the font properties. It is used in conjuction with a 
%   pgf key handler to set the properties.
%   TODO PROPER ERROR HANDLING!
% \end{docCommand}
%
%
% The definition follows:
%
%    \begin{macrocode}
\cs_new:Npn \phd_font_aux_toc:n #1
 {
   \cs_if_exist_use:cTF { #1_fontfamily }{}{#1~Family}
   \cs_if_exist_use:cTF { #1_fontweight }{}{#1~W}
   \cs_if_exist_use:cTF { #1_fontshape  }{}{#1~Sh}
   \cs_if_exist_use:cTF { #1_fontsize   }{}{#1~Siz}
 }  
%
%    \end{macrocode}
%  
%  \begin{docCommand}{format_toc_name} { \meta{toc name}}{}
%    Use toc lof lot etc...
%  \end{docCommand}
%
%  The formatter places the contents heading in a box, that we call a float box. 
%    \begin{macrocode}

\cs_gset:Npn \format_toc_name:n #1 
  {
 \begin{float_box}{toc_name}
     % gives duplicate errors
     % \msg_new:nnnn {phd_toc}{missing-key}{Missing~or~unset~key~for~hh#1 frame color}
      %{Set~the~key~}
      %\cs_if_exist:cTF{#1_frame_color}{}{\msg_error:nnn { phd_toc } { missing-key } { #1 }}
      \leavevmode
      \cs_if_exist_use:cTF {#1_align}{}{F~#1}
      
      %\toc_name_indent 
      \tcbox[
             size = minimal,
             boxsep=0pt,
             top=0pt,
             bottom=0pt,
             left=0pt,
             right=0pt,
             nobeforeafter,
             colback         = \cs_if_exist_use:cTF {#1_background_color}{}{thecodebackground},
             colframe        = \cs_if_exist_use:cTF {#1_frame_color}{}
                                         {white},
             ]
        {
            
            \toc_before
            % parameter is either toc, lof, lot
            \phd_font_aux_toc:n {#1}
            % sets the color
            % this originates from color palette
            \color{\cs:w #1_color\cs_end:}
            \hskip-\dimexpr(\@tocrmarg/2)
            \cs_if_exist_use:cTF {#1_case}{}{Case Error}
               {
                \cs_if_exist_use:cTF {#1_name}{}{F~#1}
               }
        }
   \end{float_box} 
   %\tikzrule
   \toc_after%
 }
\ExplSyntaxOff
%    \end{macrocode}
%  \begin{docCommand} {phd_toc_start:} { \meta{void}}
%    Typesets any material before the toc, for example a rule or image. This
%    can also be used to typeset a two column or three column toc.
%  \end{docCommand}
%
%  \begin{docCommand}{phd_toc_finish:} { \meta{void}}
%    Typesets any material after the toc, for example a rule or image. This
%    can also be used to typeset end a two column or three column layout.
%  \end{docCommand} 
%
%    \begin{macrocode}
\let\ltxtableofcontents\tableofcontents
%
\ExplSyntaxOn
\cs_new:Npn \phd_toc_start:  { }
\cs_new:Npn \phd_toc_finish: { } 
\ExplSyntaxOff
%    \end{macrocode} 
% 
% \begin{docCommand}{tableofcontents} {\meta{void}}
%  This is a parameterised version of the default |\tableofcontents| command.
%  Each class has its own definition, but we have to cater for all classes
%  in one definition, hence some of the checks. The definition is
%  modified after all packages have been loaded. The normal LaTeX way is to use
%  the chapter to set it in the book class and the section in others. Here we opted to
% 
%  leave it up to the user.
%	 Consider more checks here
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
 \renewcommand{\tableofcontents}{%
   \phantomsection
   \addcontentsline{toc}{chapter}{Contents}
    \phd_toc_start:
    \group_begin:
   % \hypersetup{linkcolor=spot}
%    \end{macrocode}
% Ensure that any previous paratgraph has been finished. 
%	within a group set
% the local paragraphing style and typeset the title. \label{code:tableofcontents}
%    \begin{macrocode}
    	\par
    	\group_begin:
      	\parindent\z@ 
      	\dim_set_eq:NN \parskip \phd_toc_parskip
      	\phd_make_toc_title:n {toc}
%    \end{macrocode}
%
% Finally, start reading the \docFile{.toc} file and finish up.
%    \begin{macrocode}
    		\start_toc:n {toc}%
    		\group_end:
    \group_end:
    \phd_toc_finish:
}%
\ExplSyntaxOff
%    \end{macrocode}
%
%  \begin{docCommand} {start_toc:n} { \meta {void}}
%    Reads the file |.toc|. Write to the file conditionally. This was
%    originally provided in the source2e class |lsect|, which we redefine.
%  \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
 \cs_new:Npn \start_toc:n #1 
   {
     \group_begin:
     \makeatletter
     \@input{\jobname.#1}%
     \if@filesw
       \expandafter\newwrite\csname tf@#1\endcsname
       \immediate\openout \csname tf@#1\endcsname \jobname.#1\relax
     \fi
     \@nobreakfalse
     \group_end:
  }
\ExplSyntaxOff 
%    \end{macrocode}
% 
% \section{The \textbackslash numberline hooks}
%   While the formatters typeset the label and page number the sectioning numbering is typeset by
%  |\numberline|, so we need to hook into this as well.
%  
% \begin{docCommand} {numberline} { \meta {the number} }
%  The purpose of the \docAuxCommand{numberline}{\meta{secnum}}  command is to typeset
%  \meta{secnum} left justified in a box of width |\@tempdima|. I redefine
%  it to add three additional parameters, namely |\toc_number_before|, 
%  |\toc_number_after| and |\toc_number_after_box| 
%  (see \docFile{ltsect.dtx} for the original definition).
%
% \begin{verbatim}
%   \contentsline {section}
%      {\numberline {4}Language Manager}
%      {10}{section.1.4}
% \end{verbatim} 
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \toc_number_before_box {}
\cs_set:Npn \toc_number_before {\{}
\cs_set:Npn \toc_number_after {\}}
\cs_set:Npn \toc_number_after_box {}
\ExplSyntaxOff
%    \end{macrocode}
%
%
% 
%    \begin{macrocode}  
\ExplSyntaxOn
\dim_new:N \numberlineboxwidth 



\cs_gset:Npn \numberline #1
  {
   \toc_number_before_box
      { 
      \toc_number_before
      \tcbox[size=minimal,
             nobeforeafter,
             colback=yellow!60,
             colupper = thered,
             colframe=red!75!black,
             left=1pt,right=1pt,
             top=2pt,
             bottom=2pt,
             boxrule=0pt,
             bottomrule=1pt,
             toprule=1pt,
             box~align=base,
             width=\numberlineboxwidth + 1.5em]
             {#1}
             \space\toc_number_after 
     }
   \toc_number_after_box
  }
\ExplSyntaxOff
%    \end{macrocode}
% 
% \section{ToC Name Parameters}
%
%  The ToC name keys are intended for styling the top part of the ToC. This is typeset
%  in a tcolorbox as the example below, so we can have full control of the
%  keys of tcolorbox.
%
%  \begin{tcolorbox}[colframe=black,colback=white]
%  \hfill \tcbox[size=minimal,colback=white,
%               nobeforeafter]{\bfseries\LARGE Contents}
%  \end{tcolorbox}
%    \begin{macrocode}
\ExplSyntaxOn
\pgfkeys
 {/handlers/.case/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
         \str_case_x:nnTF {##1}  
             {
               { none       } { \cs_gset:cpn {#1} { \empty             } } 
               { normal     } { \cs_gset:cpn {#1} { \empty             } } 
               { lower      } { \cs_gset:cpn {#1} { \MakeTextLowercase } } 
               { lowercase  } { \cs_gset:cpn {#1} { \MakeTextLowercase } } 
               { upper      } { \cs_gset:cpn {#1} { \MakeTextUppercase } } 
               { uppercase  } { \cs_gset:cpn {#1} { \MakeTextUppercase } } 
               { upper~case } { \cs_gset:cpn {#1} { \MakeTextUppercase } } 
             }
             {                         }
             { \cs_gset:cpn #1 {\MakeTextLowercase} }
      }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \section{Shadows}
% 
% Many components can be rendered with shadows. This can be done through the
% tcolorbox shadowing commands or directly through \tikzname. The way parameters
% are specified in both cases results in multi-argument keys, which is generally
% against the philosophy of the mark-up semantics of the |phd| package. Most
% of these keys required color specification and or size specification.
% 
% Since colors are linked to palettes, I decided that the color part would belong to
% the palette settings rather than the shadow keys. Also any sizing of shadows has been
% delegated to default macros. This simplifies the user interface tremendously. 
% Should a template designer wish to provide a more complicated shadow, this can be
% achieved through the style property of the element.
%
% Shadows are only available when the box rendering engine depend on tcolorbox. 
%
%    \begin{macrocode}  
\tcbset{halostyle/.style={fuzzy halo=2mm with magenta!5}}
\ExplSyntaxOn
 \pgfkeys
 {/handlers/.shadow/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
         \str_case_x:nnTF {##1}  
             {
               { none       }   { \cs_gset:cpn {#1} { {no~shadow}       } } 
               { drop~shadow  } { \cs_gset:cpn {#1} { drop~shadow       } }
               { drop~lifted~shadow  } { \cs_gset:cpn {#1} {{##1         }} } 
               { fuzzy~halo}           { \cs_gset:cpn {#1} {halostyle } }
             }
             {                         }
             { \cs_gset:cpn #1 {##1} }
      }
  } 

 \pgfkeys
 {/handlers/.store/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
         \cs_gset:cpn {#1} {##1}
      }
  }   
\ExplSyntaxOff  
%    \end{macrocode}
%
% Since most of the keys are similar for all the lists I tried to automate the key generation and
% the setting of defaults.
%
% A diiferent aim of the \pkg{phd} is to provide if possible only keys that are accept textual parameters,
% i.e., the user types bfseries rather than |bfseries|. 
%
%  \begin{docCommand}{cs_new_toc_keys:nn } {}
%    ToC, LoF, ToF etc, follow the conventions of the |phd| package in declaring
%    basic elements using prefixes, normally with two names, for example
%    |toc name|\meta{field} defines properties for the name used on top of
%    contents pages.
%  \end{docCommand}
%
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \new_toc_keys #1 #2
{           
\cxset 
  {
    #1~name/.store                                   = #2_name,
    #1~before/.store                                 = #2_before,
    #1~after/.store                             = #2_after,
    #1~numwidth/.store                          = #1_numwidth, 
   %    
    #1~font-size/.fontsize                      = #2_fontsize,
    #1~font-weight/.fontweight                  = #2_fontweight,
    #1~font-family/.fontfamily                  = #2_fontfamily,
    #1~font-shape/.fontstyle                    = #2_fontshape,
%    
    #1~color/.store                             = #2_color,
    #1~background-color/.store                  = #2_background_color,
    #1~frame-color/.store                       = #2_frame_color,
%    
    #1~shadow/.shadow                           = #2_shadow,
%    
    #1~case/.case                               = #2_case,
%    
    #1~afterskip/.store                         = #2_after_skip,
    #1~align/.textalign                         = #2_align,
        
    #1~indent/.store                            = #2_indent,

    #1~page~after/.store                        = #2_page_after,    
    toc~pagestyle/.code                               =
      \gdef\contentspagestyle@cx{\thispagestyle{empty}},%
  }
}
%
\ExplSyntaxOff     
%    \end{macrocode}      
%
% The contents page is enabled to have its own pagestyle. We default this later on
% to plain.
% This needs also a bit of a thought, if we require to enable it further down the line.
%   |toc name = #2|
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \toc_set_key_defaults #1 #2
  {
\cxset{
       #1~name              = #2,
       #1~before            =,
       #1~after             =, 
       #1~numwidth          = 0pt,
       #1~color             = black,
       #1~background-color  = white,
       #1~frame-color       = white,
       #1~shadow            = none,       
       #1~font-weight       = normal,
       #1~font-family       = rmfamily,
       #1~font-shape        = upshape,
       #1~font-size         = Huge,
       #1~afterskip         = 40pt, %set as 40pt in LaTeX
       #1~after             = ,
       #1~align             = center,
       #1~indent            = 0pt,
       #1~case              = none,
       #1~page~after        = A,
       toc~pagestyle        = fancy,
  }%
}  

\new_toc_keys {toc}{toc}
\toc_set_key_defaults {toc}{Table~of~Contents}
% list of figures
\new_toc_keys {lof}{lof}
\toc_set_key_defaults {lof}{List~of~Figures}

% list of tables
\new_toc_keys {lot}{lot}
\toc_set_key_defaults {lot}{List~of~Tables}
\cxset{toc~rmarg/.code = \cs_new:Npn\tocrmarg: {#1}
                                        \global\let\@tocrmarg\tocrmarg:, }
                                        
\ExplSyntaxOff                                        
\cxset{
%</TOC>
%<*TOC|DFLT>
%%
%% toc contents element settings
    toc name               = Table of Contents,
    toc  before            =,
    toc  after             =, 
    toc  numwidth          = 0pt,
    toc  color             = thetocname,
    toc  background-color  = white,
    toc  frame-color       = red,
%    
    toc  shadow            = none,       
    toc  font-weight       = normal,
    toc  font-family       = rmfamily,
    toc  font-shape        = upshape,
    toc  font-size         = Huge,
    toc  afterskip         = 40pt, 
    toc  after             = ,
    toc  align             = left,
    toc  indent            = 0pt,
%    
    toc case               = none,
    toc  page after        = A,
    toc  pagestyle         = headings,
    toc  rmarg             = 4em,
%</TOC|DFLT>
%<*TOC>    
}
%    \end{macrocode}
%
%  Next we create key sets for all three default lists, ToC, LoF and LoT.
%  More can also be created, say for Plates or Illustrations
%
%  Note the second parameter is a csname hence the underscore, we use it to pick up the value from a macro
%  
%
% \begin{docCommand}{phd_make_toc_title:n } { \meta{prefix} }
%	Typesets the heading that goes on top of the Contents page.
%	The prefix is the code prefix i.e, |toc_name| or |lof_name| etc. 
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \phd_make_toc_title:n #1 
{
  \addpenalty\@secpenalty
  \if@haschapter@cx
    \vspace*{10pt}
    \pdfbookmark[0]{\toc_name}{toc}
  \else
    \vspace{10pt}
  \fi
  \markboth{\contentsname}{\contentsname}%
  %\contentspagestyle@cx CHECK THIS
  \interlinepenalty\@M
%    \end{macrocode}
%  Next we call the appropriate renderer.
%    \begin{macrocode}  
  \format_toc_name:n {#1}
%    \end{macrocode}
%    \begin{macrocode}  
    \par\nobreak
    \vskip\toc_after_skip\relax
    \@afterheading
 }
\ExplSyntaxOff 
%    \end{macrocode}
% Next we create some demonstration code to see that is all well.
%    \begin{macrocode}     
\ExplSyntaxOn
  \let\sampletoctitle\phd_make_toc_title:n
\ExplSyntaxOff 
%    \end{macrocode}
% 
% \docAuxCommand{setpnumwidth@cx}
%
% \docAuxCommand{setocmarg@cx}
%
%  Users commands for setting |\@pnumwidth| and |\@tocrmarg|.
%    \begin{macrocode}
%\newcommand{\setpnumwidth@cx}[1]{\renewcommand{\@pnumwidth}{#1}}
%\newcommand{\settocmarg@cx}[1]{\renewcommand{\@tocrmarg}{#1}}
% \setpnumwidth@cx{25pt}
%\ settocmarg@cx{20pt}
%    \end{macrocode}
% 
% 
%
% \section{Styling the dot leaders}
%  Here we will allow the user to either have dotfills and
%  be	able to specify the type and spacing of the dots.
%	We also provide a key to disable dotfills.
%
% \begin{docCommand} {dot@cx} { \meta{void}}
%   Stores the leaders pattern. In the standard classes this
%   is normally a dot.
% \end{docCommand}
%
% \begin{docCommand} {dotfill@cx} { \meta{void}}
%   Typesets the leaders based on the pattern stored in \#1
% \end{docCommand}
%
%   In the default |ToC|, a dotted line can be used to provide a leader between
%   a title and the page number. As Peter Wilson wrote and I found at my
%   distress the definition of the leader is buried
%   in the \cs{@dottedtocline} command. The 
%	\cs{dotfill@cx}\marg{sep}
%   command provides a parameterised version of the leader code, where
%   \marg{sep} is the seperation between the dots in mu units.
%   The symbol used for the `dots' in the leader is given by the 
%   value  of |\dot@cx|. 
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \dot@cx { - }
\cs_gset:Npn \dot_fill  #1 
  {
    \leaders\hbox{$\m@th\mkern #1 mu\hbox{\dot@cx}\mkern #1 mu$}\hfill
  }
\ExplSyntaxOff  
%    \end{macrocode}
% 
% 
%\parskip=1pt plus0.2pt minus0.2pt
%    \begin{macrocode}
\def\nodotfill@cx{}
\cxset{toc dotfill/.is choice,
       toc dotfill/none/.code = \nodotfill@cx,
       toc dotfill symbol/.code= \renewcommand{\dot@cx}{#1},
       toc dotfill sep/.store in=\dotfillsep@cx,
}
\cxset{toc dotfill symbol=.,
       toc dotfill sep=4.5}
%    \end{macrocode}
%
% 
% The |\l@kind| commands modify (locally) the value of |\parfillskip|.
% |\parfillskip@CX| is a copy of the default \texbook\ 
% |\parfillskip| definition.
%    \begin{macrocode}
\ExplSyntaxOn
\newcommand{\parfillskip@CX}
  {
  \parfillskip=0pt plus1fil
  }
\ExplSyntaxOff 
\ExplSyntaxOn
\cs_if_exist:cTF {showvalue}
  { }
  {
    \newcommand\showvalue[2][value] 
    {
   %\if@debug
    \cs_if_exist:cTF {once}{}{
    \tikz[remember~picture,overlay] 
    \draw[<->] (0,0)--(0,.1)--++(-.25,0) node[left,fill=blue!5,text=black]%
       {
         \parbox{2.3cm} 
         {
           {\sffamily
            \tiny #1 #2}
         }
       };%\space%
     }  
   %\fi    
    }
  }
\ExplSyntaxOff   
%    \end{macrocode}
%
% \begin{docCommand}{format_toc_entry:nn} { \meta{number} \meta{label} \meta{page number} }{}{}
%  This is the workhorse command that typesets every entry in a colorbox.
% \end{docCommand}
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \format_toc_entry:nn #1 #2 #3
  {
 \str_if_eq:nnTF{A}{A}{\def\temp{red}}{\def\temp{green}}
 \group_begin:  
   \hypersetup{linkcolor=thelinkcolor,}         %thelinkcolor
   \parindent0pt
%    \end{macrocode}
%
% The standard ToC entry is typeset in |tcolorboxes|. We first set all the parameters to the tightest fit possible.
% 
%    \begin{macrocode}   
\showvalue[]{@tocrmarg = \@tocrmarg\\
             @pnumwidth = \csname #1_numwidth\endcsname \relax \\
             section\\
             indent=\csname toc_section_indent\endcsname\relax\\
             subsection\\
             indent=\csname toc_subsection_indent\endcsname\relax\\
             subsubsection\\
             indent =\csname toc_subsubsection_indent\endcsname\relax\\  
            \gdef\once{}}
              
   \begin{tcolorbox}[
                     colback=white,
                     width=\linewidth,
                     nobeforeafter,
                     boxsep=5pt,
                     bottom=0pt,
                     top=0pt,
                     toprule=0pt,
                     bottomrule=0pt,
                     leftrule=0pt,
                     rightrule=0pt,
                     colframe= black,
                     ignore~nobreak=true,
                     shrink~tight,
                     hbox,
                     ]  
                     \null 
     \expandafter\leftskip \cs:w #1_indent\cs_end:
    
     \dim_set_eq:NN \tex_rightskip:D \@tocrmarg
     \parfillskip -\rightskip
     %\dim_set_eq:NN \parindent {1em} \tocindent
     %\interlinepenalty\@M
    % \leavevmode
    \global\expandafter
       \let\expandafter
         \numberlineboxwidth\csname #1_numwidth\endcsname\relax
    % \let\toc_number_before \cftsecpresnum
    % \advance\leftskip \numberlineboxwidth
     %\null\nobreak
    % \hskip -\leftskip
%    \end{macrocode}
%
% The second tcolorbox will typeset the number and the title. Again we ensure we pass it all the keys for a tight
% fit to avoid spurious spaces. 
%
%    \begin{macrocode}    
     \hskip\csname#1_indent\endcsname\relax
        \begin{tcolorbox}[
         nobeforeafter,
         before=,
         after=,
         shrink~tight,
         width=\linewidth-\expandafter
                  \csname#1_indent\endcsname - \@tocrmarg,
         %before=\hspace{\csname#1_indent\endcsname},
         colback=white,
         colframe=white,
         box~align=base,
         boxsep    = 3pt, 
         top=0pt,
         left~skip=0pt,
         right~skip=0pt,
         %noparskip,
         parbox=true,
         hyphenationfix=true,
         minipage,
         %forces~nobeforeafter,
        ]
        
        \phd_font_aux_toc:n  {#1}
        \expandafter\color{\cs:w #1_color\cs_end:}
        \expandafter\csname #1_number_box_before\endcsname
            %\cs_if_exist_use:cTF {#1_case}{#2}{#2 \relax}
          
        #2
        \expandafter\csname #1_number_box_after\endcsname
        \hfill\hfill\hfill
        %\cs_if_exist_use:cTF {toc_section_leader}{} {}
        
%    \end{macrocode}
% Next we take care of the page box. This is again a box within a 
% box arrangement as in most case we need to float the page numbers to the right.
% Think page 1 and page 999.  
%    \begin{macrocode}   
           
       \begin{tcolorbox}
       [
          %size=minimal,
          nobeforeafter,
          colback=\cs:w #1_page_background_color\cs_end:,
          width=\expandafter\csname #1_numwidth\endcsname + 10pt\relax, %\@tocrmarg
          halign~lower=right, % hs no impact
          box~align = base,
          boxsep    = 0pt, 
          colframe = red,
          bottom = 0pt,
          middle = 0pt,
          arc = 0pt,
          boxrule = 0pt,
          top = 0pt,
          toptitle = 0pt,
          bottomtitle = 0pt,
          outer~arc = 0pt,
       ]
       \hfill\hfill
       \tcbox[
          size=minimal,
          nobeforeafter,
          width=\toc_chapter_number_width,
          colback= \cs:w #1_page_background_color\cs_end:,  %\toc_section_page_background_color,
          box~align = base,
        ]
         {
         \phd_font_aux_toc:n  {#1_page}
         
         \expandafter\csname #1_page_before\endcsname
             {#3}
         \expandafter\csname #1_page_after\endcsname 
             
         }
       \end{tcolorbox} 
       \par 
     \end{tcolorbox}   
     \par \parskip1pt
    \end{tcolorbox} 
    \par  
    \group_end:
     \@afterindentfalse
     \nobreak
 }
  \ExplSyntaxOff
%    \end{macrocode}
%
% \section{Key generation for toc levels}
%
%     \begin{macrocode}
\ExplSyntaxOn 
\cs_new:Npn \make_new_toc_entry_keys #1 #2
{
 \cxset
  {
    #1~beforeskip/.store            = #2_beforeskip,
    #1~afterskip/.store             = #2_afterskip,    
    #1~indent/.store                = #2_indent,
    #1~numwidth/.store              = #2_numwidth,
% number box related 
    #1~number~box~before/.store      = #2_number_box_before, 
    #1~number~box~after/.store       = #2_number_box_after,   
% fonts 
    #1~font-size/.fontsize          = #2_fontsize, 
    #1~font-family/.fontfamily      = #2_fontfamily, 
    #1~font-shape/.fontstyle        = #2_fontshape, 
    #1~font-weight/.fontweight      = #2_fontweight, 
    #1~color/.store                 = #2_color,
    #1~number width/.store          = #2_number_width,
    #1~case/.case                   = #2_case,
    #1~page~font-size/.fontsize     = #2_page_fontsize,
    #1~page~font-family/.fontfamily = #2_page_fontfamily,
    #1~page~font-shape/.fontstyle   = #2_page_fontshape,
    #1~page~font-weight/.fontweight = #2_page_fontweight,
    #1~page~color/.store            = #2_page_color,
    #1~page~background-color/.store = #2_page_background_color,    
%   leaders template only
    #1~dotsep/.store                = #2_dotsep,
%   before and after page number
    #1~page~before/.store           = #2_page_before,
    #1~page~after/.store            = #2_page_after,
  }
}
%    \end{macrocode}
%
% Next we provide a function that sets keys to preset defaults. This makes
% it less cumbersome to modify later.
%
%    \begin{macrocode}
\cs_new:Npn \make_new_toc_entry_key_defaults #1 
  {
    \cxset
    {%
      #1~beforeskip         =\z@ \@plus.2\p@,
      #1~afterskip         = 1pt,      
      #1~indent            = 0em,
      #1~numwidth          = 0em,
      #1~number~box~before =,
      #1~number~box~after  =,
      #1~font-family       = sffamily,
      #1~font-weight       = normal,
      #1~font-shape        = upshape,
      #1~color             = black,
      #1~case              = none,
      #1~font-size         = normal,
      #1~numwidth          = 3em,    %this has to be handled auto
      #1~dotsep            = 2.7,
%    \end{macrocode}
%
% The page number is a child of the |<toc><element>| and is provided to
% as page, it has both box as well as textual properties. Settings
% are what I thought were typical of documents.
%
%    \begin{macrocode}      
%page parameters      
      #1~page~font-size          = normal,
      #1~page~font-shape         = upshape,  
      #1~page~font-weight        =,  
      #1~page~font-family        = sffamily,
      #1~page~color              = black, 
      #1~page~background-color   = white,       
      #1~page~before             =,
      #1~page~after              =,
    }
  }
\ExplSyntaxOff  
%    \end{macrocode} 
% 
% \subsection{Styling Part in the Toc}
%  |\l@part{|\meta{title}|}{|\meta{page}|}| typesets the ToC entry for
% a |part| heading. It is a parameterised copy of the default |\l@part|
% (see \docFile{classes.dtx} for the original definition and the code
%  below for |\l@part| for an explanation of most of this
%  code). 
%
% By default, Parts
% (and Chapters) do not have dotted leaders. This package provides
% for all entries to have the ability to have dotted leaders, as some styles treat the part in a similar manner.
%
% In article class, Part level is 0 not -1 and hence the conditional below.
%	
%	We start by defining a number of keys and macros to store parameters.
%	An entry to the ToC consists always of a number, the title and 
%	a page number. For each part there are different styling keys.
%
%	{tocpartindent@cx}	 
%    \begin{macrocode}
\ExplSyntaxOn
\make_new_toc_entry_keys {toc~part}{toc_part}  
\make_new_toc_entry_key_defaults {toc~part}
\ExplSyntaxOff
\cxset{%
%</TOC>
%<*TOC|DFLT>
%% TOC part keys 
    toc part font-size       = LARGE,
    toc part color            =  black,
    toc part beforeskip    =  1em,
    toc part page before  =, 
    toc part indent          =  0pt,
    toc part numwidth    = 1.5em,
%</TOC|DFLT>       
%<*TOC>
       }
%    \end{macrocode}
%
%
% \begin{docCommand} {l@part} { \meta{title} \meta{pagenumber} }
% We now renew the command, in order to allow for hooks. 
% This might be cloberred by hyperref if too many changes
% are carried out. It takes two parameters (one for the caption and another for the title if different).
% \end{docCommand}
%
% We need first to define conditionals to switch from
% printing the part or not.
%
%  We allow for any document type to have parts, as long as the control sequence |\part|
%  is defined.
%  The part |toc_level = -1|
%    \begin{macrocode}
\ExplSyntaxOn
\newif\if@dopart@cx
\newif\if@haspart@cx
  \@ifundefined{part}{\@haspart@cxfalse}{\@haspart@cxtrue}
\if@haspart@cx
%    \end{macrocode}
% I am not too sure about the need of all the penalties, but will review
% this part of the code before the final distribution.
%
%    \begin{macrocode}
\cs_gset:Npn \l@part #1 #2
  {
    \bool_if:NT \haspart_bool
      {
        \bool_if:NTF \has_chapter_bool 
          {
            %\addpenalty{-\@highpenalty}
          }
          { 
            %\addpenalty\@secpenalty 
          }
          \addvspace{\toc_part_beforeskip}%
          \format_toc_entry:nn {toc_part} {#1} {#2}
           \nobreak
           \bool_if:NT \has_chapter_bool
             {
               %\global\@nobreaktrue
               %\tex_everypar:D { \global\@nobreakfalse\tex_everypar:D {} }%
 	           }
           %\group_end:
    }
   % \format_toc_entry:nn {toc_part} {#1} {#2}
  } %end l@part

\ExplSyntaxOff
%    \end{macrocode}
%  These are the user commands to control the typesetting of Part entries.
%  They are initialised to give the standard appearance.
%    \begin{macrocode}
\ExplSyntaxOn
  \newcommand{\partpresnum@cx}{}
  \newcommand{\partaftersnum@cx}{..}
  \def\cftnodots{2.7}
  \newcommand{\partdotsep@cx}{\cftnodots}
  \newcommand{\toc_part_leader}{\large\bfseries\dot_fill{\partdotsep@cx}}
\ExplSyntaxOff       
%    \end{macrocode}
%
% \section{Handling of chapters in ToC.}
%
%  These are the user commands to control the typesetting of Chapter entries.
%  They are initialised to give the standard appearance.
%    \begin{macrocode}
%\if@haschapter@cx
  \newlength{\beforetocchapterskip@cx}
  \setlength{\beforetocchapterskip@cx}{1.0em \@plus\p@}
  \newlength{\cftchapindent}
  \setlength{\cftchapindent}{0em}
  \newlength{\cftchapnumwidth}\setlength{\cftchapnumwidth}{1.5em}
  \newcommand{\cftchapfont}{\bfseries}
  \newcommand{\cftchappresnum}{}
  \newcommand{\cftchapaftersnum}{}
  \newcommand{\cftchapaftersnumb}{}
  \newcommand{\cftchapleader}{\dot_fill{\cftchapdotsep}}
%    \end{macrocode}
%
%	The following code determines the spacing of the dots.
%    \begin{macrocode}
  \newcommand{\cftchapdotsep}{\toc_chapter_dot_sep} 
  \newcommand{\cftchappagefont}{\sffamily\bfseries\color{teal}}
  \newcommand{\cftchapafterpnum}{}
%
%    \end{macrocode}
%
% \subsection{l@chapter}
%
% \begin{docCommand} {l@chapter} { }
%  \cs{l@chapter}\marg{title}\marg{page} typesets the ToC entry for
% a |chapter| heading. It is a parameterised copy of the default \docAuxCommand{l@chapter}
%  (see \docFile{classes.dtx} for the original definition). This only applies
%  to chaptered documents.
% \end{docCommand}
%
%  We now generate the necessary keys and set defaults. We will override them as needed
%  later on.
%    \begin{macrocode}
\ExplSyntaxOn
  \make_new_toc_entry_keys {toc~chapter}{toc_chapter}  
  \make_new_toc_entry_key_defaults {toc~chapter}
\ExplSyntaxOff
%    \end{macrocode}
% \subsection{Set toc chapter label defaults}
%  We next set some reasonable chapter formatting key defaults.
%    \begin{macrocode}
\cxset {%
%</TOC>
%<*TOC|DFLT>
    % table of contents defaults
    % toc chapter keys
    toc chapter font-size   = LARGE,
    toc chapter font-family = rmfamily,
    toc chapter font-weight = normal,
    % the toc chapter color thetocchapter
    % is fetched from the palette define
    % your own color in the palette rather than
    % change this here
    toc chapter color       = thetocchapter,
    toc chapter beforeskip  =1em,
    toc chapter afterskip   = 1em plus0.2pt minus .2pt,
    toc chapter case        = upper,
    toc chapter numwidth    = 1.5em,
    %  TOC chapter page formatting 
    toc chapter page font-size        = LARGE,
    toc chapter page font-shape       = upshape,  
    toc chapter page font-weight      = normal,  
    toc chapter page font-family      = rmfamily,
    toc chapter page color            = black, 
    toc chapter page background-color = yellow!10,       
    toc chapter page before           =,
    toc chapter page after            =,
%</TOC|DFLT>    
%<*TOC>
}
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
  \cs_new:Npn \toc_chapter_leader 
    {
       \normalfont
       \dot_fill{\toc_section_dotsep}
    }
\ExplSyntaxOff
%    \end{macrocode}  
%    \begin{macrocode}  
\ExplSyntaxOn
  \renewcommand*{\l@chapter}[2]{
     \cs_set:Npn \toc_number_before {[}
    \cs_set:Npn \toc_number_after {]}
     \ifnum \c@tocdepth >\m@ne
       \addpenalty{-\@highpenalty}
       \skip_vertical:N \toc_chapter_beforeskip
        {
         \format_toc_entry:nn {toc_chapter}{#1}{#2}
        }
       \skip_vertical:N \toc_chapter_afterskip 
    \fi
   
 }%
\ExplSyntaxOff 
%    \end{macrocode}
%
% We define a macro for mocking sample toc chapters for the documentation
% 
% \begin{docCommand} {sampletocchapter} {\meta{void}}
%   Typesets  a sample based on \docAuxCommand{l@chapter}{}{}
% \end{docCommand}
%    \begin{macrocode}
\let\sampletocchapter\l@chapter
%    \end{macrocode}
% 
%
% \section{ToC section styling}
%  Create the \docValue{toc section} keys and set defaults.
%     \begin{macrocode}
\ExplSyntaxOn 
  \make_new_toc_entry_keys {toc~section}{toc_section}  
  \make_new_toc_entry_key_defaults {toc~section}
\ExplSyntaxOff
%    \end{macrocode}
% Override some of the defaults.
%    \begin{macrocode}
\cxset{
%</TOC>
%<*TOC|DFLT>
      %TOC section
      % indentation
       toc section indent=1.5em,
       toc section numwidth= 2.3em,
      % page number fonts
       toc  section page font-size          = Large,
       toc  section page font-shape         = itshape,  
       toc  section page font-weight        = normal,  
       toc  section page font-family        = rmfamily,
       % page number colors
       toc  section page color                 = bgsexy, 
       toc  section page background-color   = theblue!10, 
       % page number before after elements      
       toc  section page before             =,
       toc  section page after              =,
       toc section page after = ,
       toc section page before =,
%</TOC|DFLT>
%<*TOC>       
}
%    \end{macrocode}
%
% \begin{docCommand} {l@section} { \meta{title} } { page number }
% 	 This macro is called when the \cs{tableofcontents}
%	 is read from the |.toc| file and it typesets
%	 the title and the page number. It is called in a |csname| by |\contentsline|
% 
%    \#1 section title\\
%    \#2 page number\\
%    \#3 added by Hyperref
%      
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \l@section #1 #2
  {
   \cs_set:Npn \toc_number_before {\{}
   \cs_set:Npn \toc_number_after {\}}
  \ifnum \c@tocdepth >\z@
    \if@haschapter@cx
      \skip_vertical:n \toc_section_beforeskip
    \else
      \addpenalty \@secpenalty
      \addvspace{\toc_section_beforeskip}%
    \fi
    \format_toc_entry:nn {toc_section} {#1} {#2}
  \fi
 
  }
\ExplSyntaxOff  
%    \end{macrocode}
% 
%
%  These are the user commands to control the typesetting 
%	 of Section entries.
%    They are initialised to give the standard appearance.
%	 These are hooks to \cs{numberline}.
%    \begin{macrocode}
\ExplSyntaxOn
\newcommand{\cftsecpresnum}{}
\newcommand{\cftsecaftersnum}{}
\newcommand{\cftsecaftersnumb}{}
%
%
\newcommand{\toc_section_leader}  {\normalfont\dot_fill{\toc_section_dotsep}}
\ExplSyntaxOff
%    \end{macrocode}
%
%
% \section{Toc subsection styling}
%
% 
%  \refCom{l@subsection} typesets the ToC entry for
% a |subsection| heading. It is similar to  \refCom{l@section}
% (see \docFile{classes.dtx} for the original definition). 
% 	We start by defining all our parameters and variables.
%
%    \begin{macrocode}
\ExplSyntaxOn
\make_new_toc_entry_keys {toc~subsection}{toc_subsection}  
\make_new_toc_entry_key_defaults {toc~subsection}
\ExplSyntaxOff 
\cxset{%
%</TOC>
%<*TOC|DFLT>
%%
%% subsection defaults
    toc subsection indent           = 3.8em,
    toc subsection numwidth      = 3.2em,
    toc subsection page before   = ,
    toc subsection page after     = ,
%%  
%</TOC|DFLT>  
%<*TOC>
}
%    \end{macrocode}
% Settings
%
% \begin{docCommand}{l@subsection} { \meta{title} \meta{page number} }
%  Similar to \refCom{l@section} function.
% \end{docCommand}
%
%    \begin{macrocode}        
\ExplSyntaxOn
\cs_gset:Npn \l@subsection #1 #2 
  {%
   \cs_set:Npn \toc_number_before {}
   \cs_set:Npn \toc_number_after {}
    \ifnum \c@tocdepth >\z@
      \if@haschapter@cx
        \skip_vertical:N \toc_subsection_beforeskip
      \else
        \addpenalty \@secpenalty
        \addvspace{\toc_subsection_beforeskip}%
    \fi
      \format_toc_entry:nn {toc_subsection} {#1} {#2}
  \fi

}
 \ExplSyntaxOff 
%    \end{macrocode}
% 
%

%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \toc_subsection_leader 
  {
  \normalfont\dot_fill{\toc_subsection_dot_sep}
  }
\ExplSyntaxOff    
%    \end{macrocode}
%
% \section{Toc subsubsection styling}
%  Next the toc subsubsection properties. 
%    \begin{macrocode}
\ExplSyntaxOn
\make_new_toc_entry_keys {toc~subsubsection}{toc_subsubsection}  
\make_new_toc_entry_key_defaults {toc~subsubsection}
\ExplSyntaxOff
\cxset{toc subsubsection indent = 7.0em,
       toc subsubsection numwidth= 4.1em,
}
%
%    \end{macrocode}
%
%    For convenience we define font setting commands for
%    the page number. We use \cs{setfont@cx}, which we have
%	defined earlier. Note this might be clobbered if 
%  hyperref is to provide a page link.
%    
%    \begin{macrocode}
\newcommand\tocsubsubsectionpagefont@cx{%
	\setfont@cx{\toc_subsubsection_page_fontweight}%
       {\toc_subsubsection_page_fontfamily}{\toc_subsubsection_page_font_size}%
       {\toc_subsubsection_page_fontshape}\color{\toc_subsubsection_page_color}
}%
%    \end{macrocode}
%
% \begin{docCommand} {l@subsubsection} { \meta{title} \meta{page number}} 
%  typesets the ToC entry for
% a |subsubsection| heading. It is a parameterised copy of the default |@subsubsection|
%	We start by defining all our parameters and variables.
% \end{docCommand} 
%       
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \l@subsubsection #1 #2
{%
  \ifnum \c@tocdepth >\z@
    \if@haschapter@cx
      \vskip \toc_subsubsection_beforeskip
    \else
      \addpenalty \@secpenalty
      \addvspace{\toc_subsubsection_beforeskip}%
    \fi
%    {\leftskip \toc_subsection_indent\relax
%     \rightskip \@tocrmarg
%     \parfillskip -\rightskip
%     \parindent \toc_subsection_indent\relax\@afterindenttrue
%     \interlinepenalty\@M
%     \leavevmode
%     \@tempdima \tocsubsubsectionnumwidth@cx\relax
%     \let\toc_number_before \cftsecpresnum
%     \let\toc_number_after \cftsecaftersnum
%     \let\toc_number_after_box \cftsecaftersnumb
%     \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip

    \format_toc_entry:nn {toc_subsubsection} {#1} {#2}
  \fi
}
\ExplSyntaxOff
%    \end{macrocode}
%
% 
%    \begin{macrocode}
\ExplSyntaxOn
 \cs_new:Npn \toc_subsubsection_leader 
   {
     \normalfont\dot_fill{\toc_subsubsection_dot_sep}
   }
\ExplSyntaxOff
%\newcommand{\cftsecdotsep}{\cftdotsep}
%    \end{macrocode}
%
% \section{Toc paragraph styling}
%
% 
% Similarly to the higher headings \refCom{l@subsubsection} typesets the ToC entry for
% a \emph{paragraph} heading.	We start by defining  parameters and variables.
%
%    \begin{macrocode}
\ExplSyntaxOn
\make_new_toc_entry_keys {toc~paragraph}{toc_paragraph}  
\make_new_toc_entry_key_defaults {toc~paragraph}

\ExplSyntaxOff
%    \end{macrocode}
% We set default values.
%    For convenience we define font setting commands for
%    the page number. We use \cs{setfont@cx}, which we have
%	defined earlier.
%    
% \begin{docCommand} {l@paragraph} { \meta{title} \meta{page number}}
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn    
\renewcommand*{\l@paragraph}[2]{%
  \ifnum \c@tocdepth >\z@
    \bool_if:NTF \has_chapter_bool
      {
        \skip_vertical:N \toc_paragraph_beforeskip
      }
      {
        \addpenalty \@secpenalty
        \addvspace{\toc_paragraph_beforeskip}%
      }
     \format_toc_entry:nn {toc_paragraph} {#1} {#2}
  \fi
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
% \paragraph{A Test Paragraph} Just to show a test paragraph. \lorem
%
%    \begin{macrocode}
\ExplSyntaxOn
\newcommand{\toc_paragraph_leader}{\normalfont\dot_fill{\tocparagraphdotsep@cx}}
\ExplSyntaxOff
%\newcommand{\cftsecdotsep}{\cftdotsep}
%    \end{macrocode}
%
% \section{Toc subparagraph styling}
%
% \tcbdocmarginnote{U 20-6-2015}
% 
% Similarly to the higher headings \refCom{l@subsubsection} typesets the ToC entry for
% a \emph{subparagraph} heading.	
%
%    \begin{macrocode}
\ExplSyntaxOn
  \make_new_toc_entry_keys {toc~subparagraph}{toc_subparagraph}  
  \make_new_toc_entry_key_defaults {toc~subparagraph}
\ExplSyntaxOff 
%    \end{macrocode}
% Next we set the keys

% \begin{docCommand} {l@subparagraph} { \meta{title} \meta{page number}}
% \end{docCommand}
%
% ^^A\paragraph{Testing paragraph}
% ^^A\subparagraph{Testing subparagraph}
%
%    \begin{macrocode} 
\ExplSyntaxOn   
\renewcommand*{\l@subparagraph}[2]{%
  \ifnum \c@tocdepth >\z@
    \if@haschapter@cx
      \vskip \toc_subparagraph_beforeskip
    \else
      \addpenalty \@secpenalty
      \addvspace{\toc_subparagraph_beforeskip}%
    \fi
    \format_toc_entry:nn {toc_subparagraph} {#1} {#2}
  \fi
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \toc_subparagraph_leader
  {
    \normalfont\dot_fill {\toc_subparagraph_dotsep}
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% This brings us, dear reader to a long and arduous 
% path. Surely there must be an easier way. we have 
% added parameters in all sectioning commands, down to 
% paragraph level and we can even lower if you want
% for the legal guys and for construction specs. But
% we also need to do the other lists, list of figure
% and list of tables and maybe others.
%
% \chapter{List of Figures}
% 

% The standard list of figures follows the same patterns
% for the ToC. We need to redefine the standard macros
% with adequate hooks for parameters. The parameters are
% simpler than the ToC, as we do not have to care
% about different heading levels.\tcbdocmarginnote{U 30-06-2015}
%
% \begin{docCommand}{format_lof_name:n} { \marg{name} }
%   Formats and typesets the contents name part, in a LoF. 
% \end{docCommand}
%
% \begin{docCommand}{listoffigures} { \meta{void} }
%  Start by redefining the list of figures.
%  This will call its own function to format the heading
%  of the LoF and then either write to the file or read a
%  a file using \refCom{start_toc:n}
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\renewcommand\listoffigures{%
    \if@twocolumn
      \@restonecoltrue\onecolumn
    \else
      \@restonecolfalse
    \fi
% This is common with the toc 
    \newpage 
    \phd_make_toc_title:n {lof}  
    %\begin{multicols*}{2}
    
     \@mkboth{\MakeUppercase\listfigurename}%
              {\MakeUppercase\listfigurename}%
    \start_toc:n {lof}%
    \if@restonecol
      \twocolumn
    \fi
    %\end{multicols*}
    }
\ExplSyntaxOff  
%    \end{macrocode}

% 
% \subsection{Keys for LoF}
% Next we define all the properties we need to add for the LoF heading. In
% the standard classes it just uses |\chapter*|, but many books have a totally
% different style for this.
% 
%    \begin{macrocode}
\cxset{
%</TOC>
%<*TOC|DFLT>
    % List of Figures
    lof name              = List of Figures,
    lof before            =,
    lof after             =, 
    lof numwidth          = 0pt,
    lof color             = thelofname,
    lof background-color  = white,
    lof frame-color       = white,
    lof shadow            = none,       
    lof font-weight       = normal,
    lof font-family       = rmfamily,
    lof font-shape        = upshape,
    lof font-size         = Huge,
    lof afterskip         = 40pt, 
    lof after             = ,
    lof align             = left,
    lof indent            = 0pt,
    lof case              = none,
    lof page after        = ,
%</TOC|DFLT>
%<*TOC>    
}
%    \end{macrocode}    
%
%    \begin{macrocode}    
\ExplSyntaxOn
\cs_new:Npn \phd_lof_start: {}
\cs_new:Npn \phd_lof_end: {}
\cs_new:Npn \make_lof_title
  {
    %\clearpage moved to listoffigure
    %\phd_lof_start:
    \format_toc_name:n {lof}%
    \gdef\listfigurename{Illustrations}
    \@mkboth{\MakeUppercase\listfigurename}%
            {\MakeUppercase\listfigurename}%
    %\phd_lof_end:         
  }        
\ExplSyntaxOff    
%    \end{macrocode}    
%
% The |l@figure| is a much simpler operation and it only
% needs to adjust a much smaller set of parameters. The \emph{entry}
% refers to the whole block of a LoF entry. The \emph{page} only
% at the page number of the entry. 
% 

%    \begin{macrocode}
\ExplSyntaxOn 
\make_new_toc_entry_keys {lof~entry}{lof_entry}  
\make_new_toc_entry_key_defaults {lof~entry}
\ExplSyntaxOff
%    \end{macrocode}
% 
% \begin{docCommand}{l@figure} { \marg{number and title} } { \marg {page number} }
%  As for the other lists the |l@figure| has been defined in one of the classes.
%  We re-write it to add parameters. As the style can vary considerably from book
%  to book we also introduce special formatters.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\renewcommand*{\l@figure}[2]
  {\cs_set:Npn \toc_number_before {}
   \cs_set:Npn \toc_number_after {}
    \vskip \lof_entry_beforeskip
    {
      %\@dottedtocline{1}{1.5em}{2.3em} 
      \format_toc_entry:nn {lof_entry} {#1} {#2}
    }
 }
\ExplSyntaxOff  
%    \end{macrocode}
%
% \chapter{List of Tables}
%
% The standard list of tables is similar to that of the
% for the LoF. As a matter of fact in the book class they are
% let to equal. We need to redefine the standard macros
% with adequate hooks for parameters. The parameters are
% simpler than the ToC, as we do not have to care
% about different heading levels.
%
%
% \begin{docCommand}{listoftables} { \meta{void} }
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\make_new_toc_entry_keys {lot~entry}{lot_entry}  
\make_new_toc_entry_key_defaults {lot~entry}
%
%
\renewcommand\listoftables 
  {
    \if@twocolumn
      \@restonecoltrue\onecolumn
    \else
      \@restonecolfalse
    \fi
    \newpage
    \phd_make_toc_title:n {lot}
    \start_toc:n {lot}%
    \if@restonecol
      \twocolumn
    \fi
   }
\ExplSyntaxOff
    
%    \end{macrocode}
% 
% \section{Keys for Lists of Tables}

% Next we define all the properties we need to add for the LoF heading. In
% the standard classes it just uses |\chapter*|, but many books have a totally
% different style for this.
% 
%    \begin{macrocode}    
\ExplSyntaxOn
\def\phd_lot_start{}
\def\phd_lot_end {}
    
\ExplSyntaxOff    
%    \end{macrocode}    
%
% The |l@figure| is a much simpler operation and it only
% needs to adjust a much smaller set of parameters. The \emph{entry}
% refers to the whole block of a LoF entry. The \emph{page} only
% at the page number of the entry. 
% 
% 
% \begin{docCommand} {l@table} { \marg{number} \marg{title}  \marg {page number} }
%  As for the other lists the |l@figure| has been defined in one of the classes.
%  We re-write it to add parameters. As the style can vary considerably from book
%  to book we also introduce special formatters.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\renewcommand*{\l@table}[2]
 {
   \vskip \lot_entry_beforeskip
   {
   \format_toc_entry:nn {lot_entry} {#1} {#2}
   }
  }

\ExplSyntaxOff  
%    \end{macrocode}
% \begin{table}
% \caption{This is the first table}
% \end{table}
%
% \begin{table}
% \caption{This is the second table}
% \end{table}
%
% 
% 
%
% \section[Very long]{This is a very long heading to see.This is a very long heading to see.This is a very long heading to see.This is a very long heading to see.This is a very long heading to see.This is a very long heading to see.This is a very long heading to see. }
%
% \meaning\numberline
% \def\tst#1{\tcbox[nobeforeafter,box align=base,size=minimal]{#1}}
%\contentsline {section}{\numberline {1\relax .1\relax }\tst{Introduction} }{1}{section.1.1}
%\contentsline {section}{\numberline {1\relax .2\relax } \tst{Key values for Chapters}}{1}{section.1.2}
%
%
%\makeatletter
%\hyper@linkstart{link}{section.1.2}{12}\hyper@linkend
%\makeatother
  
% \section{Issues and Road Map}  
%
% \begin{enumerate}
% \item Provide custom styles, in the same fashion like the rest of the \pkg{phd}. Custom will just load a custom formatter.
% \item Provide a better section on usage with some better examples.
% \item Provide better error messages.
% \item Check integration with phd-colormanager.
% \item Automate the number and pagewidth dimensions for more flexibility
% \end{enumerate}

%</TOC>      
\endinput       
 %    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \format_toc_chapter_leaders:nn #1 #2
  {
   \leftskip\toc_chapter_indent\relax
   \rightskip \@tocrmarg
   \parfillskip -\rightskip
   \parindent \toc_chapter_indent\relax%
   \@afterindenttrue
   \interlinepenalty\@M
   \leavevmode
   \begin{tcolorbox}[colback=spot!30,arc=3mm,colframe=white]
   \numberlineboxwidth\toc_chapter_number_width\relax
        %\let\toc_number_before \cftchappresnum
        %\let\toc_number_after \cftchapaftersnum
        %\let\toc_number_after_box \cftchapaftersnumb
    \advance\leftskip\numberlineboxwidth
    \null\nobreak\hskip -\leftskip
    {
      \tocchapterfont@cx 
      \exp_after:wN \cs:w toc_chapter_case \cs_end:
      {#1}
    }
    {\lotleader}\nobreak 
     \toc_chapter_page_before\makebox[\toc_chapter_page_number_width][r]
    {
        \exp_after:wN \cs:w \exp_after:wN \lot_page_font_size \cs_end:
        \exp_after:wN \cs:w \exp_after:wN \lot_page_fontweight \cs_end: 
        \exp_after:wN \cs:w \exp_after:wN \lot_page_fontfamily \cs_end:
        \exp_after:wN \cs:w \exp_after:wN \lot_page_fontshape \cs_end:
       \hss#2
    }\toc_chapter_page_after
   \end{tcolorbox}
          
  }          
\ExplSyntaxOff  
%    \end{macrocode}       
%
\newcommand{\lof_entry_leader}{\normalfont\dot_fill{\lof_entry_dotsep}}

%\cs_new:Npn \format_lof_entry_leaders_type #1 #2 
%  {
%   \leftskip \lof_indent\relax
%   \rightskip \lof_rmargin
%   \parfillskip -\rightskip
%   \parindent \lof_indent\relax\@afterindenttrue
%   \interlinepenalty\@M
%   \leavevmode
%    % set parameters for number
%    \numberlineboxwidth \lof_number_width\relax
%    % set numberline hooks if any
%    \advance\leftskip \numberlineboxwidth \null\nobreak\hskip -\leftskip
%    #1 
%    {\lofleader}\nobreak
%    % set hooks for page??
%     \lof_page_before\makebox[\lof_page_number_width][r]
%      {
%        \phd_font_aux_toc:n {lof_page}
%       \hss#2
%      }\lof_page_after
%     
%    \par
%  }            
%
% TODO EVERYTHING WITH TCOLORBOX 
\cs_new:Npn \format_lot_entry_leaders_type #1 #2 
  {
   \leftskip \lot_indent\relax
   \rightskip \lot_rmargin
   \parfillskip -\rightskip
   \parindent \lot_indent\relax\@afterindenttrue
   \interlinepenalty\@M
   \leavevmode
    % set parameters for number
    \numberlineboxwidth \lot_number_width\relax
    % set numberline hooks if any
    \advance\leftskip \numberlineboxwidth
     \null\nobreak\hskip -\leftskip
    #1 
    {\lotleader}\nobreak
    % set hooks for page??
     \lot_page_before\makebox[\lot_page_number_width][r]
      {
        \exp_after:wN \cs:w \exp_after:wN \lot_page_font_size \cs_end:
        \exp_after:wN \cs:w \exp_after:wN \lot_page_fontweight \cs_end: 
        \exp_after:wN \cs:w \exp_after:wN \lot_page_fontfamily \cs_end:
        \exp_after:wN \cs:w \exp_after:wN \lot_page_fontshape \cs_end:
       \hss#2
      }\lot_page_after
     
    \par
  }  
\endinput