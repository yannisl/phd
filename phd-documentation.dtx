% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd-documentation - version 1.0 (2018-10-26)
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt

This work has the LPPL maintenance status `author-maintained'

This work consists of all files listed in README.md
%</readme>
%<*readmemd>
###The `phd-documentation` LaTeX2e package

The `phd` latex package and the class with the same name provide
convenient methods to create new styles for books, reports
and articles. It also loads the most commonly used packages 
and resolves conflicts.

This work consists of the file  `phd-documentation.dtx`,
and the derived files   `phd-documentation.ins`,  `phd-documentation.pdf`, 
and `phd-documentation.sty`.

###Installation

run
           phd-lua.bat on windows
           pdflatex phd.dtx
           makeindex -s gind.ist -g phd 

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com

### Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use one command:

      \cxset{chapter name font-size = Huge,
             chapter number font-size = HUGE} 

### Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs. At present I estimate
that I have completed about 70% of the work that needs
to be done.

__The package as it stands is not production stable.__ 


%</readmemd>
%
%<*TODO>
1.  Split package into three diffferent parts. One for listings settings. Use def, docCommands and
    indexing commands. Indexing commands remove symbols defs into sybpackage.
2.  Finish symbol management, both text and math. Math already 80% incorporated.
%</TODO>
%<*internal>
\fi
\def \nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input l3docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phd --- A package to beautify documents.
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble
%\BaseDirectory{C:/users/admin/my documents/github/phd}
%\usedir{MWE}
\generate{\file{\jobname.sty}{%
  \from{\jobname.dtx}{DOCUM}%
   }%
  }%
  
\generate{\file{colorize.sty}{%
  \from{\jobname.dtx}{colorize}%
   }%
} 
\generate{%
  \file{\jobname-defaults.def}{%
  \from{phd-fontmanager.dtx}{DFLT}%
  \from{phd-colorpalette.dtx}{DFLT}% 
  \from{phd-lowersections.dtx}{DFLT}%
  \from{phd-toc.dtx}{DFLT}%
  \from{\jobname.dtx}{DFLT}}%
}%
%\nopreamble\nopostamble
%</install>
%<install>\endbatchfile
%<*internal>
%\usedir{tex/latex/phd}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\generate{
	\file{README.txt}{\from{\jobname.dtx}{readme}}
  }
\generate{
  \file{\jobname.md}{\from{\jobname.dtx}{readmemd}}
}
\generate{
  \file{\jobname-todo.md}{\from{\jobname.dtx}{TODO}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*driver>
%\listfiles
%
\NeedsTeXFormat{LaTeX2e}[2017/04/15]
\documentclass[book,oneside,10pt,a4paper,
               microtype=off,colorize]{phddoc}
\let\textls\textit               
%\usepackage[left=3cm,bottom=2cm]{geometry}
%\savegeometry{std}
% \usepackage[style=mla]{biblatex}
\usepackage{phd-scriptsmanager}
\usepackage{phd-lowersections}
%\usepackage{phd-toc}
\sethyperref
% add bib resource
\addbibresource{phd1.bib}% Syntax f
%\usepackage{phd-toc}
\makeindex
\PageIndex
\EnableCrossrefs
\RecordChanges
\MacroIndent=0pt
\urlstyle{rm}
\usepackage[cache=false]{minted} 
\usemintedstyle[latex]{borland}  
\setminted[html]{fontsize=\footnotesize,style=friendly}
%\newfontfamily\lineara{Aegean.ttf}
%\newfontfamily\cypriote{Aegean.ttf}
\input{phd-documentation-defaults.def}
\cxset{chapter format=hang,
       section format=hang}
\cxset{palette oprah,
       subsection afterindent=off}
%\usepackage{hypdoc}
\let\solution\undefined
%\usepackage{fancyvrb-ex}
\usepackage{tasks}
\usepackage{exsheets}
\usepackage{exsheets-listings}
\usepackage{xcoffins}
\usepgfmodule{parser}

\let\marg\Arg
\usepackage{silence}
\DontCheckModules
% silences bad boxes. We have a lot of these.
\hbadness=10002
\begin{document}
\DEBUGOFF
\overfullrule0pt
\parindent1em
\coverpage{monkey}{Book Design Monographs}{Camel Press}{INDEXING}{AND DOCUMENTATION} 
\pagestyle{empty}

\secondpage
\pagestyle{empty}
\clearpage

\tableofcontents

\pagestyle{empty}
\setcounter{secnumdepth}{6}
\parskip0pt plus.1ex minus.1ex
\mainmatter
\pagenumbering{arabic}
\pagestyle{headings} 
%\input{./sections/verbatim}
%%\end{document}
%\input{./l3sections/latex3-basic}
%%\input{./l3sections/l3counters}
%\input{./l3sections/l3tlists}
%\input{./l3sections/l3seq}
%\input{./l3sections/l3regs}
%\input{./sections/io}
%\input{./l3sections/l3files}
%\input{./l3sections/l3prop}
%%\input{./sections/boxesandglue}
%\input{./l3sections/l3box}
%\input{./sections/expandafter}
%\input{./l3sections/l3expansion}
%\input{./sections/futurelet}
%\input{./sections/datastructures}
%\input{./sections/keyvalues}
%\input{./sections/classes}
\
% Input the main descriptions and guide
%\input{./sections/classes}
%\input{./lua/pattern-matching}
%\input{./lua/lpeg}
%\input{./sections/symbols}
%\input{./sections/docmacros}       

%\input{./styles/style01}
%\input{./styles/style02}
%\input{./styles/style03}
%\input{./styles/style04}
%\input{./styles/style05}
%\cxset{chapter format=block}
%\input{./sections/chapterdesign}
%\input{./sections/lowerlevelheadings}

%\input{./sections/indices}
%\input{./sections/unicodemath}
%\input{./sections/hyperlinks}
%\EnableDocumentation
\DocInput{\jobname.dtx}
%\EnableImplementation
%\DocInputAgain{\jobname.dtx}
%\IndexInput{phddoc.sty}
%\nocite{*}
%\printbibliography

\PrintIndex 
 %
% 
\def\contentsname{Contents}
\end{document}
%</driver>
% \fi
%
% \DoNotIndex{\@,\@@par,\@beginparpenalty,\@empty}
% \DoNotIndex{\@flushglue,\@gobble,\@input}
% \DoNotIndex{\@makefnmark,\@makeother,\@maketitle}
% \DoNotIndex{\@namedef,\@ne,\@spaces,\@tempa}
% \DoNotIndex{\@tempb,\@tempswafalse,\@tempswatrue}
% \DoNotIndex{\@thanks,\@thefnmark,\@topnum}
% \DoNotIndex{\@@,\@elt,\@forloop,\@fortmp,\@gtempa,\@totalleftmargin}
% \DoNotIndex{\",\/,\@ifundefined,\@nil,\@verbatim,\@vobeyspaces}
% \DoNotIndex{\|,\~,\ ,\active,\advance,\aftergroup,\begingroup,\bgroup}
% \DoNotIndex{\mathcal,\csname,\def,\documentstyle,\dospecials,\edef}
% \DoNotIndex{\egroup}
% \DoNotIndex{\else,\endcsname,\endgroup,\endinput,\endtrivlist}
% \DoNotIndex{\expandafter,\fi,\fnsymbol,\futurelet,\gdef,\global}
% \DoNotIndex{\hbox,\hss,\if,\if@inlabel,\if@tempswa,\if@twocolumn}
% \DoNotIndex{\ifcase}
% \DoNotIndex{\ifcat,\iffalse,\ifx,\ignorespaces,\index,\input,\item}
% \DoNotIndex{\jobname,\kern,\leavevmode,\leftskip,\let,\llap,\lower}
% \DoNotIndex{\m@ne,\next,\newpage,\nobreak,\noexpand,\nonfrenchspacing}
% \DoNotIndex{\obeylines,\or,\protect,\raggedleft,\rightskip,\rm,\sc}
% \DoNotIndex{\setbox,\setcounter,\small,\space,\string,\strut}
% \DoNotIndex{\strutbox}
% \DoNotIndex{\thefootnote,\thispagestyle,\topmargin,\trivlist,\tt}
% \DoNotIndex{\twocolumn,\typeout,\vss,\vtop,\xdef,\z@}
% \DoNotIndex{\,,\@bsphack,\@esphack,\@noligs,\@vobeyspaces,\@xverbatim}
% \DoNotIndex{\`,\catcode,\end,\escapechar,\frenchspacing,\glossary}
% \DoNotIndex{\hangindent,\hfil,\hfill,\hskip,\hspace,\ht,\it,\langle}
% \DoNotIndex{\leaders,\long,\makelabel,\marginpar,\markboth,\mathcode}
% \DoNotIndex{\mathsurround,\mbox,\newcount,\newdimen,\newskip}
% \DoNotIndex{\nopagebreak}
% \DoNotIndex{\parfillskip,\parindent,\parskip,\penalty,\raise,\rangle}
% \DoNotIndex{\section,\setlength,\TeX,\topsep,\underline,\unskip,\verb}
% \DoNotIndex{\vskip,\vspace,\widetilde,\\,\%,\@date,\@defpar}
% \DoNotIndex{\[,\{,\},\]}
% \DoNotIndex{\count@,\ifnum,\loop,\today,\uppercase,\uccode}
% \DoNotIndex{\baselineskip,\begin,\tw@}
% \DoNotIndex{\a,\b,\c,\d,\e,\f,\g,\h,\i,\j,\k,\l,\m,\n,\o,\p,\q}
% \DoNotIndex{\r,\s,\t,\u,\v,\w,\x,\y,\z,\A,\B,\C,\D,\E,\F,\G,\H}
% \DoNotIndex{\I,\J,\K,\L,\M,\N,\O,\P,\Q,\R,\S,\T,\U,\V,\W,\X,\Y,\Z}
% \DoNotIndex{\1,\2,\3,\4,\5,\6,\7,\8,\9,\0}
% \DoNotIndex{\!,\#,\$,\&,\',\(,\),\+,\.,\:,\;,\<,\=,\>,\?,\_}
% \DoNotIndex{\discretionary,\immediate,\makeatletter,\makeatother}
% \DoNotIndex{\meaning,\newenvironment,\par,\relax,\renewenvironment}
% \DoNotIndex{\repeat,\scriptsize,\selectfont,\the,\undefined}
% \DoNotIndex{\arabic,\do,\makeindex,\null,\number,\show,\write,\@ehc}
% \DoNotIndex{\@author,\@ehc,\@ifstar,\@sanitize,\@title,\everypar}
% \DoNotIndex{\if@minipage,\if@restonecol,\ifeof,\ifmmode}
% \DoNotIndex{\lccode,\newtoks,\onecolumn,\openin,\p@,\SelfDocumenting}
% \DoNotIndex{\settowidth,\@resetonecoltrue,\@resetonecolfalse,\bf}
% \DoNotIndex{\clearpage,\closein,\lowercase,\@inlabelfalse}
% \DoNotIndex{\selectfont,\mathcode,\newmathalphabet,\rmdefault}
% \DoNotIndex{\bfdefault}
%
%  \CheckSum{0}
%  \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \changes{1.0}{2013/01/26}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
% \GetFileInfo{phd.dtx}
% 
%  \def\fileversion{v1.0}          
%  \def \filedate{2012/03/06}
% \title{The \textsf{phd} package.
% \thanks{This
%        file (\texttt{phd.dtx}) has version number \fileversion, last revised
%        \filedate.}
% }
% \author{Dr. Yiannis Lazarides \\ \url{yannislaz@gmail.com}}
% \date{\filedate}
%
%
% 
% ^^A\maketitle
% 
% ^^A\frontmatter
%  ^^A\coverpage{./images/hine02.jpg}{Book Design }{Camel Press}{}{}
%  \newpage
% ^^A\secondpage
% \pagestyle{empty}
%
%
% 
%
%
% \pagestyle{headings}
% \raggedbottom
%  \OnlyDescription
%  
% ^^A\StopEventually{\PrintIndex}
%
% \CodelineNumbered
% \pagestyle{headings}
% 
% 
% ^^A\part{IMPLEMENTATION AND FRIENDS}
% 
% \long\def\storyi{
%The package provides macros for documenting and indexing
%primarily \latexe or \latex3 code. It combines the styles
%originitating with \texttt{doc} with those found in the \texttt{pgf}
%series of packages. It removes some of the difficulties of
%using hyperlinks in the index and elsewhere in the document.
%}
% \chapter{phd{-}documentation Package, Code Implementation Objectives and Strategy}
% \parindent1em
% \epigraph{
% ``Lord Campbell [John Campbell, 1st Baron Campbell, 1779-1861] proposed that any author who published a book without an index should be deprived of the benefits of the Copyright Act; and the Hon. Horace Binney, LL.D. [1780-1875], a distinguished American lawyer, held the same views, and would have condemned the culprit to the same punishment.''}
%{-- H[enry] B[enjamin] Wheatley, How To Make An Index
%(New York: A. C. Armstrong \& Son, 1902), 82}
%
% This package aims at providing authors with a set of tools and settings
% that can improve the typesetting of documentation and especially indices.
% 
% For the normal author there are both mark-up related macros, as well as a set
% of settings for indices.
%
% My main motivation for developing this package was to group all the special
% documentation macros that I have used in developing the \pkg{phd} package. I also saw
% the need to hook up these settings with the concept of color palettes as 
% described in the \pkg{phd-colorpalette} package. This enables the integration
% of full document templates.
%
% \section{Requirements Specification}
% \begin{enumerate}
% \item To provide a declarative interface to enable users to modify documentation
%       and index  entries by setting keys, rather than writing macros.  It is suggested
%       that the author has a single style sheet that he loads to decorate a full
%       document such as an article or a book or a document that describes code.
% \item Setting of parameters will generally be with one command |\cxset|
% \item Provide a consistent `look and feel' for all code displays, irrespective of
%       the package used, i.e., if \pkg{minted}, \pkg{listings} or \pkg{doc} is used
%       the look and feel should be the same, as far as it is possible.  
% \item Provide a set of environments and commands for documenting symbols and fonts.
% \item Seamless integration with  doc type classes. As a minimal to support |ltxdoc| and 
%          \docClass{phddoc}. The latter is provided as part of the |phd| budle.
% \item To provide a number of templates that cover most of the typical use case.
% \item To provide an easy  plug-in architecture for extensions.
% \item Provide a detailed user manual.
% \item Provide special indexing for doc
% \begin{docCommand}{stok}{\oarg{number}\marg{char}}
% From egreg's italian latex guide
% |\stok| takes a |\<char>| argument and prints it with its
% category code or the number given as optional argument
% \example |\stok{a} or \stok{:} | \stok{a} or \stok{:}.
% \end{docCommand}
% \end{enumerate}
% 
% The development of this package predates |tcolorbox| and |minted|. As they are
%  both excellent packages, I have abandoned some of my code and incorporated
% code from |tcolorbox| extensively. 
%
% \section{Terminology}
%
%  \begin{description}
%  \item [document] Any written item, as a book, article, or letter, especially 
%                  of a factual or informative nature.
%  \item [heading] A division of a document or document series. For a normal
%        book headings are chapters, sections etc. However we allow for
%        specifying a more complex document divided into books, volumes
%        parts etc. For example the Bible has Books, chapters and verses,
%        where a legal document might require divisions such as clauses.
%        In general these divisions are numbered. These document divisions
%        are stored in the comma list |phd_book_divisions_clist|.
%  \item [head] A typeset heading, such as chapter head, or section head.
%        This can include a counter, label and title for example, 
%        \emph{Chapter 1 Introduction}.
%  \item [dom] This is a programming interface that provides a structured
%        representation of the document (a tree) and it defines a way
%        that the structure can be accessed. Although \latexe does not
%        offer a standard way to build such a tree (mainly because
%        \tex does not require the marking of paragraphs, it is 
%        useful to think of the document as a tree structure. We also
%        allow for a semi-automated way to build such a tree (with the 
%        exception that paragraphs are not included).
% \item [element] A part of the document tree that can be styled on
%       its own. For example the chapter label, or the section number.
%
% \end{description}
%
% \section{Users}
%  We classify users according to the \LaTeX3 terminology as a) programmers b) template designers
%  and c) authors.
% \subsection{Author}
%  We assume that the author has an exising template which she is using but might want to do
%  some minor modifications, for example use an italic shape for the font of the mark, but an 
%  upright font for the page numbers. 
%
%
% We follow the idea of representing the basic elements of documents
% as elements, each one having a parent in order to specify
% the element we need to style as accurate as possible. One can think of
% this approach being congruent with objects in other languages.
% As a matter fact nothing stops us from defining a key value
% interface as shown below.
%
% {\obeylines 
%~~ |\cxset|
%~~~~~|{| 
%~~~~~~~~\textit{header.even.mark.font.size}   = |Large,|
%~~~~~~~~\textit{header.even.mark.font.family} = |serif,|
%~~~~~|}|
%}  
%
% This would pehaps make it easier for the template designer, but I have rejected
% the idea as my aim is to make it easy for the author, who can search the template
% and just enter a couple of new proerty values.
%
% \subsection{Template designer}
% \pagestyle{headings}
% The template designer in the example above would have selected the format style
% from a number of predefined formats (templates) or would have created a style
% called \textit{apa} from an existing template and modified it using declarative
% key style.
%
% \subsection{The programmer}
%
% The programmer in the example above could have created the basic format
% \textit{apa} by using both declarative as well as defining or using existing
% macros. To the programmer we offer an extension mechanism, where the contents
% of a |ps@| command are defined. For example the programmer can define a new
% style using \tikzname, but without having to worry about defining full |ps@|
% and their interface.
%
% \begin{docCommand}{stok}{\oarg{number}\marg{char}}
% From egreg's italian latex guide
% |\stok| takes a |\<char>| argument and prints it with its
% category code or the number given as optional argument
% \example |\stok[a]| \stok{a} or \stok[12]{t}.
% \end{docCommand}
%
% \section{Acknowledgements}
%
% This package couldn't have been possible if it was not for the documentation
% section of tcolorbox. I have liberally taken ideas and code from Dr. Thomas F. Sturm's 
% package, which in turn draws strongly from the |PGF| manual. I am grateful to both.
% 
% \iffalse
%<*DOCUM>
% \fi
% 
%
% \section{Preliminaries}
%
% We declare that we use \latexe and name the package. The code has been
% moved to the latest version of \latexe to take advantage of more allocations.
% Package works well with LuaLaTeX.\tcbdocmarginnote{7/8/2017}
%
%    \begin{macrocode}
%<@@=>
%    \end{macrocode}
%    \begin{macrocode}
\wlog{************************************************}
\wlog{ BEGIN PHD-DOCUMENTATION                          }
\wlog{************************************************}
\NeedsTeXFormat{LaTeX2e}[2017/04/15]%
\ProvidesPackage{phd-documentation}[2017/04/15 v1.0 less preamble (YL)]%
%    \end{macrocode}
% \begin{docCommand}{MakePrivateLetters}{}
%   The \pkg{doc} provides the user with a command to define which characters
%   can be treated as letters when scanning the contents of a |macrocode| environment.
%   Since we are using l3 macros as well we redefine it as:
% \end{docCommand}
%    \begin{macrocode} 
\DeclareDocumentCommand\MakePrivateLetters{}%
  {\catcode`\@11\relax \catcode`_11 \catcode`:11}
%    \end{macrocode}
%    \begin{macrocode}
\ExplSyntaxOn
\definecolor{thecodelinecolor}{HTML}{140F15}
%\definecolor{thecodelinecolor}{HTML}{420943}
\tl_replace_once:Nnn {\theCodelineNo}
  {\HDorg@theCodelineNo}
  {{\color{thecodelinecolor}\ttfamily\scriptsize\arabic{CodelineNo}}}
\ExplSyntaxOff 
%    \end{macrocode}
%
% We also need the \pkg{refcount}. 
%
% \section{tcolorbox}
%
% We load \pkg{tcolorbox} with options theorems, skins, documentation etc
% for internal and external use.
%
% We also provide an interface, between the \pkg{tcolorbox} documentation
% keys and our own.
% 
% The indexing keys are still to be sorted out with other sections of the
% documentation, but they seem to be working for the moment.
% 
% \section{Verbatim fonts}
% 
% There are different requirements for verbatim fonts. The module \pkg{phd-fontmanager}
% is our main module for defining fonts.
% The main mono font is set using the key \docAuxKey[phd]{main mono font-face}. This is
% stored in \docAuxCommand{main_mono_fontface_tl}. In this document it is set as:
% \ExplSyntaxOn
% \meaning \main_mono_fontface_tl
% \ExplSyntaxOff
%
%    \begin{macrocode}
\newcommand*{\verbatimfont}{\ttfamily}%
\let\displayverbfont\ttfamily
% defined in verbatim package
\renewcommand*{\verbatim@font}{\verbatimfont}
%    \end{macrocode}
%
% The \pkg{tcolorbox} loads the packages \pkg{pgf}, \pkg{verbatim}, \pkg{environ}, \pkg{etoolbox} when the package is loaded. It also loads more when other
% libraries are loaded.
%    \begin{macrocode}
% Loaded after in pkg manager
% Someone is loading marvosym here and this gives problems
\let\oldherm\Hermaphrodite
\let\Hermaphrodite\undefined

\RequirePackage{tcolorbox}[2018/07/26] %version 4.14 latest
\tcbuselibrary{documentation,listings,skins,xparse,external,breakable,theorems}
\tcbset{index format=doc,
        index actual={=},
        index level = {>},
        index quote = {!},
        index german settings,
        color hyperlink = thelinkcolor,
        color definition =thelinkcolor,
        index command= \index,
                   }
\tcbset{halostyle/.style={fuzzy halo=2mm with magenta!5}}                   
%    \end{macrocode}
% We use the |docCommand| as \refCmd{DescribeMacro} when in doc, hence we better mark it
% as a \refCmd{SpecialMainIndex}.
%
%    
% \begin{macro}{\l_phdd_label_prefix_tl}
%    \begin{macrocode}
\ExplSyntaxOn
\def\l_phdd_label_prefix_tl {com:}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\renewenvironment{docCommand}[3][]{\tcbset{#1}%
  \begin{tcb@manual@entry}%
  \begin{tcb@doc@head}{doc@head@command}%
  % Print the command using the current style
  \tcb@Print@Com{#2}
  %{\verbatimfamily\bfseries\textbackslash\color{themacrocolor}\tl_to_str:n{#2}}
  \SpecialMainIndex{#2}% 
  \protected@edef\@currentlabel{\noexpand\tcb@cs{#2}}\label{com:#2}{\ttfamily #3}%
  \tcb@doc@do@description%
  \end{tcb@doc@head}\nobreak\tcbset{before~upper=}\kvtcb@doc@body@command@before\ignorespaces}%
  {\ifvmode\else\unskip\fi\kvtcb@doc@body@command@after\end{tcb@manual@entry}}


%\renewenvironment{docCommand*}{\bgroup\tcb@doc@toindexfalse\begin{docCommand}}{\end{docCommand}\egroup}    
\ExplSyntaxOff
%\def\tcb@Print@Com#1{\textcolor{\kvtcb@col@command}{\ttbf\char`\\ \detokenize{#1}}}

%    \end{macrocode}
%
% \section{Keys dealing with colors}
%
% The actual color definitions should come from a palette, using \pkg{phd-colorpalette}.
% They have names such as \docColor{themacrocolor}.
%
% The color names are stored in token lists. The module colorizer, colors code
% in a macrocode environment and has similar keys.
%  
%    \begin{macrocode}  
\ExplSyntaxOn
\cxset{ 
    color~command/.store~in        = \phdd_key_color_command_tl,
    color~environment/.store~in    = \phdd_key_color_environment_tl,
    color~key/.store~in            = \phdd_key_color_tl,
    color~value/.store~in          = \phdd_key_color_value_tl,
    color~color/.store~in          = \phdd_key_color_color_tl,
    color~definition/.style        = {color~command={#1},
                                      color~environment={#1},
                                      color~key={#1},
                                      color~value={#1},
                                      color~color={#1}},
    color~option/.store~in         = \phdkv@col@opt,
    color~hyperlink/.store~in      = \phdkv@colhyper,
    color~frame/.store~in          = \phdkv@colhyper,
    color~meta/.store~in           = \pkdkv@colmeta,
%    
    before~example/.store~in       = \phdkv@beforeexample,
    after~example/.store~in        = \phdkv@afterexample,
}
\ExplSyntaxOff
%    \end{macrocode}
%    \begin{macrocode}
%</DOCUM>
%<*DOCUM|DFLT>
%<DOCUM>\cxset {
   color command     = themacrocolor,
   color environment = theenvironment,
   color key         = thekey,
   color value       = thevalue,
   color color       = black,%leaks to index
   color option      = theoption,
   color meta        = themeta,
   color frame       = theframe, 
%<DOCUM> }
%</DOCUM|DFLT>
%<*DOCUM>
%    \end{macrocode}
%

% \begin{docCommand}{docAuxCommand}{\Arg{command name}}
% The \docAuxCommand{docAuxCommand} is used to typeset and index an inline command. The
% star version will just typeset the command. If we are using the \docClass{phddoc} or the \docClass{ltxdoc} we have to add the |encapchar hyperpage| otherwise the links do not appear
% in the index. 
% \end{docCommand}
% \begin{macro}{\phdd_index_typeset_bool}
% A boolean to indicate if a variable is to be indexed or not. Used for commands.
%    \begin{macrocode}
\ExplSyntaxOn
\bool_new:N \phdd_index_typeset_bool
\bool_gset_true:N \phdd_typeset_bool
%    \end{macrocode}    
% \end{macro}
%
%    \begin{macrocode}
\cs_new:Npn \phdd_typeset_command #1 
  {
    \group_begin:
    \color{\phdd_key_color_command_tl}
    \cs[no-index]{#1}
    \group_end:
  }

\cs_set:Npn \phdd_typeset_index_command #1
  { 
    \bool_if:NT \phdd_index_typeset_bool
      {
        \kvtcb@index@command
          {
            #1\idx@actual{\tcbIndexPrintComC{#1}}
            \encapchar hyperpage
          }
      }
    \phdd_typeset_command {#1}  
  }
  
%\DeclareDocumentCommand\docAuxCommand { s m }
%  {
%    \phdd_typeset_index_command {#2}
%    \IfBooleanTF{#1}{}{\tcb@index@Com{#2}}
%  }
%\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand}{docColor} {\Arg{color name}} 
%   Typesets a color name and also adds it onto the index. This is identical
%   with tcolorbox, which we overwrite.
% \end{docCommand}
%
% \example The \docColor{thecs} is the color used for commands.
% \begin{macro}{\phdindexprintcolc,\phdd_print_col, \phdd_doc_color_aux:n,
%               \phdd_doc_color_star:n}
%    \begin{macrocode}
\ExplSyntaxOn
\newrobustcmd{\phdindexprintcolc}[1]
  {
    \phd_index_print_c{#1}{\phdd_key_color_color_tl}
  }

\cs_set:Npn \phd_print_col #1 
  {
    \textcolor{\phdd_key_color_color_tl}{\ttfamily\bfseries#1}
  }
  
\cs_set:Npn \@@_doc_color_aux:n #1
  {
    \phd_print_col {#1}
    \phd_index_col {#1}
  }
  
\cs_set:Npn \@@_doc_color_star:n #1
  {
    \phd_print_col{#1}
  }

\DeclareDocumentCommand {\docColor} { s m }
  {
    \IfBooleanTF {#1} 
      { \@@_doc_color_star:n {#2} }
      { \@@_doc_color_aux:n {#2} }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}         
%
% \begin{docCommand}{docValue}{\marg{value}}
% Typesets a value \docValue{asdf}.
% \end{docCommand}
%
% \begin{macro}{phd_index_val,\docValue@,\docValue@star}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \phd_index_val #1  
  {
    \ifphd@doc@toindex
      \index
      {
        #1\idx@actual
        \phdindexprintvalca{#1}
      }
      \index
        {
          \phdkv@text@values
          \idx@level #1
          \idx@actual
          \phdIndexPrintValC{#1}
        }
    \fi
  }


\cs_set:Npn \docValue@ #1 {\phd@Print@Val{#1}\phd_index_val{#1}}%
\cs_set:Npn \docValue@star #1 {\phd@Print@Val{#1}}%

\DeclareDocumentCommand \docValue { s m } 
  {
    \IfBooleanTF {#1}
      { \docValue@star {#2} }
      { \docValue@ {#2} }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
%     \begin{macrocode}
\cxset {doc command color/.code = \tcbset{color command = #1}}
\cxset {doc command color= thecmdcolor}
%
%    
\lstdefinelanguage{extras}{morekeywords={%
      poemtitle, poemtoc, versewidth, 
      vin, poemlines,poemtitlefont, 
      ProvidesClass,IfFileExists,
      RequirePackage,ifthenelse,chapter,
      includegraphics, newarray,readarray,of
}}
\lstloadlanguages{[LaTeX]TeX, [primitive]TeX, extras}
%    \end{macrocode}
%

% Note the |gobble=1| option. We use this to make the colorboxes
% with code not to show the `\%` sign in this documentation.
% Ideally you should fork the code below and adapt it to 
% your own needs.
%
% Also note that this is the default that is to be used in
% \pkg{tcolorbox} commands.
% 
% \begin{docEnvironment}[doclang/environment content=text]{scriptexample}{\oarg{options}}
% Display box for examples of various languages and scripts.
%    \begin{macrocode}
\newtcolorbox{scriptexample}[2][]{colback=thecodebackground,
boxrule=0pt,toprule=0pt,colframe=white,#1}
%    \end{macrocode}
% \end{docEnvironment}
%
%
%    \begin{macrocode}
\newtcolorbox{commands}[2][]{colback=thecodebackground,
boxrule=0pt,toprule=0pt,colframe=white}
%    \end{macrocode}
%
% Set the \pkg{listings} defaults for TeX and LaTeX. All colours are harmonized with the definitions
% od the color palette, as set in the \pkg{phd-colorpalette}.
%    \begin{macrocode}
\lstset{language={[LaTeX]TeX},
       escapeinside={{(*@}{@*)}}, 
       numbers=left, 
       gobble=0,
       stepnumber=1,
       numbersep=5pt, 
       numberstyle={\footnotesize\color{thegray}},
       breaklines=false,
       framesep=5pt,
       basicstyle=\small\ttfamily,
       showstringspaces=false,
       stringstyle={\color{orange}\footnotesize},
       commentstyle=\color{black},
       rulecolor=\color{theshade},
       breakatwhitespace=true,
       showspaces=false, 
       xleftmargin=10pt,
       xrightmargin=0pt,
       aboveskip=3pt plus1pt minus1pt, 
       belowskip=7pt plus1pt minus1pt,  
       backgroundcolor=\color{theshade},
}
%    \end{macrocode}
% 
% We predefine some listings styles to use with color palettes. First we define three styles for TeX and LaTeX, as well
% as three environements.\docAuxListingsStyle{simple}
% \footnotechanges{v1.01}{2019/01/26}{ Made lines to line up with codeline.}
%    \begin{macrocode}
\def\footnotechanges#1#2#3{\footnote{#1#2#3}}
\lstdefinestyle{simple}{%
       escapeinside={{(*@}{@*)}}, 
       numbers=left, 
       gobble=0,
       stepnumber=1,
       numbersep=5pt, 
       firstnumber=last,
       numberstyle={\ttfamily\scriptsize\color{thecodelinecolor}},
       breaklines=true,
       % we do not use frames
       framesep=0pt,
       framexleftmargin=0pt,
       basicstyle=\small\ttfamily,
       showstringspaces=true,
       stringstyle={\color{thestringstyle}\footnotesize},
       commentstyle=\color{thecommentstyle},
       rulecolor=\color{theshade},
       breakatwhitespace=true,
       prebreak={\Righttorque},
       postbreak={\space\Lefttorque},
       showspaces=false, 
       xleftmargin=1.5pt,
       xrightmargin=0pt,
       aboveskip=3pt plus1pt minus1pt, 
       belowskip=3pt plus1pt minus1pt,  
       backgroundcolor=\color{white},
       showlines=false,
       gobble=0,
       resetmargins,
}

\lstdefinestyle{singleline}{%
       escapeinside={{(*@}{@*)}}, 
       numbers=left, 
       gobble=0,
       stepnumber=1,
       numbersep=5pt, 
       numberstyle={\footnotesize\color{thecodelinecolor}},
       breaklines=false,
       framesep=0pt,
       framexleftmargin=0pt,
       basicstyle=\ttfamily,
       showstringspaces=false,
       stringstyle={\color{thestringstyle}\footnotesize},
       commentstyle=\color{thecommentstyle},
       rulecolor=\color{theshade},
       breakatwhitespace=true,
       prebreak={\Righttorque},
       postbreak={\space\Lefttorque},
       showspaces=false, 
       xleftmargin=-10pt,
       xrightmargin=0pt,
       aboveskip=3pt plus1pt minus1pt, 
       belowskip=3pt plus1pt minus1pt,  
       backgroundcolor=\color{white},
       showlines=false,
       numbers=none,
       resetmargins,
}


% prints the style
\def\phd@print@LstStyle#1{%
  \textcolor{\kvtcb@col@counter}{\tcb@doc@bfseries\tcb@scantokens{#1}}
}

\DeclareDocumentCommand\docAuxListingsStyle{s m}{%
  \phd@print@LstStyle{#2}%
  \IfBooleanTF{#1}{}{%
  %\index{\phd@text@lststyles\idx@level#2}
  \SpecialPackageIndex[\phd@text@lststyles]{#2}
  }%
}
%    \end{macrocode}
%
%	An example of |\docAuxListingsStyle|   \docAuxListingsStyle{simplex}.
%	
% 	The environment |\begin{TeX}..\end{TeX}| provides a listings environment
% 	for typesetting, either TeX or LaTeX code.
% 	This environment always starts the number
%    \begin{macrocode}
\lstnewenvironment{teX}[1][]
  {\lstset{language=[LaTeX]TeX}\lstset{%
      style=simple,#1
}}
{}
%    \end{macrocode}
% \begin{docEnvironment}{sverbatim}{\oarg{options}}
% A listings environment for single line verbatim typesetting. It uses the single line listings style.\docAuxListingsStyle{singleline}. It typesets with smaller values  for |aboveskip| and |belowskip|.
%    \begin{macrocode}
\lstnewenvironment{sverbatim}[1][]
  {\lstset{language=[LaTeX]TeX}\lstset{%
      style=singleline,#1
}}
{}
%    \end{macrocode}
% \end{docEnvironment}
%
% The \docAuxListingsStyle{extended} is similar to the rest, except it is numbered continuouly.
%    \begin{macrocode}
\lstdefinestyle{extended}{%
      breaklines=true,
      framesep=5pt,
      basicstyle=\verbatimfamily,
      showstringspaces=false,
      keywordstyle=\small\verbatimfamily,
      stringstyle=\color{thestringstyle},
      commentstyle=\color{thecommentstyle},
      rulecolor=\color{gray!10},
      breakatwhitespace=true,
      xleftmargin=10pt,
      xrightmargin=0pt,
      aboveskip=\medskipamount,
      belowskip=\medskipamount,
      backgroundcolor=\color{thecodebackground}, 
}
%    \end{macrocode}
% \begin{docEnvironment}[doclang/environment content=code]{teXX}{\oarg{listings options}}
%   Different listings environment.
% 
%    \begin{macrocode}
\lstnewenvironment{teXX}[1][]
  {\lstset{language=[LaTeX]TeX}\lstset{%
      style=extended, #1
}}
{}
%    \end{macrocode}
% \end{docEnvironment}
%
%
% \begin{docCommand}{continuelinenumber}{}
%   Continues code numbers from previous block
% \end{docCommand} 
%    \begin{macrocode}
\newcommand\continuelinenumber{\lstset{firstnumber=last}}
%    \end{macrocode}
% {startnumberat} 
%  The macro \cs{continueLineNumber}, provides a command
%  to start the next block of code with the code numbers continuing.
%  This requires the |listings| which is already included.
%  
% \begin{docCommand}{startlineat}{\meta{line number}}
%    Starts a listings display with \meta{line number}.
% \end{docCommand}
%    \begin{macrocode}
% Always I forget this so I created some aliases
\DeclareDocumentCommand{\startlineat}{ m }{\lstset{firstnumber=#1}}
%    \end{macrocode}
%
% \begin{docCommand}{numberlineat}{\meta{line number}}
%  An alias for \docAuxCommand{startlineat}.
% \end{docCommand}
%    \begin{macrocode}
\let\numberlineat\startlineat
\let\startnumberat\numberlineat
%    \end{macrocode}
% 
% 
%
%    \begin{macrocode}
\newcommand\emphasis[2][black!80]{%
   \lstset{%
     emph={write, writeln,#2},
     escapeinside={(*@}{@*)},
     emphstyle={\verbatimfont%
                \bfseries%
                \textcolor{#1}%
                },
   }%
}
%    \end{macrocode}
% \begin{docEnvironment}{teXXX}{\oarg{options}}
% Environment for typestting long tracks of code with full highlighting of keywords, uses the \docAuxListingsStyle{highlite} style.
% \end{docEnvironment}
%    \begin{macrocode}
\lstdefinestyle{highlite}{%
      alsolanguage=makeindex,
      alsolanguage=BibTeX,
      emph={cs, use,new,seq,map,inline,eq,gincr,incr,IfNoValueF,%
      if,If,exist,protect,nopar,gset,%
      set,undefine,define,add,gadd,remove,div,newcounter%
      round,truncate,max,min,mod,gzero,int,%
      zero,newcount,protected,msg,error,DeclareDocumentCommand},
      emphstyle=\ttfamily\color{thered},
      firstnumber=last,
      stepnumber=1,
      escapeinside={{(*@}{@*)}},
      breaklines=true,
      framesep=5pt,
      basicstyle= \ttfamily,
      showstringspaces=false,
      keywordstyle=\ttfamily\color{thered},%\color{primary},
      keywordstyle=[2]\ttfamily\color{black},
      stringstyle=\color{thecommentscolor},
      commentstyle=\color{thecommentscolor},
      rulecolor=\color{gray!10},
      breakatwhitespace=true,
      prebreak={\Righttorque},
      postbreak={\space\Lefttorque},
      showspaces=false,  % shows spacing symbol
      upquote=true,
      xleftmargin=10pt,
      xrightmargin=0pt,
      aboveskip=\medskipamount,
      belowskip=\medskipamount,
      backgroundcolor=,
      tabsize=2,%
      mathescape=true,%
}

\lstnewenvironment{teXXX}[1][]
  {\lstset{language=[LaTeX]TeX}%
    \lstset{%
      style=highlite,  #1
}}
{}
\lstnewenvironment{phdverbatim}[1][]
  {\lstset{language=[LaTeX]TeX}%
    \lstset{%
      emph={cs, use,new,seq,map,inline,eq,gincr,incr,IfNoValueF,%
      if,If,exist,protect,nopar,gset,%
      set,undefine,define,add,gadd,remove,div,%
      round,truncate,max,min,mod,gzero,int,%
      zero,newcount,protected,msg,error,DeclareDocumentCommand},
      emphstyle=\verbatimfont\bfseries\color{black!80},
      numbers=none,
     % stepnumber=1,
      escapeinside={{(*@}{@*)}},
      breaklines=false,
      framesep=5pt,
      basicstyle= {\small\ttfamily},
      showstringspaces=false,
      keywordstyle=\ttfamily\color{thekeywordstyle},
      stringstyle=\color{black!50},
      commentstyle=\color{black!50},
	rulecolor=\color{gray!10},
      breakatwhitespace=true,
      showspaces=false,  % shows spacing symbol
	xleftmargin=15pt,
	xrightmargin=5pt,
	%  aboveskip=0pt, % compact the code looks ugly in type
	% belowskip=0pt,  % user responsible to insert any skips
	aboveskip=\medskipamount,
	belowskip=\medskipamount,
       backgroundcolor=,
       #1
}}
{}
%    \end{macrocode}
% The following have been taken from| https://github.com/cgnieder/cnltx/blob/master/cnltx-listings.sty|
%    \begin{macrocode}
\lstdefinelanguage{makeindex}{
  morekeywords = {
    actual,           % @
    arg_open,         % {
    arg_close,        % }
    encap,            % |
    escape,           % \\
    keyword,          % \\indexentry
    level,            % !
    page_compositor,  % -
    quote,            % "
    range_open,       % (
    range_close,      % )
    preamble,         % \\begin{theindex} \n
    postamble,        % \n\n \end{theindex} \n
    setpage_prefix,   % \n \\setcounter{page}{
    setpage_suffix,   % } \n
    group_skip,       % \n\n \\indexspace \n
    headings_flag,    % 0
    heading_prefix,   %
    heading_suffix,   %
    symhead_positive, % Symbols
    symhead_negative, % symbols
    numhead_positive, % Numbers
    numhead_negative, % numbers
    item_0,           % \n \\item
    item_1,           % \n \\subitem
    item_2,           % \n \\subsubitem
    item_01,          % \n \\subitem
    item_x1,          % \n \\subitem
    item_12,          % \n \\subsubitem
    item_x2,          % \n \\subsubitem
    delim_0,          % , 
    delim_1,          % , 
    delim_2,          % , 
    delim_n,          % , 
    delim_r,          % --
    delim_t,          %
    suffix_2p,        %
    suffix_3p,        %
    suffix_mp,        %
    encap_prefix,     % \\
    encap_infix,      % {
    encap-suffix,     % }
    line_max,         % 72
    indent_space,     % \t\t
    indent_length     % 16
  } ,
  morestring = [b]{"} ,
  morecomment = [l]{\%} ,
  sensitive = true
}
% --------------------------------------------------------------------------
% a listings language BibTeX:
\lstdefinelanguage{BibTeX}{
  % entry types:
  morekeywords = {
    % regular types:
    @article,
    @book,@mvbook,@inbook,@bookinbook,@suppbook,@booklet,
    @collection,@mvcollection,@incollection,@suppcollection,
    @manual,
    @misc,
    @online,
    @patent,
    @periodical,
    @suppperiodical,
    @proceedings,@mvproceedings,@inproceedings,
    @reference,@mvreference,@inreference,
    @report,
    @set,
    @thesis,
    @unpublished,
    @xdata,
    @customa,@customb,@customc,@customd,@custome,@customf,
    % type aliases:
    @conference,
    @electronic,
    @mastersthesis,
    @phdthesis,
    @techreport,
    @www,
    % unsupported types:
    @artwork,
    @audiobibnote,
    @commentary,
    @image,
    @jurisdiction,
    @legislation,
    @legal,
    @letter,
    @movie,
    @music
    @performance,
    @review,
    @software,
    @standard,
    @video,
    % cnltx types:
    @bundle,
    @class,
    @package,
  } ,
  % entry fields:
  morekeywords = [2]{
    % data fields:
    abstract,
    addendum,
    afterword,
    annotation,
    annotator,
    author,
    authortype,
    bookauthor,
    bookpagination,
    booksubtitle,
    booktitle,
    booktitleaddon,
    chapter,
    commentator,
    date,
    doi,
    edition,
    editor,editora,editorb,editorc,
    editortype,
    editoratype,editorbtype,editorctype,
    eid,
    entrysubtype,
    eprint,
    eprintclass,
    eprinttype,
    eventdate,
    eventtitle,
    eventtitleaddon,
    file,
    foreword,
    hvarer,
    howpublished,
    indextitle,
    institution,
    introduction,
    isan,
    isbn,
    ismn,
    isrn,
    issn,
    issue,
    issuesubtitle,
    issuetitle,
    iswc,
    journalsubtitle,
    journaltitle,
    label,
    language,
    library,
    location,
    mainsubtitle,
    maintitle,
    maintitleaddon,
    month,
    nameaddon,
    note,
    number,
    organization,
    origdate,
    origlanguage,
    origlocation,
    origpublisher,
    origtitle,
    pages,
    pagetotal,
    pagination,
    part,
    publisher,
    pubstate,
    reprinttitle,
    series,
    shortauthor,
    shorteditor,
    shorthand,
    shorthandintro,
    shortjournal,
    shortseries,
    shorttitle,
    subtitle,
    title,
    titleaddon,
    translator,
    type,
    url,
    urldate,
    venue,
    version,
    volume,
    volumes,
    year,
    % special fields:
    crossref,
    entryset,
    execute,
    gender,
    hyphenation,
    ids,
    indexsorttitle,
    keywords,
    options,
    presort,
    related,
    relatedoptions,
    relatedtype,
    relatedstring,
    sortkey,
    sortname,
    sortshorthand,
    sorttitle,
    sortyear,
    xdata,
    xref,
    % custom fields:
    namea,nameb,namec,
    nameatype,namebtype,namectype,
    lista,listb,listc,listd,liste,listf,
    usera,userb,userc,userd,usere,userf,
    verba,verbb,verbc,
    % field aliases:
    address,
    annote,
    archiveprefix,
    journal,
    key,
    pdf,
    primaryclass,
    school,
    % cnltx fields:
    maintainer
  } ,
  morestring = [b]{"} ,
  morecomment = [l]{\%} ,
  sensitive = false
}

% listings style for source code from igniter
\lstdefinestyle{complex}{
  basicstyle       =  \small\ttfamily,  %{\sourceformat},
  numbers          = left,
  numberstyle      = \tiny,
  xleftmargin      = 1em,
  numbersep        = .75em,
  gobble           = \@gobble ,
  columns          = fullflexible,
  literate         =
    {ä}{{\"a}}{1}
    {ö}{{\"o}}{1}
    {ü}{{\"u}}{1}
    {Ä}{{\"A}}{1}
    {Ö}{{\"O}}{1}
    {Ü}{{\"U}}{1}
    {ß}{{\ss}}{1}
    {`}{\`{}}{1}
    {'}{\textquotesingle}{1} ,
  breaklines       = true,
  keepspaces       = true,
  breakindent      = 1em,
  commentstyle     = \color{thecomment},
  keywordstyle     = \color{thecs},
  deletetexcs      =
    {
      a,o,u,A,O,U,
      begin,
      center,
      description,document,
      end,enumerate,
      equation,eqnarray,
      figure,flushleft,flushright,
      itemize,list,
      otherlanguage,
      table,tabu,tabular
    },
  deletekeywords   =
    {
      a,o,u,A,O,U,
      begin,
      center,
      description,document,
      end,enumerate,
      equation,eqnarray,
      figure,flushleft,flushright,
      itemize,list,
      otherlanguage,
      table,tabu,tabular
    },
  % \begin, \end:
  texcsstyle       = [2]\color{red}, %add color begin end
  index            = [2][texcs2],
  indexstyle       = [2]\@gobble,
  moretexcs        = [2]{begin,end},
  % control sequences that'll be indexed:
  texcsstyle       = [3]\color{cs},
  index              = [3][texcs3],
  indexstyle       = [3]\indexcs,
  % control sequences that won't be indexed:
  texcsstyle       = [4]\color{thecs},
  index            = [4][texcs4],
  indexstyle       = [4]\@gobble,
  % added environments that'll be indexed:
  texcsstyle       = [5]\color{env},
  index            = [5][texcs5],
  %indexstyle       = [5]\indexenv,   UNCOMMENT LATER
  % environments that won't be indexed:
  texcsstyle       = [6]\color{env},
  index            = [6][texcs6],
  indexstyle       = [6]\@gobble,
  moredelim        = *[s][\color{green}]{$}{$} %add color the math
}
%    \end{macrocode}
% 
%
%
%    \begin{macrocode}
\lstnewenvironment{lualisting}[1][]
{\lstset{language=[LaTeX]TeX,
  basicstyle           = \ttfamily,
  showstringspaces     = false,
  upquote              = true,
  keywordstyle         =\color{blue},
  commentstyle         =\color{black!50},
  stringstyle          =\color{black!80},
  backgroundcolor      =\color{white},
  xleftmargin          =15pt,
  xrightmargin         =5pt,
  aboveskip            =\medskipamount,
  belowskip	           =\medskipamount,
  #1}}
{}
%    \end{macrocode}
%
% \subsection{Go language}^^A
%^^A
%    \begin{macrocode}
\lstdefinelanguage{Go}{
  % Keywords as defined in the BNF
    morekeywords=[1]{break,default,func,interface,%
      case,defer,go,map,struct,chan,else,goto,package,%
      switch,const,fallthrough,if,range,type,continue,%
      for,import,return,var,select},
    % Special identifiers, builtin functions
    morekeywords=[2]{make,new,nil,len,cap,copy,complex,%
        real,imag,panic,recover,print,println,iota,close,%
        closed,_,true,false,append,delete},
    % Basic types
    morekeywords=[3]{%
        string,int,uint,uintptr,double,float,byte,%
          int8,int16,int32,int64,int128,%
          uint8,uint16,uint32,uint64,uint128,%
          float32,float64,complex64,complex128,%
          rune},
    % Strings : "toto", 'toto', `toto`
    morestring=[b]{"},
    morestring=[b]{'},
    morestring=[b]{`},
    % Comments : /* comment */ and // comment
    comment=[l]{//},
    morecomment=[s]{/*}{*/},
    % Options
    sensitive=true,
    numbers=left,
    numberstyle=\footnotesize
}
%    \end{macrocode}
%
%    \begin{macrocode}
\lstnewenvironment{Go}[1][]
  {\lstset{language=Go}%
    \lstset{%
      style=highlite,  #1
}}
{}


%    \end{macrocode}

% \begin{Go}[gobble=1, mathescape=true, showtabs=true, tab=\rightarrowfill, tabsize=2]
%   
% package main
%
% import (
%	"flag"
%	"os"
%	"github.com/involucro/involucro/app"  $\raisebox{6pt}{\hypertarget{test1}{}}\textrm{\dcircle{1}} $
%	"github.com/involucro/involucro/ilog"
% )
%
% func main() {
%	err := app.Main(os.Args)
%
%	switch err {
%	case flag.ErrHelp:
%		os.Exit(0)
%	case nil:
%		os.Exit(0)
%	default:
%		ilog.Error.Logf("Task processing failed: %s", err)
%		os.Exit(1)
%	}
% }
% \end{Go}
%
% See \hyperlink{test1}{\color{thered}\dcircle{1}}
%
% \section{LaTeX code demo environments}
%
%	To demonstrate \latex code it is sometimes desirable to have the code
%	be executed. This was pioneered in a number of packages. One of
%	the better packages to do so is \pkg{tcolorbox}. We use it to define
%	a special environment.
%
% \begin{docEnvironment}{texexample}{ \marg{title} \marg{label for referencing} } 
% The environment |texexample| will list the code
%	using the \pkg{listings} package, so we can have a nice box and shows the
%	output at the bottom section.
% \end{docEnvironment}
%	
%	First we define a new counter which resets at every chapter. If \docCounter{c@chapter}
%	is not defined we reset it based on sections.
%
% \begin{enumerate}
%	\item [\#1] Title of the example
%	\item [\#2] label for referencing
% \end{enumerate}
% 
%    \begin{macrocode}
  \ifx\c@chapter\@undefined
    \newcounter{texexp}[section]
    \@addtoreset{c@texexp}{c@section}
  \else
    \newcounter{texexp}[chapter]
    \@addtoreset{c@texexp}{c@chapter}
  \fi 
%    \end{macrocode}
%
%	
%    \begin{macrocode}
%
\def\dcircle#1{\ding{\numexpr181 + #1\relax}}
\def\thetexexp{\@arabic\c@section.\arabic{texexp}}
%    \end{macrocode}
%    \begin{macrocode}    
\tcbset{texexp/.style={% 
    fonttitle=\small\ttfamily, 
    fontupper=\small, 
    fontlower=\small,
    coltitle=black,
    colback = thecodebackground,% background
    colframe=thecodebackground, 
   % process code={\def\dcircle##1{\ding{\numexpr181 + ##1}}},
      %colupper=spot!,
   },
   listing options = {%
     gobble=2
     keywordstyle=\color{thekeywordstyle},
     belowskip=0pt, 
     escapeinside={(*@}{@*)},%
     breaklines=true,%
     backgroundcolor=\color{thecodebackground},%
     %firstnumber=last,%
     stepnumber=1,%
     upquote=true,%
     alsoletter={_,:},%
     commentstyle=\color{thecommentscolor},%
     emph={cs,new,seq,map,inline,eq,gincr,incr,IfNoValueF,if,%
            If,exist,protect,nopar,gset,%
            set,undefine,define,add,gadd,remove,div,%
            round,truncate,max,min,mod,gzero,int,exp,put,left,args,%
            zero,newcount,protected,msg,error,%
            eval,to,arabic,alph,Alph,roman,Roman,dim%
            DeclareDocumentCommand,%
            NewDocumentCommand,%
            RenewDocumentCommand,includegraphics,
            function,local,return,break,
         },%
           %
          % For LaTeX3 we need to add these, note % is important
          % dn’t miss, at the end...
          moretexcs    = {DeclareDocumentCommand,IfBooleanTF,tex_def:D,%
          cs_new:Nn,cs_new:Npn,cs_new:cn,cs_set_nopar:Npn,cs_meaning:N,%
          %primitives
          cs:w,cs_end:,tex_underline,group_begin:, group_end:,%
          %coffins
          NewCoffin,JoinCoffins,SetHorizontalCoffin,TypesetCoffin,%
          %properties
          prop_new:N,prop_new:c,prop_put:Nnn,%
          %boolean
          bool_new:N,bool_set_true:N,bool_set_false:N,%
          bool_if:NTF,%
          hbox_to_wd:nn,%
          IfNoValueTF,%
          %token lists
          tl_new:N,tl_set:Nn,tl_concat:NNN,%
          token_to_meaning:N,%
          seq_pop_left:NN,%
          %
          %int
          int_if_exist:cT,int_use:c,int_new:c,int_new:N,int_eval:n,%
          int_add,int_use,int_to_roman,%
          %boxes
          box_new:c,hbox_set:cn,box_use:c,vbox_set:cn,box_move_down:nn,%
          %string
          str_if_eq_x:nnTF,%
          tl_tail:n,%
          DeclareObjectType,%
          DeclareTemplateInterface,%
          DeclareTemplateCode,%
          DeclareInstance,UseInstance,AssignTemplateKeys%
          keys_set,keys_define,%      
          },%
         emphstyle=\verbatimfont\bfseries\color{theemphasiscolor},%
         %framexleftmargin=-14pt,numbersep=-7pt,xleftmargin=-28pt,
   },%close listings options
      % added for better control
      arc=0pt,  
      outer arc=0pt,
      example1/.code 2 args={\refstepcounter{texexp}{\ifx#2\empty\else\label{#2}\fi}}%Reference
     \pgfkeysalso{texexp, enhanced, breakable, title={Example \thetexexp\ #1}%
 },
}

\def\emphasize#1{%
\tcbset{texexp/.style={% 
    fonttitle=\sffamily, 
    fontupper=\normalsize, 
    fontlower=\normalsize,
    coltitle=black,
    colback = thecodebackground,% background
    colframe=thecodebackground,
      %process code={\def\dcircle##1{\ding{\numexpr181 + ##1}}},
      %colupper=spot!,
   },
   listing options = {%
     gobble=1,
     tabsize=2,
     keywordstyle=\color{thekeywordstyle},
     belowskip=0pt, 
     escapeinside={(*@}{@*)},%
     breaklines=true,%
     backgroundcolor=\color{thecodebackground},%
     %firstnumber=last,%
     stepnumber=1,%
     upquote=true,%
     alsoletter={_,:},%
     commentstyle=\color{thecommentstyle},%
     emph={cs,new,seq,map,inline,eq,gincr,incr,IfNoValueF,if,%
            If,exist,protect,nopar,gset,%
            set,undefine,define,add,gadd,remove,div,%
            round,truncate,max,min,mod,gzero,int,exp,put,left,args,%
            zero,newcount,protected,msg,error,%
            eval,to,arabic,alph,Alph,roman,Roman,dim%
            DeclareDocumentCommand,%
            NewDocumentCommand,%
            RenewDocumentCommand,includegraphics,
            function,local,return,#1,
         },%
           %
          % For LaTeX3 we need to add these, note % is important
          % dn’t miss, at the end...
     moretexcs    = {DeclareDocumentCommand,IfBooleanTF,tex_def:D,%
          cs_new:Nn,cs_new:Npn,cs_new:cn,cs_set_nopar:Npn,token_to_meaning:N,%
          %primitives
          cs:w,cs_end:,tex_underline,group_begin:, group_end:,%
          %coffins
          NewCoffin,JoinCoffins,SetHorizontalCoffin,TypesetCoffin,%
          %properties
          prop_new:N,prop_new:c,prop_put:Nnn,%
          %boolean
          bool_new:N,bool_set_true:N,bool_set_false:N,%
          bool_if:NTF,%
          hbox_to_wd:nn,%
          IfNoValueTF,%
          %token lists
          tl_new:N,tl_set:Nn,tl_concat:NNN,%
          token_to_meaning:N,%
          seq_pop_left:NN,%
          %
          %int
          int_if_exist:cT,int_use:c,int_new:c,int_new:N,int_eval:n,%
          int_add,int_use,int_to_roman,%
          %boxes
          box_new:c,hbox_set:cn,box_use:c,vbox_set:cn,box_move_down:nn,%
          %string
          str_if_eq_x:nnTF,%
          tl_tail:n,%
          DeclareObjectType,%
          DeclareTemplateInterface,%
          DeclareTemplateCode,%
          DeclareInstance,UseInstance,AssignTemplateKeys,%
          keys_set,keys_define,%      
          },%
     emphstyle=\verbatimfont\bfseries\color{theemphasiscolor},%
    %framexleftmargin=-14pt,numbersep=-7pt,xleftmargin=-28pt,
    %
   },%close listings options
      % added for better control
      arc=0pt,  
      outer arc=0pt,
  }%close style
}%close command
%
\newenvironment{texexp}[1]{\tcblisting{texexp,#1}}{\endtcblisting}

\newenvironment{example1}[3][]{\tcblisting{example1={#2}{#3},#1}}%
    {\endtcblisting}
%
%    \end{macrocode}
%    
%    \begin{docEnvironment}{texexample} { \oarg{} \marg{Title} \meta{label} }
%      
%    \end{docEnvironment}
%    \begin{macrocode}
\newenvironment{texexample}[3][]{\noindent\tcblisting{example1={#2}{#3},#1}}%
    {\endtcblisting }
    
\newenvironment{texcode}[3][listing only]{\noindent\tcblisting{example1={#2}{#3},#1}}%
    {\endtcblisting }    
%    
% Need to fix
\let\luaexample\texexample        
\let\endluaexample\endtexexample    
%    \end{macrocode}
%     
%    \begin{macrocode}
%\tcbset{luacode/.style={%
%      fonttitle=\small\ttfamily, 
%      fontupper=\small, 
%      fontlower=\small,
%      coltitle=black,
%      colback = thecodebackground,% background
%      colframe=thecodebackground, 
%      %colupper=spot!,
%      },
%      listing options = {
%          language={[5.2]Lua},
%          belowskip=0pt, 
%          escapeinside={(*@}{@*)},%
%          breaklines=true,%
%          backgroundcolor=\color{thecodebackground},%
%          firstnumber=last,%
%          stepnumber=1,%
%          upquote=true,%
%          alsoletter={_,:},%
%          commentstyle=\bfseries\color{black!90},%
%          stringstyle = \color{black!90},
%          emphstyle=\verbatimfont\bfseries\color{black!80},%
%          keywordstyle= \bfseries\color{black!80},%
%          },
%      % added for better control
%      arc=0pt,  
%      outer arc=0pt,
%      luaexp1/.code 2 args={\refstepcounter{texexp}\label{#2}}%Reference
%     \pgfkeysalso{luacode, enhanced, breakable, title={Example \thetexexp\ #1}},
%}
%\newenvironment{luaexp1}[1]{\tcblisting{luacode,#1}}{\endtcblisting}
%
%\newenvironment{luaexample}[3][]{\noindent\tcblisting{luaexp1={#2}{#3},#1}}%
%    {\endtcblisting}
%%
%    \end{macrocode} 
%
% The following demonstrates the usage.
%
%\begin{texexample}[]{atest}{This is a comment?}
% \def\demomacro{Hello World!}
%\end{texexample}
%
% 	\begin{example}{A Test}{test}{This is a comment?}
%	  \def\demomacro{Hello World!}
%	\end{example}
%
% \section{makeidx}    
% We check that \docAuxCommand{printindex} has been defined. 
% If the test is positive then an indexing package has been loaded, otherwise we load the \pkg{makeidx}\footcite{makeidx}.
%  
%    \begin{macrocode}
\ExplSyntaxOn
\cs_if_exist:cTF {printindex}
  { }
  {
    \RequirePackage{makeidx}[2000/03/29]
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \cvaref#1{\textcolor{\phdd_key_color_command_tl}{#1}}
\cs_set:Npn \colOpt#1{\textcolor{\phdkv@col@opt}{#1}}
\ExplSyntaxOff
\lstdefinestyle{tcbdocumentation}{language={[LaTeX]TeX},
    aboveskip={0\p@ \@plus 6\p@},
    belowskip={0\p@ \@plus 6\p@},
    columns=fixed,
    keepspaces=true,
    breaklines=true,
    prebreak={\Righttorque},
    postbreak={\space\Lefttorque},
    breakatwhitespace=true,
    basicstyle=\ttfamily\footnotesize,
    extendedchars=true,
    nolol,
    inputencoding = \phdkv@listingencoding}
%    \end{macrocode}
%
%  \section{Documenting Macros}
% The following macros are taken from \docClass{ltxdoc} and modified accordingly.
%
%  \begin{docEnvironment}[doclang/environment content=command description]{docCommand}{\oarg{options}\marg{name}\marg{parameters}}
% \end{docEnvironment}
%
%    \begin{macrocode}
\DeclareRobustCommand\phdcs[1]{{\color{thecs}{%
           \texttt{\char`\\\detokenize{#1}}}}}
%    \end{macrocode}
% \begin{macro}{\phddoc_orig_meta}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset_eq:NN \phd@doc@orig@meta\meta%
\ExplSyntaxOff
%    \end{macrocode}
% \end{macro}
% \begin{docCommand}{meta}{\marg{argument}}
% We modify the standard \meta{arguments} to allow for colour settings.  The \docColor{themeta} is defined in the \pkg{phd-colorpalette} package. The braces are not colored
% as they do not look very good if they are. 
% \end{docCommand}
%
%  Use the original |meta| as defined in |doc| and only colorize and set the font parameters through the |doc|
%  provided macro hook |\meta@font@select|.
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \meta #1 {
   \group_begin:
   \def\meta@font@select{\ttfamily\upshape\color{themeta}}
   \phd@doc@orig@meta{#1}
   \group_end:
}
%    \end{macrocode}
% \begin{docCommand}{marg}{\marg{mandatory argument}}
%  Typesets a mandatory argument as \meta{argument}.
% \end{docCommand}
%    \begin{macrocode}
\cs_set:Npn \marg #1
  {
    \group_begin:
      \ttfamily\char`\{
      \def\meta@font@select{\rmfamily\itshape\color{theoarg}}
      \phd@doc@orig@meta{#1}
      \ttfamily\char`\}
    \group_end:
  }
%    \end{macrocode}
% 
% \begin{docCommand}{oarg}{\marg{argument}}
% Typesets an optional argument, as found in \latexe commands. The command:
% \begin{quote}
%  |\test\oarg{style=two}\marg{mandatory arguments}| 
% \end{quote}
% will typeset:
%  \begin{quote}
%   |\test|\oarg{style=two}\marg{mandatory arguments}
%  \end{quote}
% \end{docCommand} 
%    \begin{macrocode}
\cs_set:Npn \oarg #1
  {
    {\ttfamily[}\meta{#1}{\ttfamily]}
  }
\ExplSyntaxOff
%    \end{macrocode}
%
%\begin{docCommand}[doc new=2015-01-08]{docCounter}{\marg{name}}
%  Documents a counter with given \meta{name}. The counter is automatically indexed.
%\begin{dispExample}
%The counter \docCounter{foocounter} can be used for computation.
%\end{dispExample}
% \SpecialMainIndex{\docCounter}
%\end{docCommand}

%\begin{docCommand}[doc new=2015-01-08]{docCounter*}{\marg{name}}
%  Identical to \refCom{docCounter}, but without index entry.
%\end{docCommand}


% \begin{docCommand}[doc updated=2017-10-11] {phdcs} { \marg{macro name}}
%   We modify the standard |\cs| and save to a new name to be able to use
%   underscores. Maybe there are better ways of doing it as well.
% \end{docCommand}

%    \begin{macrocode}
\newif\ifphd@doc@toindex
\newif\ifphd@doc@colorize
\newif\ifphd@doc@annotate
%    \end{macrocode}
% \subsection{Keys for language related texts.}
%    \begin{macrocode}
%
 \ExplSyntaxOn 
\cxset{
  pageshort/.store~in           = \phdkv@text@pageshort,
  doclang/.cd,
  color/.store~in               = \phdkv@text@color,
  colors/.store~in              = \phdkv@text@colors,
  environment~content/.store~in = \phdkv@text@envcontent,
  environment/.store~in         = \phdkv@text@env,
  environments/.store~in        = \phdkv@text@envs,
  key/.store~in                 = \phdkv@text@key,
  keys/.store~in                = \phdkv@text@keys,
  index/.store~in               = \phdkv@text@index,
  pageshort/.store~in           = \phdkv@text@pageshort,
  value/.store~in               = \phdkv@text@value,
  values/.store~in              = \phdkv@text@values,
  % List Styles text in english
  lst~styles/.store~in          = \phd@text@lststyles,
}   
\cxset{doclang/lst~styles       = Listings~Styles}
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\cxset
  {
    documentation listing options/.store in=\phdkv@doclistingoptions,%
    documentation listing style/.style={documentation listing options={style=#1}},%
    documentation minted style/.store in=\phdkv@docmintstyle,
    documentation minted options/.store in=\phdkv@docmintoptions,
  }
%    \end{macrocode}
%
% \section{Index settings}
%
%  We consider indices to be composed of three elements, the index heading 
%  i.e., the word Index typeset in a specific language, the entries and the
%  page numbers. The following keys relate to settings that must have a 
%  one to one relationship with the settings of the |.ist| file. Unfortunately
%  there is no easy way to achieve this. A better strategy is to generate the \docextension{.ist} file 
%  automatically by writing the parameters to a file.\tcbdocmarginnote{16/08/2017}
%
% \begin{macro}{\tex,gobble }
% \begin{teX}[gobble=1, frame=leftmargin, xleftmargin=0pt,framesep=10pt]
% % Getting codeline and listings number at same distance 
%   \cxset{gobble=1} gobbles all 
% \end{teX}
%
% \begin{teX}[gobble=1, frame=leftmargin, xleftmargin=0pt,framesep=0pt]
% % Getting codeline and listings number at same distance 
%   \cxset{gobble=1} gobbles all 
% \end{teX}
% \end{macro}
%
% 
% \begin{macro}{idx@actual,\idx@quote,\idx@level,\idx@format,\idx@encap}
%    \begin{macrocode}
\cxset{    
    % indexing
    index actual/.store in   = \idx@actual,
    index quote/.store in    = \idx@quote,
    index level/.store in    = \idx@level,
    index format/.store in   = \idx@format,
    index encap/.store in    = \idx@encap,
    index colorize/.is if    = phd@doc@colorize,%
    index annotate/.is if    = phd@doc@annotate,%
  }
%    \end{macrocode}
% \end{macro}
%
% We provide three default styles. The first style is suitable for documenting normal text without any
% commands or fancy characters in the index. The second is for the german language. These settings
% are also suitable for any language that has the |''| messed up by Babel or the @ has its catcode
% changed.
% For better mnemonics we also have one as |doc|. We default to the \docAuxKey{index doc settings}.
%    \begin{macrocode}  
 \cxset{
    index default settings/.style = {index actual={@},
                                    index quote={"}, 
                                    index level={!}},
    index german settings/.style = {index actual={=},
                                    index quote={!}, 
                                    index level={>}},
    index doc settings/.style    = {index actual={=},
                                    index quote={!}, 
                                    index level={>}},
 }
%</DOCUM>
%<*DOCUM|DFLT>  
%<DOCUM> \cxset{
   % indexing
   index actual  = {@},
   index quote   = {!},
   index level   = {>},
   index doc settings,
%<DOCUM> }
%</DOCUM|DFLT>
%<*DOCUM>  
%    \end{macrocode}
% \subsection{Keys for adjusting design of command displays.}
% The following keys relate to heading describing commands, keys environments and the
%  like
%  \begin{docKey}{doc left}{=\meta{length}}{no default, initially 2em}
%   Sets the lefthand \enquote{offset} of the documentation texts for the \refCom{docCommand},
%  \refCom{docEnvironment}, \refCom{docKey} to \meta{length}.
% \end{docKey}
%  \begin{docKey}{doc right}{=\meta{length}}{no default, initially 0em}
%   Sets the righthand \enquote{offset} of the documentation texts for the \refCmd{docCommand},
%  \refCom{docEnvironment}, \refCmd{docKey} to \meta{length}.
% \end{docKey}
%
%    \begin{macrocode}  
\cxset{    
    doc left/.dimstore in                   = \phdkv@doc@left,
    doc right/.dimstore in                  = \phdkv@doc@right,
    doc left indent/.dimstore in            = \phdkv@doc@indentleft,
    doc right indent/.dimstore in = \phdkv@doc@indentright,
    doc head command/.style       = {doc@head@command/.style={#1}},
    doc head environment/.style   = {doc@head@environment/.style={#1}},
    doc head key/.style           = {doc@head@key/.style={#1}},
    doc head/.style               = {doc head command= {#1},
                                     doc head environment={#1},
                                     doc head key={#1}},
    doc description/.store in     = \phdkv@doc@description,%
    doc into index/.is if         = phd@doc@toindex,%
  }
\cxset{doc description = {some test}}  
%    \end{macrocode}
% 
%    \begin{macrocode}
% styles
\cxset{
%</DOCUM>
%<*DOCUM|DFLT>
  docexample/.style={colframe=ExampleFrame,colback=ExampleBack,fontlower=\footnotesize},
  documentation minted style=,
  documentation minted options={tabsize=2,fontsize=\small},
  english language/.code={\cxset{doclang/.cd,
    color=color,colors=Colors,
    environment content=environment content,
    environment=environment,environments=Environments,
    key=key,keys=Keys,
    index=Index,
    pageshort={P.},
    value=value,values=Values}},
 }
%</DOCUM|DFLT>
%<*DOCUM> 
\AtBeginDocument{%
  \csname phd@doc@index@\idx@format\endcsname%
  \hypersetup{
    citecolor  = \phdkv@colhyper,
    linkcolor  = \phdkv@colhyper,
    urlcolor   = \phdkv@colhyper,
    filecolor  = \phdkv@colhyper,
    menucolor  = \phdkv@colhyper
}}
%    \end{macrocode}    
%    \begin{macrocode}
\lstdefinestyle{smalldisplay}{%
  numbers=none, 
  backgroundcolor=\color{thecodebackground}, 
  xleftmargin=0pt}

\tcbset{documentation listing style=smalldisplay}
\tcbset{
   docexample/.style={%
   colframe=thecodeframe, 
   colback=thecodebackground,
   before skip=\medskipamount,
   after skip=\medskipamount,
   fontlower=\footnotesize,
   }
}
%    \end{macrocode}
%    \begin{macrocode}
%
%\newenvironment{dispListing*}[1]{%
%  \phd@layer@pushup\cxset{docexample,#1}\phdwritetemp%
%  }{\enddispListing}

% index auxiliary macros
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \phdindexprintca #1#2#3 {
  \ifphd@doc@colorize
    \textcolor{#2}
    { \texttt{#1} }
  \else
    \texttt{#1}
  \fi
  \ifphd@doc@annotate\ 
   #3
  \fi
}


\cs_set:Npn \phd_index_print_c#1#2{%
  \ifphd@doc@colorize
    \textcolor{#2}{\texttt{#1}}
  \else\texttt{#1}
  \fi%  
  
}


\NewDocumentCommand{\phdindexprintcomc}{ m }
  {
    \phd_index_print_c {\phdcs{#1}}{\phdd_key_color_command_tl}
  }
%%
 
%    \end{macrocode}
%
%  \begin{docCommand} {phd_print_com} { \marg{cs name} }
%    Prints a command. 
%  \end{docCommand}
%
%    \begin{macrocode}

\cs_new:Npn \phd_print_com #1
  {
    \textcolor{black}{\ttfamily\bfseries\phdcs{#1}}%\phdd_key_color_command_tl
  }
\ExplSyntaxOff  
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
\newrobustcmd{\phdindexprintenvca}[1]
  {
    \phdindexprintca{#1}{\phdd_key_color_environment_tl}{\phdkv@text@env}
  }

\newrobustcmd{\phdindexprintenvc}[1]
  {
    \phd_index_print_c{#1}{\phdd_key_color_environment_tl}
  }
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \phd_print_env#1
  {
    \textcolor{\phdd_key_color_environment_tl}{\ttfamily\bfseries#1}
  }

\newrobustcmd{\phdindexprintkeyca}[1]
  {
    \phdindexprintca{#1}{\phdd_key_color_tl}{\phdkv@text@key}
  }

\newrobustcmd{\phdindexprintkeyc}[1]{\phd_index_print_c{#1}{\phdd_key_color_tl}}



\newrobustcmd {\phdindexprintvalca}[1]
  {
    \phdindexprintca{#1}{\phdd_key_color_value_tl}{\phdkv@text@value}
  }

\newrobustcmd {\phdIndexPrintValC}[1]
  {
    \phd_index_print_c{#1}{\phdd_key_color_value_tl}
  }

\cs_set:Npn \phd@Print@Val #1 
  {
    \textcolor {\phdd_key_color_value_tl} {\ttfamily\bfseries#1}
  }

\newrobustcmd{\phdindexprintcolca}[1]
  {
    \phdindexprintca{#1}{\phdd_key_color_color_tl}{\phdkv@text@color}
  }





\cs_set:Npn \phdindexcom #1 
  {
    \ifphd@doc@toindex
      \index
       {
         #1
         \idx@actual
         \phdindexprintcomc{#1}
       }
    \fi
  }
%    \end{macrocode}
% \begin{docCommand}{phd_index_env}{\marg{environment name}}{}
%   Auxiliary command to add an environment to the index. The environment name need to come from the key settings.
%  This need to be integrated with the i18n package later on.
% \end{docCommand}
%    \begin{macrocode}
\cs_set:Npn \phd_index_env #1
  {
    \ifphd@doc@toindex
      \index
        {#1
          \idx@actual
          \phdindexprintenvca{#1}
        }
      \index
        {
          \phdkv@text@envs
          \idx@level#1
          \idx@actual
          \phdindexprintenvc{#1}
        }
    \fi
  }
%    \end{macrocode}
%  \begin{docCommand}{phd_index_key}{\marg{key name}}
%  Indexes a key.
%  \end{docCommand}
%    \begin{macrocode}
\cs_set:Npn \phd_index_key_path #1#2
  {
    \ifphd@doc@toindex\index{#2\idx@actual  
      \phdindexprintkeyca{#2}}
      \index{\phdkv@text@keys
         \idx@level#1
        \idx@actual
        \phdindexprintkeyc{/#1/}
        \idx@level#2
        \idx@actual
        \phdindexprintkeyc{#2}
      }
    \fi
  }
%    \end{macrocode}
%

%
% \begin{docCommand} {phd_index_col} { \marg{color name} }
% \end{docCommand}
%    \begin{macrocode}
\cs_set:Npn \phd_index_col #1
  {
    \ifphd@doc@toindex
    \index
      {
        #1
        \idx@actual
        {\phdindexprintcolca{#1}}
        \encapchar hyperpage
      }
    \index
      {
        \phdkv@text@colors \idx@level #1
        \idx@actual{\phdindexprintcolc {#1}\protect\thinspace\protect\docColorBox{#1}}
        \encapchar hyperpage
      }
    \fi
  }

\ExplSyntaxOff
%    \end{macrocode}
%
%   
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \phd_brackets #1
  {
    {\ttfamily\char`\{}#1{\ttfamily\char`\}}
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docEnvironment}{phdd_manual_entry}{}
%  A list enclosing manual entries.
% \end{docEnvironment}
%    \begin{macrocode}
\ExplSyntaxOn
\newenvironment{phdd_manual_entry}%
  {%
   \begin{list}{}
    {%
     \setlength{\leftmargin}{\phdkv@doc@left}%
     \setlength{\itemindent}{0pt}%
     \setlength{\itemsep}{0pt}%
     \setlength{\parsep}{0pt}%
     \setlength{\rightmargin}{\phdkv@doc@right}%
    }\item
  }
  {\end{list}}

\cs_set:Npn \phd_manual_top #1
  {
    \itemsep=0pt
    \parskip=0pt
    \item\strut{#1}\par
    \topsep=0pt
  }

\cs_set:Npn \phd_doc_do_description:
  {
    \ifx\phdkv@doc@description\@empty
    \else
      \tcblower
      \raggedleft(\phdkv@doc@description)
    \fi
  }
\ExplSyntaxOff
%    \end{macrocode} 
%
%  \begin{docEnvironment} {phd@doc@head} { \marg{additional options} }
%  \end{docEnvironment}
%  \begin{phd@doc@head}{}
% \lorem
% \end{phd@doc@head}
%    \begin{macrocode}
\ExplSyntaxOn
\newtcolorbox{phd@doc@head}[1]
 {
  blank,
  colback=red!10,
  colframe=white,
  code={\tcbdimto\tcb@temp@grow@left{-\phdkv@doc@indentleft}%
        \tcbdimto\tcb@temp@grow@right{-\phdkv@doc@indentright}},
  grow~to~left~by=\tcb@temp@grow@left,%
  grow~to~right~by=\tcb@temp@grow@right,
  sidebyside,
  sidebyside~align=top,
  sidebyside~gap=-\tcb@w@upper@real,
  phantom=\phantomsection,%
  enlarge~bottom~by=-0.2\baselineskip,
  #1
 }
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
\newenvironment{docCmd}[3][]{
  \cxset{#1}%
  \begin{phdd_manual_entry}%
  \begin{phd@doc@head}{doc@head@command}%
  \phd_print_com{#2}
  \phdindexcom{#2}
  \protected@edef\@currentlabel{\noexpand\phdcs{#2}}
  \label{com:#2}{\ttfamily #3}%
  \phd_doc_do_description:%
  \end{phd@doc@head}}%
  {\end{phdd_manual_entry}}
\ExplSyntaxOff
%    \end{macrocode}
%

%    \begin{macrocode}
\ExplSyntaxOn
\newenvironment{docCmd*}
  {
    \begingroup
    \phd@doc@toindexfalse
    \begin{docCommand}
  }
  {
    \end{docCommand}
    \endgroup
  }

\newenvironment{docEnv}[3][]{\cxset{#1}%
  \begin{phdd_manual_entry}%
  \begin{phd@doc@head}{doc@head@environment}%
  \strut
  \phdcs{begin}
  \phd_brackets{\phd_print_env{#2}}
  \phd_index_env{#2}
  \protected@edef\@currentlabel{#2}\label{env:#2}{\ttfamily #3}%\par%
  \strut~~\meta{\phdkv@text@envcontent}%\par%
  \strut\phdcs{end}
  \phd_brackets{\phd_print_env{#2}}%
  \phd_doc_do_description:%
  \end{phd@doc@head}}%
  {\end{phdd_manual_entry}}
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{docEnv}{docEnv*} {}{}
% \end{docEnv}
%    \begin{macrocode}
\newenvironment{docEnv*}
  {
    \bgroup
    \phd@doc@toindexfalse
    \begin{docEnv}
  }
  { \end{docEnv}\egroup }
%    \end{macrocode}

% \begin{docEnvironment}[doclang/environment content=key description,doc updated=2018-12-06]{docKey}{\oarg{key path}\oarg{options}\marg{name}\marg{parameters}\marg{description}}
%% \end{docEnvironment}
%
%\begin{docKey}[foo]{footitle}{=\meta{text}}{no default, initially empty}
%Creates a heading line with \meta{text} as content.
%\end{docKey}
%\begin{texexample}{Using dockey}{ex:dockey}
%\begin{docKey}[foo]{footitle}{ = \meta{text}}{no default, initially empty}
%  Creates a heading line with \meta{text} as content.
%\end{docKey}
%\end{texexample}
%    \begin{macrocode} 
\ExplSyntaxOn
\renewenvironment{docKey}[4][\@empty]{
  \begin{phdd_manual_entry}%
    \cxset{doc~description={#4}}%
%    \end{macrocode}
% The contents of the key are placed using \cs{phd@doc@head}, which is a tcolorbox.
% |doc@head@key| is a style for the tcolorbox.
%    \begin{macrocode}    
      \begin{phd@doc@head}{doc@head@key}
        \ifx#1\@empty%
          \phd_print_key:n {#2}
          \phd_index_key{#2}
          \protected@edef\@currentlabel{#2}
          \label{key:#2}{\ttfamily #3}%
        \else
          \phd_print_key:n {/#1/#2}
          \phd_index_key_path{#1}{#2}
          % redefine current label
          \protected@edef\@currentlabel{/#1/#2}
          % label
          \label{key:/#1/#2}{\ttfamily#3}%
        \fi%
     \phd_doc_do_description:
     \end{phd@doc@head}}
  {\end{phdd_manual_entry}}

\renewenvironment{docKey*}
  {\bgroup\phd@doc@toindexfalse\begin{docKey}}
  {\end{docKey}\egroup}

\cs_set:Npn \phdmakedocSubKey#1#2{%
  \newenvironment{#1}[4][\@empty]{%
    \ifx##1\@empty
      \cs_set:Npn \phd@key@path {#2}
    \else
     \cs_set:Npn \phd@key@path{#2/##1}
    \fi%
    \begin{docKey}[\phd@key@path]{##2}{##3}{##4}}%
    {\end{docKey}}%
  \newenvironment{#1*}{\bgroup\phd@doc@toindexfalse\begin{#1}}{\end{#1}\egroup}%
}
\ExplSyntaxOff
%    \end{macrocode} 


%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \@@_doc_aux_env: #1
  {
    \phd_print_env{#1}
    \phd_index_env{#1}
  }
  
\cs_set:Npn \@@_doc_aux_env_star #1
  {
    \phd_print_env{#1}
  }
%    \end{macrocode}
%
%  \begin{docCommand} {docAuxEnv} { \meta{star} \marg{arg1} }
%  \end{docCommand}
%
%    \begin{macrocode}
\NewDocumentCommand\docAuxEnv { s m } 
  {
    \IfBooleanTF {#1}   
    {\@@_doc_aux_env_star{#2} }
    {\@@_doc_aux_env: {#2} }
  }  
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{docCommand} {docAuxKey} {\oarg{path}\marg{value}}
% Prints in-line the value of a key. For pgf keys the optional argument typesets the family:
%\example |\docAuxKey[phd]{index doc settings}| typesets:
%
% \docAuxKey[phdd]{index doc settings}
% 
%
% \begin{macro}{\phd_print_key:n, \phd_index_key:n, \phdd_index_key:n}
% Besides the main function we require a function to typeset the key
% another on to typeset the index and auxiliaries to handle the star
% and optional arument.
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \phd_print_key:n #1
  {
    \textcolor{\phdd_key_color_tl}{\ttfamily\bfseries#1}
  }
  
\cs_set:Npn \phd_index_key #1 
  {
    \ifphd@doc@toindex
      \index{#1\idx@actual \phdindexprintkeyca{#1}}
      \index
        {
          \phdkv@text@keys
          \idx@level
          #1
          \idx@actual
          \phdindexprintkeyc{#1}
        }
    \fi
  }
  
\NewDocumentCommand {\@@_doc_aux_key:} {O{\@empty} m}
  {%
     \ifx#1\@empty%
       \phd_print_key:n {#2}
       \phd_index_key {#2}%
     \else%
       \phd_print_key:n {/#1/#2}
       \phd_index_key_path {#1}{#2}%
  \fi
  }%

\newcommand{\@@_doc_aux_key_star}[2][\@empty]{%
  \ifx#1\@empty%
   \phd_print_key {#2}%
  \else%
   \phd_print_key {/#1/#2}%
  \fi}%
  
\DeclareDocumentCommand {\docAuxKey} { s O{} m }
  {
    \IfBooleanTF {#1}
      { \@@_doc_aux_key_star {#3} } 
      { \@@_doc_aux_key: [#2]{#3} }
  }  
\ExplSyntaxOff
%    \end{macrocode} 
% \end{macro}
%\end{docCommand}
%
% \begin{docCommand} {phd_ref_doc} { \marg{refname} }
% \end{docCommand}
%
% We use \pkg{hyperref}\footcite{hyperref} to add links. The \docAuxCommand{hyperref}\oarg{label}\marg{text}
% is used to create the link. We use |\ding{213}| \ding{213} for the page see \refCmd{docColor}.
% This is a great technique pioneered in the PGF and PGFPlots manuals for cross referencing
% and the code below is an adaptation.
%
% There are two colors involved here and for a good reason. The first color needs to
% emphasize the command and to be consistent with the description macros. The second
% is the hyperlink color. For very long manuals, this can get a bit ugly, so one may want
% to de-emphasize it, like I have done here. 
% 
% \begin{macro}{\setrefcountdefault, \getpagerefnumber}
% References are not numbers, however they often store numerical data such as section or 
% page numbers. |\ref| or |\pageref| cannot be used for counter assignments and calculations
% because they are not expandable. The package \pkg{refcount}\footcite{refcount} can be used
% to extract the data from references. The package supports |hyperref|, |nameref|, |titleref|,
% and |babel| so it is safe to use. 
% We set the default value here. \refCmd{docColors}
%    \begin{macrocode}
\ExplSyntaxOn
\setrefcountdefault{-1}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\cs_set:Npn \phd_ref_doc #1 #2
{ 
  \IfRefUndefinedExpandable {#2}
    {{\bfseries\phdd_typeset_command {#1} }}  
    { 
      \hyperref[#2]
      {{\color{themacrocolor}\texttt{\ref*{#2}}}%
      \ifnum\getpagerefnumber{#2}=\thepage
      \else
        \textsuperscript
      {
        \ding{213}\,
        \phdkv@text@pageshort\,
        \pageref*{#2}
      }
     \fi
   }
  } 
 }

\cs_set:Npn \phd_ref_doc_star#1
  {
    \hyperref[#1]{\texttt{\ref*{#1}}}
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand}{refCmd} {\meta{*} \Arg{name} }
% \end{docCommand}
% The \refCmd{refCmd} references a documented macro, where name is written without a backslash. 
% the page reference is supressed if it links to the same page. The star version does not print
% a page reference.
% \begin{macro}{\ref_com:}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \ref_com: #1 
  {
    \phd_ref_doc {#1} {com:#1}
  }
  
\cs_set:Npn \ref_com_star #1
  {
    \phd_ref_doc_star{com:#1}
  }
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\DeclareDocumentCommand {\refCmd} { s m } 
  {
    \IfBooleanTF {#1}
    { \ref_com_star {#2} } { \ref_com: {#2} }
  }  
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \refEnv: #1 {\phd_ref_doc{env:#1}}
\cs_set:Npn \refEnv_star#1{\phd_ref_doc_star{env:#1}}

\DeclareDocumentCommand {\refEnv} { s m }
  {
    \IfBooleanTF {#1}
      { \refEnv_star {#2} }
      { \refEnv: {#2}     }
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand}{refKey} {*\marg{ref text} }
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \refKey@#1{\phd_ref_doc{key:#1}}
\cs_set:Npn \refKey@star#1{\phd_ref_doc_star{key:#1}}
\DeclareDocumentCommand {\refKey} { s m }
  {
    \IfBooleanTF { #1 }
      { \refKey@star {#2} }
      { \refKey@ {#2}       }
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand} {refAux} {\marg{command name}}
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \refAux#1{\textcolor{\phdkv@colhyper}{\ttfamily #1}}
\cs_set:Npn \refAuxcs#1{\textcolor{\phdkv@colhyper}{\phdcs{#1}}}
\ExplSyntaxOff
%    \end{macrocode}
% 
% \section{Indexing}
%  Most of the indexing macros that follow have been adapted from the pgfmanual-en-macros
%  or the tcolorbox documentation code and transliterated to expl3 language.
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \phd@doc@index@pgf@
  {
    \c@IndexColumns=2%
    \cs_set:Npn \theindex
      {
        \@restonecoltrue
        \columnseprule 0pt  
        \columnsep 28\p@
        \twocolumn[\index@prologue]%
        \parindent -30pt%
        \columnsep 15pt%
        \parskip 0pt plus 1pt%
        \leftskip 30pt%
        \rightskip 0pt plus 2cm%
        \small%
        \cs_set:Npn \@idxitem{\par}%
        \let\item\@idxitem\ignorespaces
      }
    \cs_set:Npn \endtheindex{\onecolumn}%
    \cs_set:Npn \noindexing{\let\index=\@gobble}%
  }
%    \end{macrocode}
%
%  \subsection{Index heading and prologue}
%
% The index prologue is text that is entered just before the indexing entries start.
% Most indices do not have any text.
% We also need to distinguish between using a chapter type heading or a section type heading.
%
%    \begin{macrocode} 
\cs_set:Npn \phd@doc@index@pgfsection{%
  \cs_set:Npn \index@prologue
    {
      \section*{\phdkv@text@index}
      \addcontentsline{toc}{section}{\phdkv@text@index}
      \par\noindent%
   }
  \phd@doc@index@pgf@
}
%    \end{macrocode}
%    \begin{macrocode}
\cs_set:Npn \phd@doc@index@pgfchapter{%
  \cs_set:Npn \index@prologue{\ifdefined\phantomsection\phantomsection\fi    
  \@makeschapterhead{\phdkv@text@index}
  \addcontentsline{toc}{chapter}{\phdkv@text@index}}%
  \phd@doc@index@pgf@%
}
%    
\let\phd@doc@index@pgf=\phd@doc@index@pgfsection%
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_set:Npn \phd@doc@index@doc
  {
    \let\phdindexcom      = \SpecialMainIndex
    \let\phd_index_env    = \SpecialMainEnvIndex
    \cxset{index german settings}
    \EnableCrossrefs
    \PageIndex
}

\cs_set:Npn \phd@doc@index@off{}%
\ExplSyntaxOff
%    \end{macrocode}
%    \begin{macrocode}
\tcbset{%
  reset@documentation/.style={%
    },
  documentation listing style=tcbdocumentation,
  doc left=2em,
  doc right=0pt,
  doc left indent=-2em,
  doc right indent=0pt,
  doc head=,
  before doc body=,
  after doc body=,
  doc description=,
  doc into index=true,
  doc marginnote=,
  initialize@reset=reset@documentation,
  color option=Option,
  color definition=Definition,
  color hyperlink=Hyperlink,
  index command=\index,%
  index format=pgf,
  index default settings,
  index colorize=false,
  index annotate=true,
  english language,
  keywords bold,
}
\cxset{%
    reset@documentation/.style={%
    index format=pgf,
    english language,
    documentation listing style = tcbdocumentation,
    index default settings,
    color option=Option,
    color definition=Definition,
    color hyperlink=Hyperlink,
    before example=\par\smallskip,
    after example=,
    doc left=0em,
    doc right=0pt,
    doc left indent=-2em,
    doc right indent=0pt,
    doc head=,
    doc description=,
    doc into index=true,
    index colorize = true,
    index annotate= false,
    },
%  initialize@reset=reset@documentation,
}
\cxset{reset@documentation}
%    \end{macrocode}
%
% We set the \docAuxKey{index format}=\docValue{pgf}  and the rest of the keys to the
% |german| settings that are suitable for |doc|.
%
%    \begin{macrocode}
\cxset{index format  =  pgfchapter,
       index actual={=},
       index level = {>},
       index quote = {!},
       index german settings,
       color hyperlink = thelinkcolor,  % links with color palette
       color definition =thelinkcolor,  % links with color palette
       pageshort       = {$\sigma{}$},
   }
%    \end{macrocode}
% \begin{macro}{\main}
% This is defined in doc and is the user command for styling the main page in an index.
%    \begin{macrocode}         
\def\main#1{{\color{red}\uline{#1}}}
%    \end{macrocode}
% \end{macro}

% \section{Miscellaneous doc commands}
% For consistency all commands that typeset their content, as well as index it and perhaps, also reference
% it have the prefix |doc|.
%
% \begin{docCommand} {docFile} { \marg{file name} }
%   Typesets and index a file. 
% \example \docFile{template_html.tpl} 
%
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \@@_print_docfile:n #1 {%
    \begingroup
    \color{thered}
    \ttfamily {\tl_to_str:n{#1}}
    \endgroup
}

\cs_set:Npn \docFile #1
  { 
    \begingroup
      \@@_print_docfile:n {#1}
    \endgroup  
    \index{files:\idx@level\protect\detokenize{#1}\encapchar hyperpage}
  }
%    \end{macrocode}
% \begin{macro}{\docExtension}
%  Extension macro
%    \begin{macrocode}  
\cs_set:Npn \docExtension #1
  {
    \texttt {#1}
    \index{file~extensions\idx@level#1\encapchar hyperpage}
  }  
\let\docextension\docExtension  
\ExplSyntaxOff  
%    \end{macrocode}
%\end{macro}
% 
%\section{Other Indexing functions}
%
% \begin{docCommand}{indexmany}{ \oarg{category} \marg{clist} }
% This function indexes a comma delimited list of items. It is convenient
% when you have paragraphs with a lot of terms.
% 
% \end{docCommand}
%    \begin{macrocode}
 \ExplSyntaxOn
 \DeclareDocumentCommand\indexmany {o m }
 {
   \clist_gset:Nn \indexmany: {#2} 
   \IfValueTF {#1}
    { 
      \clist_map_inline:Nn\indexmany: 
        {
          \index{#1\idx@level##1}\index{##1}
        }
    }
    { 
     \clist_map_inline:Nn\indexmany: 
      {
        \index{##1}
      } 
    }
 }
 \ExplSyntaxOff
%    \end{macrocode}

% \begin{docCommand}{idxlanguage}{\Arg{language name}}
% Typesets and index a lanaguage name. Used in the i18n package.
%
% \example: |idxlanguage{cypriote}| \idxlanguage{cypriote}
%
%    \begin{macrocode}
\DeclareRobustCommand{\idxlanguage}[1]{%
  \index{\string #1 (script)}
  \index{scripts:\idx@level#1\encapchar hyperpage}
  \texttt{#1}\xspace}%
%    \end{macrocode}
% \end{docCommand}
%
% \section{Indexing Symbols}
%
% The commands that are defined in this section can be used to produce almost any symbol
% that is described in the Comprehensive Symbols\footcite{comprehensive}. They are mostly
% variants as described by this publication. Some modernized a bit, others using \latex3 type
% definitions. 
% 
% Some of them are just used for typesetting symbols in tables.
% 
% \begin{docCommand} {indexboth} { \marg{arg1}  \marg{arg2} }
%  Indexes both arguments. 
% \SpecialPackageIndex[monetary symbols]{\textbackslash MoonPha}

% \idxboth{monetary}{symbols}
%\begin{longsymtable}{\TC\ Currency Symbols}
%\idxboth{currency}{symbols}
%\idxboth{monetary}{symbols}
%\index{euro signs}
%\label{tc-currency}
%\begin{longtable}{*4{ll}}
%\K\textbaht          & \K\textdollar$^*$     & \K\textguarani  &\K\textwon \\
%\K\textcent          & \K\textdollar              & \K\textlira     & \K\textyen \\
%\K\textcent            & \K\textdong           & \K\textnaira    \\
%\K\textcolonmonetary & \K\texteuro           & \K\textpeso     \\
%\K\textcurrency      & \K\textflorin         & \K\textsterling$^*$ \\
%\end{longtable}
%\end{longsymtable}
% \end{docCommand}
%    \begin{macrocode} 
\newcommand{\idxboth}[2]{\mbox{}\index{#1 #2}\index{#2\idx@level#1}}
\newcommand{\idxbothbegin}[2]{\mbox{}\index{#1 #2|(}\index{#2\idx@level #1|(}}
\newcommand{\idxbothend}[2]{\mbox{}\index{#1 #2|)}\index{#2\idx@level #1|)}}
\ExplSyntaxOn
\cs_gset_eq:NN \indexboth\idxboth
\cs_gset_eq:NN \indexbothbegin \idxbothbegin
\cs_gset_eq:NN \indexbothend\idxbothend
\ExplSyntaxOff
%    \end{macrocode}
% 
%    
%
% We define a related macro for indexing accents.  In a previous version
% of this file, |\indexaccent| additionally included "see also accents" in
% the index.  This became distracting so I made |\indexaccent| a synonym
% for |\indexcommand| for the time being.  Because punctuation marks can
% be problematic for makeindex, we define an \indexpunct macro that
% sorts its argument under the comparatively innocuous "|\_|".
%
%    \begin{macrocode}
\def\cmd#1{\texttt{\string#1}\indexcommand{#1}}
\newcommand{\cmdI}[2][]{%
  \def\first@arg{#1}%
  \ifx\first@arg\@empty
    \texttt{\string#2}\indexcommand[#2]{#2}%
  \else
    \texttt{\string#2}\indexcommand[#1]{#2}%
  \fi
}
\newcommand{\cmdX}[1]{\cmdI[$\string#1$]{#1}}
\newcommand{\cmdW}[1]{\cmdI[$\string\blackacc{\string#1}$]{#1}}
\newcommand{\cmdIp}[2][]{%
  \def\first@arg{#1}%
  \ifx\first@arg\@empty
    \texttt{\string#2}\indexpunct[#2]{#2}%
  \else
    \texttt{\string#2}\indexpunct[#1]{#2}%
  \fi
}
%    \end{macrocode}
% \begin{docCommand}{sanitize}{\marg{command}}
%  Delimited macro (!!!) that sanitizes macros. Classic TeXBook style. It removes
%  the backslash. Not too sure if the word sanitize is appropriate. Another
% approach is to gobble the backslash. See \refCom{cs}.
% \end{docCommand}
%    \begin{macrocode}
\begingroup
 \catcode`\|=0
 \catcode`\\=12
 |gdef|sanitize#1#2!!!{%
   |ifx#1\%
     #2%
   |else
     #1#2%
   |fi
}
|endgroup
%    \end{macrocode}
%
%  \begin{docCommand}{indexcommand}{\oarg{}\marg{command} }
%    Index a \emph{symbol}, which may or may not begin with a \emph{backslash}.  (Is
%  there a better way to do this?)  Also, if symbol is given as an
%    optional argument is given, typeset that symbol in the index, as well
% \end{docCommand}
%
%  
%    \begin{macrocode}
 \ExplSyntaxOn
\NewDocumentCommand \indexcommand { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    %\def\first@arg{#1}%
    \IfNoValueTF{#1}
    {
       \exp_after:wN
          \index {
             \sanitized
             \idx@actual
             {\expandafter
             \phdIndexPrintCs{\sanitized}}
             \encapchar~hyperpage
             }%
    }
    {
       \expandafter
         \index\expandafter{\sanitized\idx@actual{\string\verb+\string#2+ (#1)}\encapchar~hyperpage}%
    }
  }
 \ExplSyntaxOff

%    \end{macrocode}
%
% \subsection{Indexing archaic scripts. }
%  
% \begin{docCommand} {indexcypriot} { \oarg{arg1} \marg{arg2} }
%    Index helper function for indexing Cypriot script. Only used
%    in the phd documentation.
% \end{docCommand}
%
%    \begin{macrocode}
\NewDocumentCommand \indexcypriot { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Cypriot\idx@level\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Cypriot>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode}  
%
% \begin{docCommand} {indexstaves} { \oarg{arg1} \marg{arg2} }
%    Index helper function for indexing Icelandic staves. Only used
%    in the phd documentation.
% \end{docCommand}
%
%    \begin{macrocode}
\NewDocumentCommand \indexstaves { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Staves>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Staves>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 
% 
%  
% \begin{docCommand} {indexlinearb} { \oarg{typesetting command(s)} \marg{command} }
%    Index helper function for indexing the linearb script. Only used
%    in the phd documentation for scripts. 
%    In .idx it writes
%    \begin{verbatim}
%    \indexentry{Linear B >BPamphora=\phdIndexPrint {BPamphora} (\textlinb  {\BPamphora })|hyperpage}{63}
%    \end{verbatim}
% \end{docCommand}
%  \phdIndexPrintCs{\textlinb{\BPamphora}}
%    \begin{macrocode}

\newrobustcmd\phdIndexPrintCs[1]{{%
  \catcode`\_=12\relax\catcode`\@11\relax\ttfamily\char`\\\scantokens{#1}\unskip}}
% 
% 
\NewDocumentCommand \indexlinearb { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \index{Linear B\idx@level\string#1\idx@actual
        {\string\verb+\string#2+}\encapchar hyperpage}
    }
    { % index
         \index{Linear B
         \idx@level
         \string #1
         \idx@actual 
         {\phdIndexPrintCs{\sanitized} (#1)}\encapchar hyperpage}%
       % typeset        
       \string#2 & (#1)
    }
  }
%    \end{macrocode} 
% 
%\index{Linear B}
%\index{arrows}
%\index{animals}
%\label{linearB-objs}
%\begin{longtable}{*3{ll@{\qquad}}ll}
%\indexlinearb[\textlinb{\BPamphora}]\BPamphora       & \indexlinearb[\textlinb{\BPchassis}]\BPchassis       & \indexlinearb[\textlinb{\BPman}]\BPman               & \indexlinearb[\textlinb{\BPwheat}]\BPwheat           \\
%\indexlinearb[\textlinb{\BParrow}]\BParrow           & \indexlinearb[\textlinb{\BPcloth}]\BPcloth           & \indexlinearb[\textlinb{\BPnanny}]\BPnanny           & \indexlinearb[\textlinb{\BPwheel}]\BPwheel           \\
%\indexlinearb[\textlinb{\BPbarley}]\BPbarley         & \indexlinearb[\textlinb{\BPcow}]\BPcow               & \indexlinearb[\textlinb{\BPolive}]\BPolive           & \indexlinearb[\textlinb{\BPwine}]\BPwine             \\
%\indexlinearb[\textlinb{\BPbilly}]\BPbilly           & \indexlinearb[\textlinb{\BPcup}]\BPcup               & \indexlinearb[\textlinb{\BPox}]\BPox                 & \indexlinearb[\textlinb{\BPwineiih}]\BPwineiih       \\
%\indexlinearb[\textlinb{\BPboar}]\BPboar             & \indexlinearb[\textlinb{\BPewe}]\BPewe               & \indexlinearb[\textlinb{\BPpig}]\BPpig               & \indexlinearb[\textlinb{\BPwineiiih}]\BPwineiiih     \\
%\indexlinearb[\textlinb{\BPbronze}]\BPbronze         & \indexlinearb[\textlinb{\BPfoal}]\BPfoal             & \indexlinearb[\textlinb{\BPram}]\BPram               & \indexlinearb[\textlinb{\BPwineivh}]\BPwineivh       \\
%\indexlinearb[\textlinb{\BPbull}]\BPbull             & \indexlinearb[\textlinb{\BPgoat}]\BPgoat             & \indexlinearb[\textlinb{\BPsheep}]\BPsheep           & \indexlinearb[\textlinb{\BPwoman}]\BPwoman           \\
%\indexlinearb[\textlinb{\BPcauldroni}]\BPcauldroni   & \indexlinearb[\textlinb{\BPgoblet}]\BPgoblet         & \indexlinearb[\textlinb{\BPsow}]\BPsow               & \indexlinearb[\textlinb{\BPwool}]\BPwool             \\
%\indexlinearb[\textlinb{\BPcauldronii}]\BPcauldronii & \indexlinearb[\textlinb{\BPgold}]\BPgold             & \indexlinearb[\textlinb{\BPspear}]\BPspear           &                                           \\
%\indexlinearb[\textlinb{\BPchariot}]\BPchariot       & \indexlinearb[\textlinb{\BPhorse}]\BPhorse           & \indexlinearb[\textlinb{\BPsword}]\BPsword           &                                           \\
%\end{longtable}
%
%
% \begin{docCommand} {indexugar} { \oarg{arg1} \marg{arg2} }
%    Index helper function for indexing Ugaritic scripts. Only used
%    in the phd documentation.
% \end{docCommand}
% 
%    \begin{macrocode}
\NewDocumentCommand \indexugar { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{Ugarite>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{Ugarite>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 

% \begin{docCommand} {indexvarpersian} { \oarg{arg1} \marg{arg2} }
%   Indexing and doc command for var Persian tables.
% \end{docCommand}
%
%    \begin{macrocode}
\NewDocumentCommand \indexvarpersian { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{var Persian>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{var Persian>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 
%
% \begin{docCommand} {indexsoutharabian} {\oarg{}\marg{} }
%    Indexing and doc command for symbols tables.
%   \SpecialMainIndex{\indexsoutharabian}
% \end{docCommand}
%
%    \begin{macrocode}
\NewDocumentCommand \indexsoutharabian { o m }  
  {
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \IfNoValueTF{#1}
    {
       \expandafter\index\expandafter{South Arabian>\sanitized=\string\verb+\string#2+}%
    }
    {
       \expandafter\index\expandafter{South Arabian>\sanitized=\string\verb+\string#2+ (#1)}%
    }
  }
%    \end{macrocode} 
%
% \subsection{Indexing mathematical symbols}
%
% The currently available fonts 
% The following indexing commands are auxiliary commands to
% index unicode symbols for maths. 
% \tcbdocmarginnote{26-06-2015}
%    \begin{macrocode}
\NewDocumentCommand \indexmathcmd { o m }  
  { \def\cmd@to@cs#1#2{\char\number`#2\relax}
    \IfNoValueTF{#1}
    {
       \index{\string #2\idx@actual{\string\verb+\string#2+
       ($#2$)}\encapchar hyperpage}
       % put command also
      \index{\string#1\idx@actual{\string\verb+\string#2+ ($\string#2$)*}\encapchar hyperpage}
    }
    {
      % with index level
      \index{#1\idx@level\protect\detokenize{#2}
            \idx@actual{\protect\detokenize{#2}($#2$)}\encapchar hyperpage}%
      % command alone an symbol in parentheses      
      \index{\cmd@to@cs#2\idx@actual{\string\verb+\string#2+ ($\string#2$)}\encapchar hyperpage}%
    }
  }
%    \end{macrocode} 
%
% \begin{docCommand}{indexaccent}{}
%   Syntactic sugar identical to \refCmd{indexcommand}
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset_eq:NN \indexaccent\indexcommand
\cs_new:Npn \CLSLpipe {|}
\ExplSyntaxOff  
%    \end{macrocode}
%   
%
% \begin{docCommand} {indexpunct} { \oarg {arg1} \marg{arg2}} 
%   Indexing punctuation marks for latin scripts.
% \end{docCommand}
%
%    \begin{macrocode}
  \newcommand{\indexpunct}[2][]{%
    \def\first@arg{#1}%
    \def\second@arg{#2}%
    \ifx\first@arg\@empty
      \ifx\second@arg\CLSLpipe
        \index{_=\magicvertname}%
      \else
        \index{_=\string\verb+\string#2+}%
      \fi
    \else
      \ifx\second@arg\CLSLpipe
        \index{_=\magicvertname{} (#1)}%
      \else
        \index{_=\string\verb+\string#2+ (#1)}%
      \fi
    \fi
  }
%    \end{macrocode}
% 
%
%    \begin{macrocode}
%\usepackage{longdiv}
\newcommand\FC{\pkgname{fc}}
\newcommand\VIET{\pkgname{vietnam}}
%\newcommand\ABX{\pkgname{mathabx}}
%    \end{macrocode}
%

% \begin{docCommand} {incsyms} { \meta{void}}
%  We define an integer counter \docCounter{totalsymbols} to keep track of all the symbols we load
%  and list.\footnote{Unicode characters are counted separately and are dealt with under the phd-scriptsmanager package.}
%  These are symbols which can be produced using command sequences.
% \end{docCommand}
%
% Define a counter to keep track of how many symbols are listed.
% Output this counter to the log file at the end of each run.
% Define |\prevtotalsymbols| to be the total number of symbols from
% the previous run.
%   
%    \begin{macrocode}
\ExplSyntaxOn
  \int_new:c {totalsymbols}
  \cs_new:Npn \incsyms { \int_gincr:c {totalsymbols} }
  \cs_new:Npn \thetotalsymbols {\int_use:c {totalsymbols} }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand}{graybox} { \meta{void}}
% \end{docCommand}
%    \begin{macrocode}
\newcommand*{\graybox}{\textcolor{thecodebackground}{\rule[-\adp]{\awd}{\aht}}}
 
% Define |\blackacc| to display an accented box, given an accent command.
% Define |\blackacchack| to display an accented "a" and then black out
% the "a".
\newlength\awd
\newlength\aht
\newlength\adp
\settowidth{\awd}{\normalfont a}
\settoheight{\aht}{\normalfont a}
\settodepth{\adp}{\normalfont a}
\advance\adp by 0.06pt    % In Computer Modern, "a" extends slightly below its bounding box.
\advance\aht by \adp


\gdef\blackacchack#1{#1a\llap{\graybox}}
\gdef\blackacc#1{#1{\graybox}}
\gdef\blackacctwo#1{#1{\graybox}{\graybox}}
%    \end{macrocode}
% 
% 
%
% Symbol+verbatim for various types of symbols
%    \begin{macrocode}
\def\E#1{%
  \begingroup
    \lccode`|=`\\
    \def\EStruename{ES#1T}
    \lowercase{\incsyms\index{#1=\string\verb+\string|#1+ (\string|\EStruename)}}
  \endgroup
  \csname ES#1T\endcsname 
  & \csname ES#1D\endcsname 
  &
  \ttfamily\expandafter\string\csname#1\endcsname
}
%    \end{macrocode}
%    
%  
% 
% These commands are here to be able to index these symbols for the index and to typeset
% them in the symbols appendix.
% 
% \begin{docCommand} {Kcyp} {\oarg{text cmd} \marg{symbol command}}
%   Indexes and prints the Cypriot archaic font symbols.
% 
% \example |\Kcyp[\textcypr{\Ca}]\Ca|
%
% 
% \end{docCommand}
%    \begin{macrocode}
\def\Kcyp@opt@arg[#1]#2{\incsyms\indexcypriot[\textcypr{#1}]{#2}#1 &\ttfamily\string#2}
\def\Kcyp@no@opt@arg#1{\incsyms\indexcypriot[\textcypr{#1}]{#1}#1 &\ttfamily\string#1}
\def\Kcyp{\@ifnextchar[{\Kcyp@opt@arg}{\Kcyp@no@opt@arg}}
%    \end{macrocode}
%    
% \begin{docCommand} {Kstav} { \oarg{cmd} \marg{stave cmd}}      
%   Indexes and prints an Icelandic  stave. 
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn

\cs_set:Npn \Kstav_opt_arg [#1]#2
  {
    \incsyms\indexstaves[#1]{#2}# 1 &\ttfamily\string#2
  }
 
\cs_set:Npn \Kstav_no_opt_arg #1
  {
    \incsyms\indexstaves[#1]{#1}#1 &\ttfamily\string#1
  }

\NewDocumentCommand\Kstav {o m} {
  \IfNoValueTF {#1} 
    {
      \Kstav_no_opt_arg {#2}
    }
    {
      \Kstav_opt_arg [#1] {#2}
    }
}
\ExplSyntaxOff
%    \end{macrocode}
%    
% \begin{docCommand}{K} { \oarg{} \marg{cmd} }    
%    Adds a symbol cmd to a table and the index.
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \K@opt@arg#1#2 
   {
      \incsyms
      \indexcommand[#1]{#2}#1 &\ttfamily\string#2 
   }
   
\cs_set:Npn \K@no@opt@arg#1
  {
    \incsyms
    \indexcommand[#1]{#1}#1 & \ttfamily\string#1 
  }
%    \end{macrocode}
%
% \begin{docCommand}{K}{\oarg{symbol command} \marg{symbol command}} 
%     Command used to typeset a table of symbols such as textsymbols. The mandatory argument
%     takes a command such as |texteuro|, typesets the symbol first and then the command. It also adds it to the 
%    index. It is the most common command and hence we keep it short. It was originally defined in Comprehensive \footcite{comprehensive}.
%  It also increases the counter \docCounter{incsyms}. The optional argument has an alternative symbol.
%  \example |\K\Square| 
%  \begin{tabular}{ll}\K\Square\end{tabular}
%
% \end{docCommand} 
%    \begin{macrocode}
\NewDocumentCommand {\K} { o m } 
{
  \IfNoValueTF {#1} { \K@no@opt@arg {#2} } {\K@opt@arg {#1}{#2}}
}
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{symtable}{\latexe{} Escapable ``Special'' Characters}
%\index{special characters=``special'' characters}
%\index{escapable characters}
%\index{underline}
%\label{special-escapable}
%\begin{tabular}{*6{ll@{\qqquad}}ll}
%\K\$   & \K\%   & \K\_$\,^*$  & \Kp\}  & \K\&   & \K\#   & \Kp\{   \\
%\end{tabular}
%\end{symtable}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \Kp #1 
   {
       \incsyms
       \indexpunct[$#1$]{#1}#1 &\footnotesize\ttfamily\string#1
    }
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
%\begin{symtable}[EDICE]{\EDICE\ Dice}
%\index{dice}
%\idxboth{game-related}{symbols}
%\label{edice}
%\begin{tabular}{ll@{\qquad}ll@{\qquad}ll}
%  \KED[\allepsdice][\epsdice][\epsdice{1}]\epsdice\verb|{1}| &
%  \KED[\allepsdice][\epsdice][\epsdice{3}]\epsdice\verb|{3}| &
%  \KED[\allepsdice][\epsdice][\epsdice{5}]\epsdice\verb|{5}| \\
%  \KED[\allepsdice][\epsdice][\epsdice{2}]\epsdice\verb|{2}| &
%  \KED[\allepsdice][\epsdice][\epsdice{4}]\epsdice\verb|{4}| &
%  \KED[\allepsdice][\epsdice][\epsdice{6}]\epsdice\verb|{6}| \\
%\end{tabular}
%\end{symtable}
%\newif\ifEDICE
%\newcommand\EDICE{\pkgname{epsdice}}
%\IfFileExists{epsdice.sty}
%  {\EDICEtrue
%   \usepackage{epsdice}
%   \let\origepsdice=\epsdice
%   \DeclareRobustCommand{\epsdice}[1]{\origepsdice{##1}}
%   \DeclareRobustCommand{\allepsdice}{%
%     \epsdice{1}%
%     \epsdice{2}%
%     \epsdice{3}%
%     \epsdice{4}%
%     \epsdice{5}%
%     \epsdice{6}%
%   }
%  }
%  {}
%    \end{macrocode}  
%
%
% The below are faked symbols, based on Scott Pakin's |fakedozenal.sty|. We include this file
% with the |phd| bundle distribution. With LuaLaTeX this can be included. This is a rather
% strange package with probably very few users and use. It has intrigued me and I include it
% here.\footnote{See the website of the dozenal society to understand what it is all about.
% \protect\url{http://www.dozenal.org/index.html}}
%
%
%    \begin{macrocode}
% Load a faked version of a package.
%\newcommand{\fakeusepackage}[1]{%
% \let\origProvidesPackage=\ProvidesPackage
% \def\ProvidesPackage##1[##2]{\origProvidesPackage{##1}[##2]\endinput}
% \usepackage{#1}
% \let\ProvidesPackage=\origProvidesPackage
% \usepackage{fake#1}
%}
%
%\newif\ifDOZ
%\newcommand\DOZ{\pkgname{dozenal}}
%\IfFileExists{dozenal.sty}
%  {\DOZtrue
%   \if\luatex
%      \RequirePackage[nocounters,typeone]{dozenal}
%    \else  
%     \fakeusepackage{dozenal}
%   \fi  
%   \DeclareRobustCommand{\DOZx}{\doz{X}}
%   \DeclareRobustCommand{\DOZe}{\doz{E}}
%   \DeclareRobustCommand{\alldoztallies}{%
%     \doz{1}~%
%     \doz{2}~%
%     \doz{3}~%
%     \doz{4}~%
%     \doz{5}~%
%     \doz{6}%
%   }
%  }
%{}  
%    \end{macrocode}
% \begin{docCommand}{KED}{\oarg{}\oarg{2}\oarg{3}\oarg{4}}
%  Documentation macros for tables showing dozenal symbols. Rarely used.
% \end{docCommand}
%    \begin{macrocode}
\def\KED[#1][#2][#3]#4 {%
   \incsyms\indexcommand[#1]{#2}#3 &\small\ttfamily\string#4%
}

% feyn provides yet another math font for which we have no room.
% Fortunately, it's relatively easy to define all of its symbols in
% terms of a text font.


\def\Kfeyn#1{\incsyms\indexcommand[\string\feyn{#1}]{\feyn{#1}}\feyn{#1} &\small\ttfamily\string\feyn\string{\string#1\string}}
%    \end{macrocode}

%
%    \begin{macrocode}
% We have no math alphabets left so we trick svrsymbols.sty into defining
% all of its characters in text mode.
%\newif\ifSVR
%\newcommand\SVR{\pkgname{svrsymbols}}
%\makeatletter
%\IfFileExists{svrsymbols.sty}
%  {\SVRtrue
%   \let\origDeclareSymbolFont=\DeclareSymbolFont
%   \let\origDeclareMathSymbol=\DeclareMathSymbol
%   \let\origSetSymbolFont=\SetSymbolFont
%   \renewcommand{\DeclareSymbolFont}[5]{}
%   \renewcommand{\SetSymbolFont}[6]{}
%   \renewcommand{\DeclareMathSymbol}[4]{%
%     \let##1=\relax%  \photon and \antiproton are defined repeatedly.
%     \newcommand{##1}{{\usefont{OML}{svr}{m}{it}\char##4}}%
%   }
%   \usepackage{svrsymbols}
%   \let\DeclareSymbolFont=\origDeclareSymbolFont
%   \let\DeclareMathSymbol=\origDeclareMathSymbol
%   \let\SetSymbolFont=\origSetSymbolFont
%  }
%  {}
%%   
%%
%  \newenvironment{longsymtable}[2][true]{%
%  \expandafter\global\expandafter\let
%    \expandafter\ifshowsymtable\csname if#1\endcsname
%  \ifshowsymtable
%    \mbox{}%
%    \Needspace*{13\baselineskip}%
%    \mbox{}%
%    \begin{center}%
%    \phantomsection
%    \refstepcounter{table}%
%%
%    % Inhibit longtable's implicit increment of the table counter.
%    \let\refstepcounter=\@gobble
%    \let\LT@array=\origLT@array
%    \let\LT@start=\origLT@start
%%
%    \addcontentsline{toc}{subsection}{%
%      \protect\numberline{\tablename~\thetable:}{#2}}%
%    \@makecaption{\fnum@table}{#2}%
%    \gdef\lt@indexed{}%
%    \let\next=\relax
%  \else
%    % The following was taken verbatim from verbatim.sty.
%    \let\do\@makeother\dospecials\catcode`\^^M\active
%    \let\verbatim@startline\relax
%    \let\verbatim@addtoline\@gobble
%    \let\verbatim@processline\relax
%    \let\verbatim@finish\relax
%    \let\next=\verbatim@
%  \fi
%  \next
%}{%
%  \ifshowsymtable
%    \end{center}
%    \let\@elt=\index\lt@indexed  % Close our index ranges.
%    \gdef\lt@indexed{}%
%    \vskip 8ex minus 2ex
%  \fi
%}
%    \end{macrocode}
%    \begin{macrocode}
%\begin{longsymtable}[SVR]{\SVR\ Physics Ideograms}
%\ltindex{particle-physics symbols}
%\ltindex{symbols>particle physics}
%\ltindex{fermions}
%\ltindex{subatomic particles}
%\ltindex{photons}
%\label{svrsymbols}
%\begin{longtable}{*3{ll}}
%\multicolumn{6}{l}{\small\textit{(continued from previous page)}} \\[3ex]
%\endhead
%\endfirsthead
%\\[3ex]
%\multicolumn{6}{r}{\small\textit{(continued on next page)}}
%\endfoot
%\endlastfoot
%\K\adsorbate      & \K\experimentalsym & \K\protein        \\
%\K\adsorbent      & \K\externalsym     & \K\proton         \\
%\K\antimuon       & \K\fermiDistrib    & \K\quadrupole     \\
%\K\antineutrino   & \K\fermion         & \K\quark          \\
%\K\antineutron    & \K\Gluon           & \K\quarkb         \\
%\K\antiproton     & \K\graphene        & \K\quarkc         \\
%\K\antiquark      & \K\graviton        & \K\quarkd         \\
%\K\antiquarkb     & \K\hbond           & \K\quarks         \\
%\K\antiquarkc     & \K\Higgsboson      & \K\quarkt         \\
%\K\antiquarkd     & \K\hole            & \K\quarku         \\
%\K\antiquarks     & \K\interaction     & \K\reference      \\
%\K\antiquarkt     & \K\internalsym     & \K\resistivity    \\
%\K\antiquarku     & \K\ion             & \K\rhomesonminus  \\
%\K\anyon          & \K\ionicbond       & \K\rhomesonnull   \\
%\K\assumption     & \K\Jpsimeson       & \K\rhomesonplus   \\
%\K\atom           & \K\Kaonminus       & \K\solid          \\
%\K\bigassumption  & \K\Kaonnull        & \K\spin           \\
%\K\Bigassumption  & \K\Kaonplus        & \K\spindown       \\
%\K\biggassumption & \K\magnon          & \K\spinup         \\
%\K\Bmesonminus    & \K\maxwellDistrib  & \K\surface        \\
%\K\Bmesonnull     & \K\metalbond       & \K\svrexample     \\
%\K\Bmesonplus     & \K\method          & \K\svrphoton      \\
%\K\bond           & \K\muon            & \K\tachyon        \\
%\K\boseDistrib    & \K\neutrino        & \K\tauleptonminus \\
%\K\boson          & \K\neutron         & \K\tauleptonplus  \\
%\K\conductivity   & \K\nucleus         & \K\Tmesonminus    \\
%\K\covbond        & \K\orbit           & \K\Tmesonnull     \\
%\K\dipole         & \K\phimeson        & \K\Tmesonplus     \\
%\K\Dmesonminus    & \K\phimesonnull    & \K\triplecovbond  \\
%\K\Dmesonnull     & \K\phonon          & \K\Upsilonmeson   \\
%\K\Dmesonplus     & \K\pionminus       & \K\varphoton      \\
%\K\doublecovbond  & \K\pionnull        & \K\water          \\
%\K\electron       & \K\pionplus        & \K\Wboson         \\
%\K\errorsym       & \K\plasmon         & \K\Wbosonminus    \\
%\K\etameson       & \K\polariton       & \K\Wbosonplus     \\
%\K\etamesonprime  & \K\polaron         & \K\Zboson         \\
%\K\exciton        & \K\positron        &                   \\
%\end{longtable}
%\end{longsymtable}
%    \end{macrocode}
%%    \begin{macrocode}  
%\def\Kpig#1{\incsyms\index{pigpenfont #1=\string\verb+{\string\pigpenfont\space#1}+\space(\string\CLSLpig{#1})}\CLSLpig{#1} &\ttfamily\string{\string\pigpenfont\space\string#1\string}}
%    
%
%  \begin{docCommand} {Ks} { \marg{cmd} }
%    \cs{Ks} index and doc command, asterisk for note that is not available in |OT1|, as
%    superscript.
%  \end{docCommand}
%
%  \subsection{Arrows}
%%
% We use a faked version of old-arrows.sty provide by Pakin so as not to waste a math alphabet, if not
% using LuaLaTeX. Under the latest versions of Lua and LaTeX we load it directly.
%    \begin{macrocode}
%\newif\ifARR
%\newcommand\ARR{\pkgname{old-arrows}}
%\IfFileExists{old-arrows.sty}
%  {\ARRtrue\usepackage[old]{old-arrows}}
%  {}

%  
%
%%\index{arrows}
%%\label{var-arrows}
%%\begin{tabular}{*3{ll}}
%%\X\vardownarrow\downarrow                   &  \X\varlongleftrightarrow \longleftrightarrow &  \X\varnwarrow \nwarrow         \\
%% \X\varhookleftarrow \hookleftarrow           &  \X\varlongmapsfrom \longmapsfrom$^*$         &  \X\varrightarrow \rightarrow   \\
%% \X\varhookrightarrow \hookrightarrow         &  \X\varlongmapsto \longmapsto                 &  \X\varsearrow \searrow         \\
%% \X\varleftarrow \leftarrow                   &  \X\varlongrightarrow \longrightarrow         &  \X\varswarrow \swarrow         \\
%% \X\varleftrightarrow \leftrightarrow         &  \X\varmapsfrom \mapsfrom$^*$                 &  \X\varuparrow \uparrow         \\
%% \X\varlonghookrightarrow \longhookrightarrow &  \X\varmapsto \mapsto                         &  \X\varupdownarrow \updownarrow \\
%% \X\varlongleftarrow \longleftarrow           &  \X\varnearrow \nearrow                       &                                 \\
%%\end{tabular}

%    \end{macrocode}
%    \begin{macrocode}
\ExplSyntaxOn
  \cs_set:Npn \Ks #1
    {
      \incsyms
      \indexcommand[\string\encone{\string#1}] {#1}
      { \encone{#1} }  & \ttfamily\string#1$^*$
    }
\ExplSyntaxOff
%    \end{macrocode}
%
% This macro is also from the comprehensive and takes
% the symbol command as its only argument. It provides
% |T1| encoding and also adds the command to the index.
% 
%    \begin{macrocode}
\ExplSyntaxOn   
\cs_set:Npn \Kt #1
  {
    \incsyms
    \indexcommand[\string\encone{\string#1}] {#1}
    {\encone{#1}} & \ttfamily \string #1
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
%  \begin{docCommand} {Kv} { \marg{cmd} }
%    T5 encoding
%  \end{docCommand}
%
%    \begin{macrocode}
\def\Kv#1{\incsyms\indexcommand[\string\encfive{\string#1}]{#1}{\encfive{#1}} &\ttfamily\string#1}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\Kgr@opt@arg[#1]#2{\incsyms\indexcommand[\string\encgreek{\string#1}]{#2}{\encgreek{#1}} &\ttfamily\string#2}
  \def\Kgr@no@opt@arg#1{\incsyms\indexcommand[\string\encgreek{\string#1}]{#1}{\encgreek{#1}} &\ttfamily\string#1}
 
\def\Kgr{\@ifnextchar[{\Kgr@opt@arg}{\Kgr@no@opt@arg}}
\def\KN[#1][#2]#3{\incsyms\indexcommand[\string#1]{#3} #1 & #2 & \ttfamily\string#3}
\def\KNbig[#1][#2]#3{\incsyms\indexcommand[\string#2]{#3} #1 & #2 & \ttfamily\string#3}

\def\Knoidx#1{\incsyms#1 &\ttfamily\string#1}
%    \end{macrocode}
%
% \begin{docCommand}{N} {}
%   Big delimiters auxiliary command for doc and index. 
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \N@opt@arg #1 #2 
  {
    \incsyms
    \indexcommand[$\string#1$]{#2}
    $#1$ & $\Big#1$ &\footnotesize\ttfamily\string#2
  }

\cs_set:Npn \N@no@opt@arg#1 
  {
    \incsyms\indexcommand[$\string#1$]{#1}
    $#1$ & $\Big#1$ &\ttfamily\string#1
  }

\NewDocumentCommand {\N} { o m } 
  {
    \IfNoValueTF {#1} 
      { \N@no@opt@arg {#2}  }
      { \N@opt@arg {#1}{#2} }
  }

\ExplSyntaxOff  
%    \end{macrocode}
% \begin{docCommand}{Nn}{\oarg{}\marg{}}  
% \end{docCommand}
%    \begin{macrocode}  
  \def\Nn[#1]#2{%
    \incsyms\indexcommand[$\string\nathdouble\string#1$]{#2}%
    $\nathdouble#1$ & $\nathdouble{\Big#1}$ & \ttfamily\string#2%
 }
    
  \def\Nnt#1[#2]#3{%
    \incsyms\indexcommand{\triple}%
    $\nathtriple#2$ & $\nathtriple{\Big#2}$ &
    \ttfamily\expandafter\string\csname#1triple\endcsname\string#3}
  \def\Np@opt@args[#1]{\@ifnextchar[{\Np@two@opt@args[#1]}{\Np@one@opt@arg[#1]}}
  \def\Np@two@opt@args[#1][#2]#3{\incsyms\index{_=\string#2{} ($\string#1$)}$#1$ & $\Big#1$ &\ttfamily\string#3}
  \def\Np@one@opt@arg[#1]#2{\incsyms\indexpunct[$\string#1$]{#2}$#1$ & $\Big#1$ &\ttfamily\string#2}
  \def\Np@no@opt@args#1{\incsyms\indexpunct[$\string#1$]{#1}$#1$ & $\Big#1$ &\ttfamily\string#1}
  \def\Np{\@ifnextchar[{\Np@opt@args}{\Np@no@opt@args}}
  \def\Nbig[#1]#2{\incsyms\indexcommand[$\string\Big\string#1$]{#2}$#1$ & $\Big#1$ &\ttfamily\string#2}
%    \end{macrocode}
%
%  \begin{docCommand} {Q} {}
%    Used to typeset accents in a symbols table. Note it adds the (\&). First we define
% auxiliary functions. 
% \index{accents}%
% \index{accents>acute=acute (\blackacchack\')}%   
% \index{accents>arc=arc (\blackacchack\newtie)}%
% \index{accents>breve=breve (\blackacchack\u)}% 
% \index{accents>caron=caron (\blackacchack\v)}%
%  \end{docCommand}
% \begin{macro}{\Q@opt@arg}
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_set:Npn \Q@opt@arg#1#2
  {
    \incsyms\indexaccent[\string\blackacchack{\string#1}]{#2}#1{A}#1{a} &
           \ttfamily\string#2\string{A\string}\string#2\string{a\string}
  }
  
\cs_set:Npn \Q@no@opt@arg#1
  {
    \incsyms\indexaccent[\protect\blackacchack{\string#1}]{#1}#1{A}#1{a} &
    \ttfamily\string#1\string{A\string}\string#1\string{a\string}
  }
           
\NewDocumentCommand {\Q} { o m }
  {
    \IfNoValueTF {#1}
      { \Q@no@opt@arg {#2} }
      { \Q@opt@arg    {#1}{#2} }
  }
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
%\newif\ifHARM
%\newcommand\HARM{\pkgname{harmony}}
%\IfFileExists{harmony.sty}
%  {\HARMtrue
%   \let\orignewcommand=\newcommand
%   \let\newcommand=\DeclareRobustCommand
%   %\savesymbol{HH}
%   \usepackage{harmony}
%   %\restoresymbol{harm}{HH}
%   \let\newcommand=\orignewcommand
%  }
%  {}
%    \end{macrocode}

%
% \begin{docCommand}{Qc}{\marg{accent symbol command}}
%   Typesets and indexes accents on two letters (A) and (a), as two tabular cells.
%   Increases the \docCounter{incsyms} counter.
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \Qc#1
  {
    \incsyms
    \indexaccent[\string\blackacc{\string#1}]{#1} #1 {A} #1{a}  &
    \ttfamily
         \string#1
         \token_to_str:N {
            A
         \token_to_str:N }
         \token_to_str:N #1
         \token_to_str:N {
           a
         \token_to_str:N }
  }
\ExplSyntaxOff
%    \end{macrocode}
% \magicequal  and \magicequalname
% \begin{docCommand}{Qe}{\meta{arg1}\meta{arg2}\meta{arg3}}
%    Limited use command to typeset and index |magic symbols|, that is symbols
%    that might confuse MakeIndex and that they are escaped. It is easier to use
%   |text commands|.
%   \example |\Qe[\magicequal][\magicequalname]\=| produces 
%      \begin{tabular}{ll}
%      \Qe[\magicequal][\magicequalname]\=\\
%      \end{tabular}
% 
% \end{docCommand}
%    \begin{macrocode}         
\def\Qe[#1][#2]#3{%
  \incsyms
  \incsyms
  \index{_=\string#2{} (\string\blackacchack{\string#1})}%
  #3{A}#3{a} &
  \ttfamily\string#3\string{A\string}\string#3\string{a\string}}
%    \end{macrocode}
%
%    \begin{macrocode}  
\def\Qt#1{\incsyms\indexaccent[\string\encone{\string\blackacc{\string#1}}]{#1}{\encone{#1{A}#1{a}}} &
          \ttfamily\string#1\string{A\string}\string#1\string{a\string}}
%    \end{macrocode}
%    \begin{macrocode}
\def\Qpc#1#2{\incsyms\indexcommand{#2}{\raisebox{1pt}{\tiny[#1]}} &
             \ttfamily\string#2\string{A\string}\string#2\string{a\string}}
%    \end{macrocode}
%
%    \begin{macrocode}             
\def\Qpfc[#1]#2{\incsyms\indexaccent[\string\encfour{\string\blackacchack{\string#1}}]{#2}\encfour{#1{A}#1{a}} &
           \ttfamily\string#2\string{A\string}\string#2\string{a\string}}
%    \end{macrocode}
%    \begin{macrocode}
\newif\ifFC\FCfalse
\ifFC
  \def\Qiv#1#2{\incsyms\indexaccent[\string\encfour{\string\blackacchack{\string#1}}]{#1}\encfour{#1{A}#1{a}} &
               \ttfamily\string#1\string{A\string}\string#1\string{a\string}$^#2$}
               
  \def\QivBAR#1{\incsyms\index{_=\string\magicVertname{}
                (\string\encfour{\string\blackacchack{\string\FCbar}})}
                \encfour{\FCbar{A}\FCbar{a}} &
                \ttfamily\string\|\string{A\string}\string\|\string{a\string}$^#1$}
\else
  \def\Qiv#1#2{\Qpc{T4}{#1}$^#2$}
  \def\QivBAR#1{\Qpc{T4}{\|}$^#1$}
\fi
%    \end{macrocode}
%    \begin{macrocode}
\newif\ifVIET\VIETfalse
\ifVIET
  \def\Qv#1#2{\incsyms\indexaccent[\string\encfive{\string\blackacchack{\string#1}}]{#1}{\encfive{#1{A}#1{a}}} &
              \ttfamily\string#1\string{A\string}\string#1\string{a\string}$^#2$}
\else
  \def\Qv#1#2{\Qpc{T5}{#1}$^#2$}\def\Qv#1#2{Err}%TODO
\fi
%    \end{macrocode}
%
% \begin{docCommand}{R} { \oarg{ams cmd} \marg {cmd} }
%   Used for variable size math operators
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \R@opt@arg#1#2
  {
    \incsyms
    \indexcommand[$\string#1$]{#2}
     $#1$ & $\displaystyle#1$ &\ttfamily\string#2
  }
 \cs_set:Npn \R@no@opt@arg#1
  {
    \incsyms
    \indexcommand[$\string#1$]{#1}
    $#1$ & $\displaystyle#1$ &\ttfamily\string#1
  }
\NewDocumentCommand {\R} { o m}
  {
    \IfNoValueTF {#1}
      { \R@no@opt@arg {#2}      }
      { \R@opt@arg    {#1} {#2} }
  }
\ExplSyntaxOff
%% T commands
%    \end{macrocode}
%
%
%\idxboth{variable-sized}{symbols}
%\index{integrals}
%\label{ams-large}
% \begingroup
%\renewcommand{\arraystretch}{2.5}  % Keep tall symbols from touching.
%\begin{longtable}{l@{$\:$}ll@{\qquad}l@{$\:$}ll}
%\R[\iint]\iint     & \R[\iiint]\iiint       \\
%\R[\iiiint]\iiiint & \R[\idotsint]\idotsint \\
%\end{longtable}
%
% \endgroup
%
%
% \begin{docCommand}{indexDing} { \marg{ ding symbol number }}
%   Auxiliary function to index and print in a table ding symbols. originally
%   from Comprehensive.
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\newcommand \indexDing [1] 
  {
    \incsyms
    \indexcommand{\ding}
    \ding{#1} & 
    \footnotesize\ttfamily\string\ding \string{#1\string}
  }
\ExplSyntaxOff
%    \end{macrococode}
%
%    \begin{macrocode}
\def\Tding#1{%
  \incsyms\indexcommand[\ding{#1}]{\ding{#1}}\ding{#1}\indexcommand{\ding} &
  \ttfamily\string\ding\string{#1\string}%
}

\def\Tm#1{\incsyms\indexcommand{\maya}$\mayadigit{#1}$ &\ttfamily\string\maya\string{#1\string}}
\def\Tmoon#1{\incsyms\indexcommand{\MoonPha}\MoonPha{#1} &\ttfamily\string\MoonPha\string{#1\string}}
%    \end{macrocode}
%
% \begin{docCommand}{indexTextcomp} {\oarg{ltx cmd} \marg{symbol arg}}
%   This command typesets its command argument in a table row of two
%   (used for textcomp symbols).
% \end{docCommand}  
% 
%    \begin{macrocode}
\newcommand{\indexTextcomp}[2][]{%
   \incsyms#1 & 
   \indexcommand[#2]{#2}% necessary to put symbol \text
   #2%  
   &\ttfamily\string#2
}
%    \end{macrocode}
%
% \begin{docCommand} {Vp} {}
%  Commands that work both in math and text mode
% \end{docCommand}
%    \begin{macrocode}   
\newcommand{\Vp}[2][]{\incsyms#1 & \indexpunct[$#2$]{#2}#2 &\ttfamily\string#2}
\newcommand{\V}[2][]{\incsyms\indexcommand[#1]{#2}#1 & \indexcommand[#2]{#2}#2 &\ttfamily\string#2}
\newcommand{\Vl}[1]{\incsyms\indexcommand{#1}#1 & & \ttfamily\string#1}
\newcommand{\Vpl}[1]{\incsyms\indexpunct[$#1$]{#1}#1 & & \ttfamily\string#1}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\W@opt@arg[#1]#2#3{%
    \incsyms\indexaccent[$\string\blackacc{\string#1}$]{#2}%
    $#1{#3}$ &\ttfamily\string#2\string{#3\string}}

\def\W@no@opt@arg#1#2{%
    \incsyms\indexaccent[$\string\blackacc{\string#1}$]{#1}%
    $#1{#2}$ &\ttfamily\string#1\string{#2\string}}
    
\def\W{\@ifnextchar[{\W@opt@arg}{\W@no@opt@arg}}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\Wf#1#2{\incsyms\indexcommand{#1}$#1{#2}$ &\ttfamily\string#1\string{#2\string}}
\def\Ww#1#2#3{\incsyms\indexcommand{#2}$#1{#3}$ &\ttfamily\string#2\string{#3\string}}
\def\Wul#1#2#3{%
  \incsyms\indexaccent[$\string\blackacctwo{\string#1}$]{#1}%
  $#1{#2}{#3}$ &\ttfamily\string#1\string{#2\string}\string{#3\string}}
%    \end{macrocode}

% \begin{docCommand}{X} { \oarg{command} \marg{command} }
%   Typesets its arguments as commands and also the resulting symbol in 
%   math. Used for symbol tables in the documentation.
%  \end{docCommand}
%
%\begin{symtable}{AMS Commands Defined to Work in Both Math and Text Mode}
%\index{check marks}
%\label{ams-math-text}
%\begin{tabular}{*2{ll@{\qquad}}ll}
%\X\checkmark & \X\circledR & \X\maltese
%\end{tabular}
%\end{symtable}
%
%
%
% \tcbdocmarginnote{U 25-6-2015}
%    \begin{macrocode}
\ExplSyntaxOn
\def\X_opt_arg#1#2 {\incsyms\indexcommand[$\string#1$]{#2}$#1$ &\ttfamily\string#2}
\NewDocumentCommand{\X@no@opt@arg}{m}{\incsyms\indexcommand[$\string#1$]{#1}$#1$ &\ttfamily\string#1}

\NewDocumentCommand {\X} { o m}
  {
    \IfNoValueTF{#1}
      { \X@no@opt@arg  {#2}   }
      { \X_opt_arg {#1} {#2}  }
  }
\ExplSyntaxOff  
% \def\X@opt@arg[#1]#2{\incsyms\indexcommand[$\string#1$]{#2}$#1$ &\ttfamily\string#2}
%  \def\X@no@opt@arg#1{\incsyms\indexcommand[$\string#1$]{#1}$#1$ &\ttfamily\string#1}
%  \def\X{\@ifnextchar[{\X@opt@arg}{\X@no@opt@arg}}
%    \end{macrocode}
%
%
% \begin{docCommand}{Y}{\marg{math command}}
% \end{docCommand}    
%    \begin{macrocode}
\def\Y#1{\incsyms\indexcommand[$\string\big\string#1$]{#1}$\big#1$ & $\Bigg#1$% 
   &\scriptsize\ttfamily\string#1}
%    \end{macrocode}

%
%
% \begin{docCommand} {docZ} { \marg{arg1} }
%  Typesets and index its arguments.
%\idxboth{log-like}{symbols}
%\index{atomic math objects}
%\index{limits}
%\label{log}
%
%\begin{tabular}{*8l}
%\docZ\arccos & \docZ\cos  & \docZ\csc & \docZ\exp & \docZ\ker    & \docZ\limsup & \docZ\min & \docZ\sinh \\
%\docZ\arcsin & \docZ\cosh & \docZ\deg & \docZ\gcd & \docZ\lg     & \docZ\ln     & \docZ\Pr  & \docZ\sup  \\
%\docZ\arctan & \docZ\cot  & \docZ\det & \docZ\hom & \docZ\lim    & \docZ\log    & \docZ\sec & \docZ\tan  \\
%\docZ\arg    & \docZ\coth & \docZ\dim & \docZ\inf & \docZ\liminf & \docZ\max    & \docZ\sin & \docZ\tanh
% \end{tabular}
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \docZ #1
  {
    \incsyms
    \indexcommand[$\string#1$] {#1}
    \footnotesize
    \ttfamily
    \string #1
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand} {utfviii}  { \meta{void} }
%  Typesets UTF-8.\SpecialMainIndex{\utfviii}
% \end{docCommand}
%
%    \begin{macrocode}
\NewDocumentCommand{\utfviii}{ }{\mbox{UTF-8}\index{UTF-8}\xspace}

% Index TeXbook symbols and the CTAN repository. CHECK
\newcommand{\idxTBsyms}{%
  \index{symbols>TeXbook=\TeX{}book}% 
  \index{TeXbook, The=\TeX{}book, The>symbols from}%
}
%    \end{macrocode}
%
% \begin{docCommand}{pkgname}{ \marg{package name}}
% Typesets and indexes a \latex package.
% \end{docCommand}
% \pkg{Lazarides}
%    \begin{macrocode}
\newcommand{\pkgname}[1]{%
  \href{http://ctan.org/pkg/#1}{\bfseries{#1}}%
  \index{#1=\texttt{#1} (package)}%
  \index{packages>#1=\texttt{#1}}
  
  }
%    \end{macrocode}
% The \docAuxCommand{SpecialPackageIndex} indexes a package using \pkg{hypdoc}
% style commands so that it can work both in doc as well as elsewhere.
%    \begin{macrocode} 
\newcommand*\SpecialPackageIndex[2][packages:]{%
 \@bsphack
 \begingroup
 \HD@target
 \let\HDorg@encapchar\encapchar
 \edef\encapchar usage{%
 \HDorg@encapchar hdclindex{\the\c@HD@hypercount}{usage}%
 }%
 \index{#1\levelchar #2\actualchar
  {\protect\ttfamily #2}\encapchar usage}%
 \endgroup
 \@esphack
}
 
\newcommand{\pkg}[1]{%
  \href{http://ctan.org/pkg/#1}{\bfseries{#1}}%
  \SpecialPackageIndex[Packages:]{#1}}

% Comaptibility
\let\Lpack\pkgname

\newcommand*\opt[1]{\texttt{#1}}

\newcommand*\feat[1]{\texttt{#1}}


\newcommand{\optname}[2]{%
  \textsf{#2}%
  \index{#2=\textsf{#2} (\textsf{#1} package option)}%
  \index{package options>#2=\textsf{#2} (\textsf{#1})}}
%    \end{macrocode}
%
% \begin{docCommand}{docClass}{\marg{name of class}}
%   Prints and indexes a \latex class.
% \end{docCommand}
%    \begin{macrocode}
\newcommand{\docClass}[1]{%
  \href{http://ctan.org/pkg/#1}{\bfseries{#1}}%
  \index{#1=\texttt{#1} (class)}%
  \index{classes>#1=\texttt{#1}}}

\let\Lpack\pkgname
%    \end{macrocode}
% 
% This macro and all similar macros starting from doc
% typeset their argument and also add the argument to the 
% index.
%
% \begin{docCommand}{docfilename}{ \Arg{file name}}
% Typesets and indexes a file name.
% \end{docCommand}
%    \begin{macrocode}
\newcommand{\docfilename}[1]{%
  \texttt{#1}
  \index{#1\idx@actual{\phdindexprintcomc{#1}(file)}\encapchar hyperpage}}

\let\docFilename\docfilename  
%    \end{macrocode}
% 
% 
% \begin{docCommand}{docfileextension}{ \marg{file extension}}
% Typesets and indexes a file extension, such as \refCmd{docfileextension}\marg{.tex}  (\docfileextension{.tex}). You type
% the dot if you want it to appear in the index, which is a good idea.
% \end{docCommand}
%    \begin{macrocode}
\newcommand{\docfileextension}[1]{%
  \texttt{#1}%
  \index{#1\idx@actual{\texttt{#1} (file extension)}\encapchar hyperpage}
  \index{file extensions\idx@level #1\idx@actual{\texttt{#1}}\encapchar hyperpage}
}

\let\docFileExtension\docfileextension  
\newcommand{\PSfont}[1]{%
  #1%
  \index{#1 (font)}%
  \index{fonts\index@level#1}%
}
%    \end{macrocode}
% 
%    \begin{macrocode}
\NewDocumentCommand{\person} { m m } {#1\index{#2, #1} #2}
%    \end{macrocode}
%
% \begin{docCommand}{ctan}{\marg{package name}}
% Provides a link to the ctan package repository
% \end{docCommand}
%    \begin{macrocode}
\DeclareRobustCommand\ctan[1]{%
  \textcolor{green}{%
      \href{http://www.ctan.org/pkg/#1} {{\bfseries #1}}%
  \footnote{\protect\url{http://www.ctan.org/pkg/#1}}}
  \index{Packages>#1}%
}
%    \end{macrocode}
%    \begin{macrocode}
\newcommand{\idxCTAN}{%
  \index{Comprehensive TeX Archive Network=Comprehensive \string\TeX{} Archive Network}}
% Typeset a string in various encodings.
\newcommand{\encone}[1]{{\fontencoding{T1}\selectfont#1}}
\newcommand{\encfour}[1]{{\fontencoding{T4}\selectfont#1}}
\newcommand{\encfive}[1]{{\fontencoding{T5}\selectfont#1}}
\newcommand{\encgreek}[1]{{\fontencoding{LGR}\selectfont#1}}

% Various punctuation marks confuse makeindex when used directly.
\let\magicrbrack=]
\let\magicequal=\=
\DeclareRobustCommand{\magicequalname}{\texttt{\string\=}}
\DeclareRobustCommand{\magicvertname}{\texttt{|}}
\DeclareRobustCommand{\magicVertname}{\texttt{\string\|}}

% Vertically center a text-mode symbol.
\newsavebox{\tvcbox}
\newcommand*{\textvcenter}[1]{%
  \savebox{\tvcbox}{#1}%
  \raisebox{0.5\dp\tvcbox}{\raisebox{-0.5\ht\tvcbox}{\usebox{\tvcbox}}}%
}
% Many tables have notes beneath them.  Define an environment in which to
% display such a note, with an optional, superscripted math symbol
% preceding it.
\newenvironment{tablenote}[1][]{
  \makebox[1em]{\ensuremath{^{#1}}}%
  \begin{minipage}[t]{0.75\textwidth}%
  \setlength{\parskip}{2ex}
}{%
  \end{minipage}%
}

% Define various messages we reuse repeatedly.
\newcommand{\twosymbolmessage}{%
  \begin{tablenote}
    Where two symbols are present, the left one is the ``faked'' symbol
    that \latexe provides by default, and the right one is the ``true''
    symbol that \TC\ makes available.
  \end{tablenote}
}

\newcommand{\notpredefinedmessage}{%
  \begin{tablenote}[*]
    Not predefined in \latexe.  Use one of the packages
    \pkgname{latexsym}, \pkgname{amsfonts}, \pkgname{amssymb},
    \pkgname{txfonts}, \pkgname{pxfonts}, or \pkgname{wasysym}.
  \end{tablenote}
}

\newcommand{\notpredefinedmessageABX}{%
  \begin{tablenote}[*]
    Not predefined in \latexe.  Use one of the packages
    \pkgname{latexsym}, \pkgname{amsfonts}, \pkgname{amssymb},
    \pkgname{mathabx}, \pkgname{txfonts}, \pkgname{pxfonts}, or
    \pkgname{wasysym}.
  \end{tablenote}
}

\newcommand{\usetextmathmessage}[1][]{%
  \begin{tablenote}[#1]
    It's generally preferable to use the corresponding symbol from
    \vref{math-text} because the symbols in that table work
    properly in both text mode and math mode.
  \end{tablenote}
}



\newcommand{\usefontcmdmessage}[2]{%
  These symbols must appear either within the argument to \cmd{#1} or
  following the \cmd{#2} font-selection command within a scope%
}
% Define an environment in which to write a single table of symbols.  The
% environment looks a lot like a table, but it doesn't float, and it gets
% an entry in the table of contents as opposed to the list of tables.
%
% The first argument is a conditional.  The table will appear only if
% the value of the conditional is true.  The second argument is the
% table's caption.

\def\fnum@table{\tablename~\thetable}

\newenvironment{symtable}[2][true]{%
  \bgroup
  \expandafter\global\expandafter\let%
    \expandafter\ifshowsymtable\csname if#1\endcsname
  \ifshowsymtable
    \noindent%
    \begin{minipage}[t]{\linewidth}    % Prevent page breaks
    \begin{center}
    \refstepcounter{table}%
    \phantomsection
    \addcontentsline{toc}{subsection}{%
      \protect\numberline{\tablename~\thetable:}{#2}}%
    \@makecaption{\fnum@table}{#2}\medskip
    \let\next=\relax
  \else
    % The following was taken verbatim from verbatim.sty.
    \let\do\@makeother\dospecials\catcode`\^^M\active
    \let\verbatim@startline\relax
    \let\verbatim@addtoline\@gobble
    \let\verbatim@processline\relax
    \let\verbatim@finish\relax
    \let\next=\verbatim@
  \fi
  \next
}{%
  \ifshowsymtable
    \end{center}
    \end{minipage}
    \vskip 8ex minus 2ex
  \fi
  \egroup
}
%    \end{macrocode}
% We need a command that can typeset a symbol in the text and index it by its command name and
% also show the symbol in brackets next to it. 
% \begin{docCommand}{docSymbol}{\oarg{optional explicit formatting}\marg{command}}
% \end{docCommand}
%
% Display and index a command, but not its symbol (\cs{cmd}).  \cs{cmdI} shows
% the symbol in the index, with optional explicit formatting.  \cs{cmdX} is
% the same as |cmdI|, but with the optional argument hardwired to the
% command displayed in math mode.  |\cmdW| indexes an accent.  |\cmdIp| is
% also similar to |\cmdI| but formats its argument with \docAuxCommand{indexpunct}
% instead of |indexcommand|. 
% \example  typing |\docSymbol{\faJpy}| will typeset \docSymbol{\faJpy}
%   \begin{macrocode}
\ExplSyntaxOn
\newcommand{\docSymbol}[2][]{%
  \def\first@arg{#1}%
  \ifx\first@arg\@empty
    \texttt{\string#2} (#2)%
    \indexcommand[#2]{#2}%
  \else
    \texttt{\string#2} (#2)%
    \indexcommand[#1]{#2}%
  \fi
}
\ExplSyntaxOff
%    \end{macrocode}
%
%
%\begin{symtable}[true]{Fontawsome Currency Symbols}
%\idxboth{currency}{symbols}
%\idxboth{monetary}{symbols}
%\index{euro signs}
%\label{fontawesome-currency}
%\begin{tabular}{*4{ll}ll}
%\K\faBtc & \K\faIls & \K\faKrw & \K\faUsd     \\
%\K\faEur & \K\faInr & \K\faRub & \K\faViacoin \\
%\K\faGbp & \K\faJpy & \K\faTry &              \\
%\end{tabular}
%
%\bigskip
%
%\begin{tablenote}
%   Fontawesome defines \docSymbol[\faBitcoin]{\faBitcoin} as a synonym for \docSymbol{\faBtc};
%  \docSymbol{\faCny}, \docSymbol{\faYen}, and \docSymbol{\faRmb} as synonyms for
%  \docSymbol{faJpy}; \docSymbol{faDollar} as a synonym for \docSymbol{faUsd};
%  \docSymbol{faEuro} as a synonym for \docSymbol{faEur}; \docSymbol{faRouble} and
%  \docSymbol{faRuble} as synonyms for \docSymbol{faRub}; \docSymbol{faRupee} as a
%  synonym for \docSymbol{faInr}; \docSymbol{faShekel} and \docSymbol{faSheqel} as
%  synonyms for \docSymbol{faIls}; \docSymbol{faTurkishLira} as a synonym for
%  \docSymbol{faTry}; and \docSymbol{\faWon} as a synonym for \docSymbol{\faKrw}.
%\end{tablenote}
%\end{symtable}


%    \begin{macrocode}
\newenvironment{nonsymtable}[1]{%
  \begin{table}[htbp]
  \centering
  \caption{#1}\medskip
}{%
  \end{table}
}
   


{
  \global\let\myempty=\@empty
  \global\let\mygobble=\@gobble
  \catcode`\@=12
  \gdef\getridofats#1@#2\relax{%
    \def\getridtest{#2}%
    \ifx\getridtest\myempty%
      \expandafter\def\expandafter\strippedat\expandafter{\strippedat#1}
    \else%
      \expandafter\def\expandafter\strippedat\expandafter{\strippedat#1\protect\printanat}
      \getridofats#2\relax%
    \fi%
  }

  \gdef\removeats#1{%
    \let\strippedat\myempty%
    \edef\strippedtext{\stripcommand#1}%
    \expandafter\getridofats\strippedtext @\relax%
  }
  
  \gdef\stripcommand#1{\expandafter\mygobble\string#1}
}


\def\printanat{\char`\@}

\def\declare{\afterassignment\pgfmanualdeclare\let\next=}
\def\pgfmanualdeclare{\ifx\next\bgroup\bgroup\color{red!75!black}\else{\color{red!75!black}\next}\fi}


\let\textoken=\command
\let\endtextoken=\endcommand

\def\myprintocmmand#1{\texttt{\char`\\#1}}
%    \end{macrocode}
%
% \begin{docCommand}{example}{\marg{void}}
%  A no parameter macro to typeset a one line example, in code.
%  \example This is an example for $\beta$.
%    \begin{macrocode}
\def\example{\par\smallskip\noindent\textit{Example: }}
%    \end{macrocode}
% \end{docCommand}
%
%    \begin{macrocode}
\def\themeauthor{\par\smallskip\noindent\textit{Theme author: }}


\def\indexoption#1{%
  \index{#1@\protect\texttt{#1} option}%
  \index{Graphic options and styles!#1@\protect\texttt{#1}}%
}

\def\itemcalendaroption#1{\item \declare{\texttt{#1}}%
  \index{#1@\protect\texttt{#1} date test}%
  \index{Date tests!#1@\protect\texttt{#1}}%
}
%    \end{macrocode}
% \begin{docEnvironment}{class}{\marg{class}}
% \end{docEnvironment}
%
% ^^A\begin{class}{{article}{[10pt,oneside]}}
% ^^A \end{class}
%    \begin{macrocode}
\def\class#1{%
  \list{}% 
    {\leftmargin=2em\itemindent-\leftmargin\def\makelabel##1{\hss##1}}%
   \extractclass#1@\par\topsep=0pt
}
\def\endclass{\endlist}

\def\extractclass#1#2@{%
\item{{{\ttfamily\char`\\documentclass}#2{\ttfamily\char`\{\declare{#1}\char`\}}}}%
  \index{#1@\protect\texttt{#1} class}%
  \index{Classes!#1@\protect\texttt{#1}}}



\def\index@prologue{\section*{Index}\addcontentsline{toc}{section}{My Index}
  This index only contains automatically generated entries. A good
  index should also contain carefully selected keywords. This index is
  not a good index.
  \bigskip
}
\@ifundefined{c@IndexColumns}{\newcount\c@IndexColumns}{}
\c@IndexColumns=2
  \def\theindex{\@restonecoltrue
    \columnseprule \z@  \columnsep 29\p@
    \twocolumn[\index@prologue]%
       \parindent -30pt
       \columnsep 15pt
       \parskip 0pt plus 1pt
       \leftskip 30pt
       \rightskip 0pt plus 2cm
       \small
       \def\@idxitem{\par}%
    \let\item\@idxitem \ignorespaces}
  \def\endtheindex{\onecolumn}
\def\noindexing{\let\index=\@gobble}



\newcommand\symarrow[1]{%
  \index{#1\idx@actual\protect\texttt{#1} arrow tip}%
  \index{Arrow tips\idx@level#1\idx@actual\protect\texttt{#1}}%
  \texttt{#1}& yields thick  
  \begin{tikzpicture}[arrows={#1-#1},thick,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture} and thin
  \begin{tikzpicture}[arrows={#1-#1},thin,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture}
}

\newcommand\sarrow[2]{
  \index{#1@\protect\texttt{#1} arrow tip}%
  \index{Arrow tips!#1@\protect\texttt{#1}}
  \index{#2@\protect\texttt{#2} arrow tip}%
  \index{Arrow tips!#2@\protect\texttt{#2}}
  \texttt{#1-#2}& yields thick  
  \begin{tikzpicture}[arrows={#1-#2},thick,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture} and thin
  \begin{tikzpicture}[arrows={#1-#2},thin,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture}
}

\newcommand\carrow[1]{
  \index{#1@\protect\texttt{#1} arrow tip}%
  \index{Arrow tips!#1@\protect\texttt{#1}}
  \texttt{#1}& yields for line width 1ex
  \begin{tikzpicture}[arrows={#1-#1},line width=1ex,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1.5cm,2ex);
    \draw (0pt,.5ex) -- (1.5cm,.5ex);
  \end{tikzpicture}
}
%    \end{macrocode}
% \begin{macro}{\patternindex}
%    \begin{macrocode}
%% Macros taken fro PGF manual
\newcommand\patternindex[1]{%
  \HD@target
  \let\HDorg@encapchar\encapchar
  \edef\encapchar usage{%
  \HDorg@encapchar hdclindex{\the\c@HD@hypercount}{usage}%
  }%
  \index{#1\idx@actual{\protect\texttt{#1} (pattern)}\encapchar usage}%
%  \index{#1\levelchar #2\actualchar
%  {\protect\ttfamily #2}\encapchar usage}%
  \index{Patterns\levelchar#1\actualchar{\protect\texttt{#1}}\encapchar usage}%
  \texttt{#1}& 
  \begin{tikzpicture}[baseline=.5ex]
    % Background
    \pattern [path fading=west,pattern=checkerboard light gray]
      (0,0) rectangle (5cm,2em);
    \pattern [pattern=#1,pattern color=black] (0,0) rectangle +(1.5cm,2em);
    \pattern [pattern=#1,pattern color=blue] (1.75,0) rectangle +(1.5cm,2em);
    \pattern [pattern=#1,pattern color=red] (3.5,0) rectangle +(1.5cm,2em);
  \end{tikzpicture} \\[1ex]
}
%    \end{macrocode}
%
% \begin{tabular}{ll}
% \patternindex{bricks}
% \end{tabular}
% \end{macro}
%    \begin{macrocode}
\newcommand\patternindexinherentlycolored[1]{%
  \HD@target
  \let\HDorg@encapchar\encapchar
  \edef\encapchar usage{%
    \HDorg@encapchar hdclindex{\the\c@HD@hypercount}{usage}%
  }%
  \index{#1\idx@actual{\protect\texttt{#1} pattern}\encapchar usage}%
  \index{Patterns\idx@level#1\idx@actual{\protect\texttt{#1}}\encapchar usage}%
  \arial #1 & 
  \begin{tikzpicture}[baseline=.5ex]
    % Background
    \pattern [path fading=west,pattern=checkerboard light gray]
      (0,0) rectangle (5cm,2em);
    \pattern [pattern=#1,pattern color=blue] (0,0) rectangle +(5cm,2em);
  \end{tikzpicture} \\[1ex]
}


\newcommand\plotmarkentry[1]{%
  \index{#1@\protect\texttt{#1} plot mark}%
  \index{Plot marks!#1@\protect\texttt{#1}}
  \texttt{\char`\\pgfuseplotmark\char`\{\declare{#1}\char`\}} &
  \tikz\draw[color=black!25] plot[mark=#1,mark options={fill=examplefill,draw=black}] coordinates{(0,0) (.5,0.2) (1,0) (1.5,0.2)};\\
}
\newcommand\plotmarkentrytikz[1]{%
  \index{#1@\protect\texttt{#1} plot mark}%
  \index{Plot marks!#1@\protect\texttt{#1}}
  \texttt{mark=\declare{#1}} & \tikz\draw[color=black!25]
  plot[mark=#1,mark options={fill=examplefill,draw=black}] 
    coordinates {(0,0) (.5,0.2) (1,0) (1.5,0.2)};\\
}



\ifx\scantokens\@undefined
  \PackageError{phd}{You need to use extended latex
    (elatex) or (pdfelatex) to process this document}{}
\fi

\begingroup
\catcode`|=0
\catcode`[= 1
\catcode`]=2
\catcode`\{=12
\catcode `\}=12
\catcode`\\=12 |gdef|find@example#1\end{codeexample}[|endofcodeexample[#1]]
|endgroup

\begingroup
\catcode`\^=7
\catcode`\^^M=13
\catcode`\ =13%
\gdef\returntospace{\catcode`\ =13\def {\space}\catcode`\^^M=13\def^^M{}}%
\endgroup

\begingroup
\catcode`\%=13
\catcode`\^^M=13
\gdef\commenthandler{\catcode`\%=13\def%{\@gobble@till@return}}
\gdef\@gobble@till@return#1^^M{}
\gdef\@gobble@till@return@ignore#1^^M{\ignorespaces}
\gdef\typesetcomment{\catcode`\%=13\def%{\@typeset@till@return}}
\gdef\@typeset@till@return#1^^M{{\def%{\char`\%}\textsl{\char`\%#1}}\par}
\endgroup

\define@key{codeexample}{width}{\setlength\codeexamplewidth{#1}}
\define@key{codeexample}{graphic}{\colorlet{thecodebackground}{#1}}
\define@key{codeexample}{code}{\colorlet{thecodebackground}{#1}}
\define@key{codeexample}{execute code}{\csname code@execute#1\endcsname}
\define@key{codeexample}{code only}[]{\code@executefalse}
\define@key{codeexample}{pre}{\def\code@pre{#1}}
\define@key{codeexample}{post}{\def\code@post{#1}}
\define@key{codeexample}{vbox}[]{\def\code@pre{\vbox\bgroup\setlength{\hsize}{\linewidth-6pt}}\def\code@post{\egroup}}
\define@key{codeexample}{ignorespaces}[]{\let\@gobble@till@return=\@gobble@till@return@ignore}
\define@key{codeexample}{leave comments}[]{\def\code@catcode@hook{\catcode`\%=12}\let\commenthandler=\relax\let\typesetcomment=\relax}
\def\code@pre{}
\def\code@post{}
\def\code@catcode@hook{}

\newdimen\codeexamplewidth
\newif\ifcode@execute
\newbox\codeexamplebox
\def\codeexample[#1]{%
  \begingroup%
  \code@executetrue
  \setlength\codeexamplewidth{4cm+7pt}
  \setkeys{codeexample}{#1}%
  \parindent0pt
  \begingroup%
  \par%
  \medskip%
  \let\do\@makeother%
  \dospecials%
  \obeylines%
  \@vobeyspaces%
  \catcode`\%=13%
  \catcode`\^^M=13%
  \code@catcode@hook%
  \relax%
  \find@example}
\def\endofcodeexample#1{%
  \endgroup%
  \ifcode@execute%
    \setbox\codeexamplebox=\hbox{%
      {%
        {%
          \returntospace%
          \commenthandler%
          \xdef\code@temp{#1}% removes returns and comments
        }%
        \colorbox{thecodebackground}{\color{black}\ignorespaces%
          \code@pre\expandafter\scantokens\expandafter{\code@temp\ignorespaces}\code@post\ignorespaces}%
      }%
    }%
    \ifdim\wd\codeexamplebox>\codeexamplewidth%
      \def\code@start{\par}%
      \def\code@flushstart{}\def\code@flushend{}%
      \def\code@mid{\parskip2pt\par\noindent}%
      \def\code@width{\linewidth-6pt}%
      \def\code@end{}%
    \else%
      \def\code@start{%
        \linewidth=\textwidth%
        \parshape \@ne 0pt \linewidth
        \leavevmode%
        \hbox\bgroup}%
      \def\code@flushstart{\hfill}%
      \def\code@flushend{\hbox{}}%
      \def\code@mid{\hskip6pt}%
      \def\code@width{\linewidth-12pt-\codeexamplewidth}%
      \def\code@end{\egroup}%
    \fi%
    \code@start%
    \noindent%
    \begin{minipage}[t]{\codeexamplewidth}\raggedright
      \hrule width0pt%
      \small%\vskip-1em%
      \code@flushstart\box\codeexamplebox\code@flushend%
      \vskip-1ex
      \leavevmode%
    \end{minipage}%
  \else%
    \def\code@mid{\par}
    \def\code@width{\linewidth-6pt}
    \def\code@end{}
  \fi%
  \code@mid%  
  \colorbox{thecodebackground}{%
    \begin{minipage}[t]{\code@width}%
      {%
        \let\do\@makeother
        \dospecials
        \frenchspacing\@vobeyspaces
        \normalfont\ttfamily%\footnotesize
        \typesetcomment%
        \@tempswafalse
        \def\par{%
          \if@tempswa
          \leavevmode \null \@@par\penalty\interlinepenalty
          \else
          \@tempswatrue
          \ifhmode\@@par\penalty\interlinepenalty\fi
          \fi}%
        \obeylines
        \everypar \expandafter{\the\everypar \unpenalty}%
        #1}
    \end{minipage}}%
  \code@end%
  \par%
  \medskip
  \end{codeexample}
}

\def\endcodeexample{\endgroup}
%    \end{macrocode}
%
% 
% From pgfplots manual
% 
%    \begin{macrocode}
\long\def\codeexamplenl{\noexpand\par}%
\pgfqkeys{/codeexample}{%
	every codeexample/.style={
		width=3.9cm,
		/pgfplots/every axis/.append style={legend style={fill=thecodebackground}}
	},
	narrow/.style={width=6.9cm},
	%tabsize=4,
	%pre={\begin{minipage}{\linewidth}\begingroup},
	%post={\endgroup\end{minipage}},
	%vbox,
	%newline=\codeexamplenl,
}
%    \end{macrocode}
%
%
%   \begin{docCommand}{keyval}{\meta{key}\meta{options}\meta{text}}

%	The macro \cs{keyval} typesets, key value lists and their options.
%   
%	\verb+\keyval{test}{\marg{option1|option2|option2|option4}{text}+
%   

%  
%
%   \end{docCommand}
%  \keyval{test} {\marg{option1|option2|option2|option4}} {\lorem}
%	We first measure the width of the option and not use it (want to make it a bit
%	flexible at a later stage. We also ensure that the catcode of \verb+|+ is set properly
%	in case anyone is using short verbatim commands, as we do in this document.
%
%    \begin{macrocode}
\newlength\temp@cx
\def\keyval{%
  \begingroup
  \catcode`|=11
  \@keyval}
%
% use a list not very good
\def\@keyval#1#2#3{%
  \settowidth\temp@cx{\verbatimfont\bfseries{#1\thinspace}}%
  \hangindent\temp@cx
  \par\leavevmode%
\hspace*{-\temp@cx}{\verbatimfont\color{theoption}\bfseries #1}%
          \thinspace=\thinspace#2% 
\hspace*{.5em}#3%
\par\addvspace{6.5pt}%
\endgroup
}
%
%    \end{macrocode}
%  Typesets a sample of bib
%    \begin{macrocode}
\newenvironment{bibsample}
  {\trivlist\samepage
   \setlength{\itemsep}{0pt}}
  {\endtrivlist}
%% doccommands
\newcommand*{\marglistfont}{\itshape}

\newcommand*{\margoptionfont}{\ttfamily}

\newcommand*{\margnotefont}{}

\newcommand*{\optionlistfont}{\bfseries}

\newcommand*{\ltxsyntaxfont}{\ttfamily}

\newcommand*{\ltxsyntaxlabelfont}{\bfseries}

\newcommand*{\changelogfont}{\normalfont}

\newcommand*{\changeloglabelfont}{\bfseries}



%\def\cmd#1{\cs{\expandafter\cmd@to@cs\string#1}}%

%\def\cmd@to@cs#1#2{\char\number`#2\relax}

\newrobustcmd*{\env}[1]{\mbox{\verbatimfont\bfseries\textcolor{thegreen}{#1}}}

\newrobustcmd*{\len}[1]{\mbox{\verbatimfont\textbackslash#1}}

\newrobustcmd*{\cnt}[1]{\mbox{\verbatimfont#1}}

\newlength{\marglistsep}

\newlength{\marglistwidth}

%%% POSSIBLE ERROR
\setlength{\marglistwidth}{\oddsidemargin}%

\deflength{\marglistsep}{10pt}
%% This needs thorough checking as to restore previous definitions
%% of parsep we want parsep to be a bit higher than standard enumerated lists.
\global\newlength\varparsep
\newenvironment*{marglist}
  {\setlength\varparsep{\parsep}\list{}{%
     \parsep 3.5\p@ \@plus0\p@ \@minus\p@
     \setlength{\labelwidth}{\marglistwidth}%
     \setlength{\labelsep}{\marglistsep}%
     \setlength{\leftmargin}{0pt}%
     \renewcommand*{\makelabel}[1]{\hss\marglistfont##1}}}
  {\endlist\setlength\parsep{\varparsep}}

%
\newenvironment*{margoptionslist}
  {\setlength\varparsep{\parsep}\list{}{%
     \parsep 3.5\p@ \@plus0\p@ \@minus\p@
     \setlength{\labelwidth}{\marglistwidth}%
     \setlength{\labelsep}{\marglistsep}%
     \setlength{\leftmargin}{0pt}%
     \renewcommand*{\makelabel}[1]{\hss\margoptionfont\detokenize{##1}}}}
  {\endlist\setlength\parsep{\varparsep}}
  
  
%    \end{macrocode}
%
% \begin{docEnvironment} {keymarglist} { \meta{void} } 
%   Typesets a key options list in the margin.
% \end{docEnvironment}
%
%    \begin{macrocode}
\newenvironment*{keymarglist}
  {\marglist
   \setlength{\itemsep}{0pt}%
   \raggedright}
  {\endmarglist}
% color definitions
\def\cvaref#1{\verbatimfont\textcolor{themacro}{#1}}
% color for options
\def\colOpt#1{\textcolor{theoption}{\verbatimfont\texttt{#1}}}
%    \end{macrocode}
%
% \begin{docCommand}{option}{\marg{option}}
%  Typesets an option. It uses the color \docColor{theoption}, which is defined in the package \pkg{phd-colorpalette}.
%    \begin{macrocode}
\newcommand{\option}[1]{\colOpt{#1}}
%    \end{macrocode}
% \end{docCommand}
%
%  \subsection{Creating a Small Verbatim Environment}
%  This is a modified version from Cambridge classes HAS ERRORS
%    \begin{macrocode}
\begingroup \catcode `|=0 
\catcode `[= 1
\catcode`]=2 
\catcode `\{=12 
\catcode `\}=12
\catcode`\\=12 
|gdef|@xsmallverbatim#1\end{smallverbatim}[#1|end[smallverbatim]]
|gdef|@sxsmallverbatim#1\end{smallverbatim*}[#1|end[smallverbatim*]]
|endgroup
\def\@smallverbatim{\trivlist \item\relax
  \if@minipage\else\vskip\parskip\fi
  \leftskip\@totalleftmargin\rightskip\z@skip
  \parindent\z@\parfillskip\@flushglue\parskip\z@skip
  \@@@@par %chaned
  \@tempswafalse
  \def\par{%
    \if@tempswa
      \leavevmode \null \@@par\penalty\interlinepenalty
    \else
      \@tempswatrue
      \ifhmode\@@@@par\penalty\interlinepenalty\fi
    \fi}%
  \let\do\@makeother \dospecials
  \obeylines \small \@noligs%\smallverbatim@font to FIX
  \hyphenchar\font\m@ne
  \everypar \expandafter{\the\everypar \unpenalty}%
}
\def\smallverbatim{\@smallverbatim \frenchspacing\@vobeyspaces \@xsmallverbatim}
\def\endsmallverbatim{\if@newlist \leavevmode\fi\endtrivlist}
\def\smallverbatim@font{\normalfont\smallverbatimsize\ttfamily}
%    \end{macrocode}
% 
% This is a short test. \lorem
%  \begin{verbatim}
%  \ifx\bhj
%  \else
%  \fi
%  \end{verbatim}
% \lorem
% \begin{docEnvironment}{docCommands}{}
% \end{docEnvironment}
%    \begin{macrocode}
\let\luacmd\docValue
\newenvironment{docCommands}{%
\bgroup
\par
\parindent=0pt
\parskip=3.5pt plus0.5pt
\everypar{\hangindent2em}%
\addvspace\belowdisplayskip\relax}%
{\everypar{}%
 \par
 \vskip\belowdisplayskip\egroup\par}
\long\def\auxm#1(#2);{%
  \def\Xtemp{#1}%
  \def\Ytemp{#2}%
  \parindent=0pt
  \addvspace{1.5pt}%
  \par\leavevmode
  \hangafter=1\relax   \hangindent=1em\relax
  \bgroup  
   \bfseries\sffamily\color{red}\Xtemp\,\color{black}(\textit{\Ytemp})\hskip0.1em
  \egroup
}

   
\newenvironment{docLua}[1]{%
  \auxm#1;
 }{%
\@@par
\smallskip\parindent=1em } 


%    \end{macrocode}
%
% \begin{docCommand}{docFont}{\marg{font name}}
%  Typeset and indexes a font by name, such as \cs{docFont{Arial}} typesetting \docFont{Arial}. 
%    \begin{macrocode}
\DeclareRobustCommand{\phdidxfont}[1]{%
  \index{#1 (font)}\index{fonts\idx@level{#1}\encapchar hyperpage}}%
\def\docFont#1{
    \enquote{#1} 
    \phdidxfont{#1}%
} 
%    \end{macrocode}
% \end{docCommand}
%
%
% \begin{handler}{.fontweight}{}
%  A handler to handle fontweights. Chooses betwenn.This handler causes the default path to be set to hkeyi. Note that the default path is reset at the beginning of each call to pgfkeys to be equal to \ldots
% TODO remove second parameter as it is not needed. Add index command
% \end{handler}
%    \begin{macrocode}
\newenvironment{handler}[2][]{%
  \begin{phdd_manual_entry}%
   \begingroup
   \sffamily\textbf{Key handler} \meta{key}/\bfseries\ttfamily{\color{thered}#2}\color{black}#1
   \endgroup
 \end{phdd_manual_entry}
 }
{}
%    \end{macrocode}

%    \begin{macrocode}
\newcommand\stok[2][]{%
  \texttt{#2}\ensuremath{_{%
  \if!#1!
    \the\catcode`#2
  \else
    #1
  \fi}}}
%    \end{macrocode}
%
%
% \section {Unicode math index functions}
%
% The functions that follow typeset unicode math tables.
%
%  \begin{docCommand} {showsymbolalpha} { \marg{cmd} \marg{unicode point} \marg{note symbol} }
%    Indexes and typesets all the alphabetic letters available in math, 
%    mostly greek and the dotless j and i.
%  \end{docCommand}
%
%    \begin{macrocode}
\newcommand\showsymbolalpha[3]
  {
    \par\noindent\hangindent=3em%
    \makebox[2em][l]{$#1$} \makebox[3.5em][l]{\texttt{U+#2}} 
    \string#1 $^{#3}$
    \indexmathcmd [Math alphabetics] {#1}
  }
%    \end{macrocode}

%  \begin{docCommand} {showsymbol} { \marg{cmd} \marg{unicode point} \marg{note symbol} }
%  \end{docCommand}
%    \begin{macrocode}
\newcommand\showsymbol[3]{\par\noindent\hangindent=3em%
\makebox[2em][l]{$#1$} \makebox[3.5em][l]{\texttt{U+#2}} 
\string#1 $^{#3}$\indexmathcmd [Math ordinary] {#1}}
%    \end{macrocode}
%
%  \begin{docCommand} {showsymbolbin} { \marg{cmd} \marg{unicode point} \marg{note symbol} }
%  \end{docCommand}
%    \begin{macrocode}
\newcommand\showsymbolbin[3]{\par\noindent\hangindent=3em%
\makebox[2em][l]{$#1$} \makebox[3.5em][l]{\texttt{U+#2}} 
\string#1 $^{#3}$\indexmathcmd [Math bin operators] {#1}}
%    \end{macrocode}
%
%  \begin{docCommand} {showrelsymbol} { \marg{cmd} \marg{unicode point} \marg{note symbol} }
%  \end{docCommand}
%    \begin{macrocode}
\newcommand\showrelsymbol[3]{\par\noindent\hangindent=3em%
\makebox[2em][l]{$#1$} \makebox[3.5em][l]{\texttt{U+#2}} 
\string#1$^{#3}$\indexmathcmd [Math relations] {#1}}
%    \end{macrocode}
%
%  \begin{docCommand} {integralsymbol} { \marg{cmd} \marg{unicode point} \marg{note symbol} }
%    Typesets and inserts into index integral symbols
%  \end{docCommand}
%    \begin{macrocode}
\newcommand\integralsymbol[3]{\par\noindent\hangindent=3em%
\makebox[2em][l]{$#1$} \makebox[3.5em][l]{\texttt{U+#2}} 
\string#1 $^{#3}$\indexmathcmd [Math integrals] {#1}}
%    \end{macrocode}
%
%  \begin{docCommand} {showop} { \marg{cmd} \marg{unicode point} \marg{note symbol} }
%    Typesets and inserts into index integral symbols
%  \end{docCommand}
% 
%    \begin{macrocode}
\newcommand\showop[3]{\par\noindent\hangindent=6em%
  \makebox[5em][l]{$#1$\hfill$\displaystyle#1$\hfill}
  \makebox[3.5em][l]{\small\texttt{U+#2}} \string#1 $^{#3}$ 
  \indexmathcmd [Math big operators] {#1} }
%    \end{macrocode}
%
%  \begin{docCommand} {showmbrace} { \marg{cmd} \marg{unicode point} \marg{note symbol} }
%    Typesets and inserts middle brace symbols
%  \end{docCommand}
% 
%    \begin{macrocode}
\newcommand\showmbrace[3]{\par\noindent\hangindent=6em%
  \makebox[5em][l]{${#1}{\bigm#1}{\Bigm#1}{\biggm#1}{\Biggm#1}$}
  \makebox[3.5em][l]{\small\texttt{U+#2}} \string#1 $^{#3}$ 
  \indexmathcmd [Math delimiters]{#1}  
  }
%    \end{macrocode}
%
%  \begin{docCommand} {showlbrace} { \marg{cmd} \marg{unicode point} \marg{note symbol} }
%    left braces
%  \end{docCommand}
%    \begin{macrocode}
\newcommand\showlbrace[3]{\par\noindent\hangindent=6em%
  \makebox[5em][l]{$\Biggl#1\biggl#1\Bigl#1\bigl#1#1$}
  \makebox[3.5em][l]{
    \small\texttt{U+#2}} \string #1 $^{#3}$
  \indexmathcmd[Math delimiters] {#1}
  }
%    \end{macrocode}
%
%  \begin{docCommand} {showrbrace} { \marg{cmd} \marg{unicode point} \marg{note symbol} }
%    right braces
%  \end{docCommand}
%    \begin{macrocode}
\newcommand\showrbrace[3]{\par\noindent\hangindent=6em%
  \makebox[5em][l]{$#1\bigr#1\Bigr#1\biggr#1\Biggr#1$}
  \makebox[3.5em][l]{\small\texttt{U+#2}} \string #1 $^{#3}$
  \indexmathcmd[Math delimiters] {#1}
  }
%    \end{macrocode}
%
%  \begin{docCommand} {wide accents} { \marg{cmd} \marg{unicode point} \marg{note symbol} }
%    wide accents
%  \end{docCommand}
%
%    \begin{macrocode}
\DeclareDocumentCommand \showwideaccent { m m m} {\par\noindent\hangindent=4em%
  \makebox[3em][l]{$#1{xxx}$}\makebox[3.5em][l]{\small\texttt{U+#2}} \string #1 $^{#3}$
  \indexmathcmd [Math accents] {#1{abc}}
  }
%    \end{macrocode}
%
%  \begin{docCommand} {showaccent} { \marg{cmd} \marg{unicode point} \marg{note symbol} }
%    right braces
%  \end{docCommand}
%
%    \begin{macrocode}
\DeclareDocumentCommand\showaccent { m m m} {\par\noindent\hangindent=4em%
  \makebox[3em][l]{$#1b$}\makebox[3.5em][l]{\small\texttt{U+#2}} \string #1$^{#3}$
  \indexmathcmd [Math accents] {#1 b}
  }
%    \end{macrocode}
%
%  \begin{docCommand} {showrover} { \marg{cmd} \marg{unicode point} \marg{note symbol} }
%   
%  \end{docCommand}  
%    \begin{macrocode}  
\newcommand\showover[3]{\par\noindent\hangindent=6em%
  \makebox[5em][l]{$#1{xxxxxx}$}
  \makebox[3.5em][l]{\small\texttt{U+#2}} 
  \string #1 $^{#3}$
  \indexmathcmd [Math over and under brackets] {#1{xxxxxx}}
  }
%    \end{macrocode}
% 
%    \begin{macrocode}
\ExplSyntaxOn  
\NewDocumentEnvironment{ arguments }  {}
  {
    \enumerate 
  }
  {
    \endenumerate
  }  
\ExplSyntaxOff
%    \end{macrocode}
%
%\chapter{l3 Documentation}
%
% The \latex3 Team developed the class |l3doc| as a replacement to the 
% |ltxdoc| class. This is currently being used to document the |expl3|
% and related packages.
%
% This section of the package deals primarily with an adaptation from
% the class.
%
% The main reason it is easier to integrate with the rest of the |phd|
% bundle if the code is in a package, as in the original |doc| and 
% |ltxdoc|. 

% \subsection{General text markup}
%
% Many of the commands in this section come from \pkg{ltxdoc} with some
% improvements.
%
% \begin{function}{\cmd, \cs}
%   \begin{syntax}
%     \cmd{\cmd} \oarg{options} \meta{control sequence}\\
%     \cs{cs} \oarg{options} \marg{csname}
%   \end{syntax}
%   These commands are provided to typeset control sequences.
%   |\cmd\foo| produces \enquote{\cmd\foo} and |\cs{foo}| produces the
%   same.  In general, \cs{cs} is more robust since
%   it doesn't rely on catcodes being \enquote{correct} and is therefore
%   recommended.
%
%   These commands are aware of the |@@| \pkg{l3docstrip} syntax and
%   replace such instances correctly in the typeset documentation.
%   This only happens after a |%<@@=|\meta{module}|>| declaration.
%
%   Additionally, commands can be used in the argument of \cs{cs}.  For
%   instance, |\cs{\meta{name}:\meta{signature}}| produces
%   \cs[no-index]{\meta{name}:\meta{signature}}.
%
%   The \meta{options} are a key--value list which can contain the
%   following keys:
%   \begin{itemize}
%     \item |index=|\meta{name}: the \meta{csname} is indexed as if
%       one had written \cs{cs}\Arg{name}.
%     \item |no-index|: the \meta{csname} is not indexed.
%     \item |module=|\meta{module}: the \meta{csname} is indexed in
%       the list of commands from the \meta{module}; the \meta{module}
%       can in particular be |TeX| for \enquote{\TeX{} and \LaTeXe{}}
%       commands, or empty for commands which should be placed in the
%       main index.  By default, the \meta{module} is deduced
%       automatically from the command name.
%     \item |replace| is a boolean key (\texttt{true} by default) which
%       indicates whether to replace |@@| as \pkg{l3docstrip} does.
%   \end{itemize}
%   These commands allow hyphenation of control sequences after (most) underscores.
%   By default, a hyphen is used to mark the hyphenation, but this can be changed with
%   the \texttt{cs-break-nohyphen} class option.
%   To disable hyphenation of control sequencies entirely, use \texttt{cs-break-off}.
% \end{function}
%
%
% \begin{function}{\tn}
%   \begin{syntax}
%     \cs{tn} \oarg{options} \marg{csname}
%   \end{syntax}
%   Analoguous to \cs{cs} but intended for \enquote{traditional} \TeX{}
%   or \LaTeXe{} commands; they are indexed accordingly.  This is in
%   fact equivalent to \cs{cs} |[module=TeX, replace=false,|
%   \meta{options}|]| \Arg{csname}.
% \end{function}
%
% \begin{function}{\meta}
%   \begin{syntax}
%     \cs{meta} \Arg{name}
%   \end{syntax}
%   \cs{meta} typesets the \meta{name} italicised in \meta{angle
%     brackets}.  Within a \env{function} environment or similar, angle
%   brackets |<...>| are set up to be a shorthand for |\meta{...}|.
%
%   This function has additional functionality over its \pkg{ltxdoc}
%   versions; underscores can be used to subscript material as in math
%   mode.  For example, |\meta{arg_{xy}}| produces
%   \enquote{\meta{arg_{xy}}}.
% \end{function}
%
% Function environments take an optional argument to indicate whether
% the function(s) it describes are expandable or restricted-expandable
% or defined in conditional forms. Use |EXP|, |rEXP|, |TF|, |pTF|, or |noTF| for
% this; note that |pTF| implies |EXP| since predicates must always be
% expandable, and that |noTF| means that the function without |TF|
% should be documented in addition to |TF|.  As an example:
% 
% \begin{texexample}{Typesetting functions}{ex:function}
% \begin{function}[pTF]{\cs_if_exist:N}
%   \begin{syntax}
%     \cs{cs_if_exist_p:N} \meta{cs}
%   \end{syntax}
% \end{function}
% \end{texexample}
%   This function has additional functionality over its \pkg{ltxdoc}
%   versions; underscores can be used to subscript material as in math
%   mode.  For example, |\meta{arg_{xy}}| produces
%   \enquote{\meta{arg_{xy}}}.

%
% \begin{function}{\Arg, \marg, \oarg, \parg}
%   \begin{syntax}
%     |\Arg| \Arg{name}
%     |\marg| \marg{name} 
%   \end{syntax}
%   Typesets the \meta{name} as for \cs{meta} and wraps it in braces.
%
%   The \cs{marg}/\cs{oarg}/\cs{parg} versions follow from \pkg{ltxdoc}
%   in being used for \enquote{mandatory} or \enquote{optional} or
%   \enquote{picture} brackets as per \LaTeXe{} syntax.
% \end{function}
%
% \begin{function}{\file, \env, \pkg, \cls}
%   \begin{syntax}
%     \cs{pkg} \Arg{name}
%   \end{syntax}
%   These all take one argument and are intended to be used as semantic
%   commands for representing files, environments, package names, and
%   class names, respectively.
% \end{function}
%
% \subsection{Describing functions in the documentation}
%
% \DescribeEnv{function}
% \DescribeEnv{syntax}
% Two heavily-used environments are defined to describe the syntax of
% \pkg{expl3} functions and variables.
% \medskip
% \begin{verbatim}
% \begin{function}{\function_one:, \function_two:}
%   \begin{syntax}
%     |\foo_bar:| \Arg{meta} \meta{test_1}
%   \end{syntax}
% \meta{description}
% \end{function}
% \end{verbatim}
%   \hrulefill
%   \par
%   \hspace*{0.25\textwidth}
%   \begin{minipage}{0.5\textwidth}
%     \begin{function}{\function_one:, \function_two:}
%       \begin{syntax}
%         |\foo_bar:| \Arg{meta} \meta{test_1}
%       \end{syntax}
%       \meta{description}
%     \end{function}
%   \end{minipage}
% \par
% \hrulefill
%
% Function environments take an optional argument to indicate whether
% the function(s) it describes are expandable or restricted-expandable
% or defined in conditional forms. Use |EXP|, |rEXP|, |TF|, |pTF|, or |noTF| for
% this; note that |pTF| implies |EXP| since predicates must always be
% expandable, and that |noTF| means that the function without |TF|
% should be documented in addition to |TF|.  As an example:
% 
% \medskip
% 
% \begin{Verbatim}[frame=none,framerule=0pt,fillcolor=red!10,fontfamily=tt,fontsize=\small]
% \begin{function}[pTF]{\cs_if_exist:N}
%   \begin{syntax}
%     \cs{cs_if_exist_p:N} \meta{cs}
%   \end{syntax}
% \meta{description}
% \end{function}
% \end{Verbatim}
%
% \medskip
%
% This code will then produce the output, as shown below and place it in the margin.
%
%   {\centering
%   \hspace*{0.5\textwidth}
%   \begin{minipage}{0.5\textwidth}
%     \begin{function}[pTF]{\cs_if_exist:N}
%       \begin{syntax}
%         \cs{cs_if_exist_p:N} \meta{cs}
%       \end{syntax}
%       \meta{description}
%     \end{function}
%   \end{minipage}\par
%  }
% \bigskip
%
% \DescribeEnv{variable}
% If you are documenting a variable instead of a function, use the
% \env{variable} environment instead; it behaves identically to the
% \env{function} environment above.
%
% \DescribeEnv{texnote}
% This environment is used to call out sections within \env{function}
% and similar that are only of interest to seasoned \TeX{} developers.
%
% \section{Describing functions in the implementation}
%
% \DescribeEnv{macro}
% The well-used environment from \LaTeXe{} for marking up the
% implementation of macros/functions remains the \env{macro}
% environment.  Some changes in \pkg{l3doc}: it now accepts
% comma-separated lists of functions, to avoid a very large number of
% consecutive |\end{macro}| statements.
% Spaces and new lines are ignored (the option |[verb]| prevents this).
% \begin{Verbatim}
%  \begin{macro}{\foo:N, \foo:c}
%    \begin{macrocode}
% ... code for \foo:N and \foo:c ...
%    \end{macrocode}
%  \end{macro}
% \end{Verbatim}
% If you are documenting an auxiliary macro, it's generally not
% necessary to highlight it as much and you also don't need to check it
% for, say, having a test function and having a documentation chunk
% earlier in a \env{function} environment.  \pkg{l3doc} will pick up these
% cases form the presence of |__| in the name, or you may force marking
% as internal by using |\begin{macro}[int]| to mark it as such. The margin
% call-out is then printed in grey for such cases.
%
% For documenting \pkg{expl3}-type conditionals, you may also pass this
% environment a |TF| option (and omit it from the function name) to
% denote that the function is provided with |T|, |F|, and |TF| suffixes.
% A similar |pTF| option prints both |TF| and |_p| predicate forms.
% An option |noTF| prints both the |TF| forms and a form with neither
% |T| nor |F|, to document functions such as \cs[no-index]{prop_get:NN}
% which also have conditional forms (\cs[no-index]{prop_get:NNTF}).
%
%
% \DescribeMacro{\TestFiles}
% \cs{TestFiles}\marg{list of files} is used to indicate which test
% files are used for the current code; they are printed in the
% documentation.
%
% \DescribeMacro{\UnitTested}
% Within a \env{macro} environment, it is a good idea to mark whether a
% unit test has been created for the commands it defines.  This is
% indicated by writing \cs{UnitTested} anywhere within |\begin{macro}|
%   \dots |\end{macro}|.
%
% If the class option |checktest| is enabled, then it is an \emph{error}
% to have a \env{macro} environment without a call to
% \file{Testfiles}.  This is intended for large packages such as
% \pkg{expl3} that should have absolutely comprehensive tests suites and
% whose authors may not always be as sharp at adding new tests with new
% code as they should be.
%
% \DescribeMacro{\TestMissing}
% If a function is missing a test, this may be flagged by writing (as
% many times as needed) \cs{TestMissing} \marg{explanation of test
%   required}.  These missing tests are summarised in the listing
% printed at the end of the compilation run.
%
% \DescribeEnv{variable}
% When documenting variable definitions, use the \env{variable}
% environment instead.  Here it behaves identically to the
% \env{macro} environment, except that if the class option |checktest|
% is enabled, variables are not required to have a test file.
%
% \DescribeEnv{arguments}
% Within a \env{macro} environment, you may use the \env{arguments}
% environment to describe the arguments taken by the function(s).  It
% behaves like a modified enumerate environment.
% \begin{Verbatim}
%  \begin{macro}{\foo:nn, \foo:VV}
%  \begin{arguments}
%    \item Name of froozle to be frazzled
%    \item Name of muble to be jubled
%  \end{arguments}
%    \begin{macrocode}
% ... code for \foo:nn and \foo:VV ...
%    \end{macrocode}
%  \end{macro}
% \end{Verbatim}
%
%
%
%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}
%    \begin{macrocode}
%\RequirePackage{fancybox}
%\newif\iffancyvrb \IfFileExists{fancyvrb.sty}{\fancyvrbtrue}{}
%\iffancyvrb
%  \RequirePackage{fancyvrb}
%\fi  
%\fvset{gobble=2,frame=none, framesep=5pt,fillcolor=red!30,numbers=left,
%          numbersep=3pt,fontsize=\small}
%    \end{macrocode}

% \section{Variables}
% \begin{variable}{\g_docinput_clist}
%   The list of files which have been input through \docAuxCommand{DocInput}.
%    \begin{macrocode}
%<@@=phdd>
%    \end{macrocode}
%    \begin{macrocode}
\clist_new:N \g_docinput_clist
%    \end{macrocode}
% \end{variable}
%
%   All functions documented through \docAuxEnvironment{function}, and all macros
%   introduced through \docAuxEnvironment{macro}.  They can be compared to see what
%   documentation or code is missing.
%    \begin{macrocode}
\seq_new:N \g_doc_functions_seq
\seq_new:N \g_doc_macros_seq
%    \end{macrocode}
%
% \begin{variable}{\l_@@_detect_internals_bool, \l_@@_detect_internals_tl}
%   If \texttt{true}, \pkg{l3doc} will check for use of internal
%   commands |\cs[no-index]{__\meta{pkg}_\ldots{}}| from other packages in
%   the argument of the \texttt{macro} environment, and in the code typeset in
%   \texttt{macrocode} environments, but not in~\cs{cs}.  Also a token list
%   to store temporary data for this purpose.
%    \begin{macrocode}
\bool_new:N \l_@@_detect_internals_bool
\bool_set_true:N \l_@@_detect_internals_bool
\tl_new:N \l_@@_detect_internals_tl
\tl_new:N \l_@@_detect_internals_cs_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_output_coffin}
%   The \env{function} environment is typeset by combining coffins
%   containing various pieces (function names, description, \emph{etc.})
%   into this coffin.
%    \begin{macrocode}
\coffin_new:N \l_@@_output_coffin
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}
%   {\l_@@_functions_coffin, \l_@@_descr_coffin, \l_@@_syntax_coffin}
%   These coffins contain respectively the list of function names
%   (argument of the \env{function} environment), the text between
%   |\begin{function}| and |\end{function}|, and the syntax given in the
%   \env{syntax} environment.
%    \begin{macrocode}
\coffin_new:N \l_@@_functions_coffin
\coffin_new:N \l_@@_descr_coffin
\coffin_new:N \l_@@_syntax_coffin
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_syntax_box}
%   The contents of the \env{syntax} environment are typeset in this box
%   before being transferred to \cs{l_@@_syntax_coffin}.
%    \begin{macrocode}
\box_new:N \g_@@_syntax_box
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_in_function_bool}
%   True when inside a \texttt{function} or \texttt{variable}
%   environment.  Used by the \texttt{syntax} environment to determine
%   its behaviour.
%    \begin{macrocode}
\bool_new:N \l_@@_in_function_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_long_name_bool, \l_@@_trial_width_dim}
%   The boolean \cs{l_@@_long_name_bool} is \texttt{true} if the width
%   \cs{l_@@_trial_width_dim} of the coffin \cs{l_@@_functions_coffin}
%   (containing the current function names) is bigger than the space
%   available in the margin.
%    \begin{macrocode}
\bool_new:N \l_@@_long_name_bool
\dim_new:N \l_@@_trial_width_dim
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_nested_macro_int}
%   The nesting of \env{macro} environments (this is now~$0$ outside a
%   \env{macro} environment).
%    \begin{macrocode}
\int_new:N \l_@@_nested_macro_int
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}
%   {
%     \l_@@_macro_tested_bool,
%     \g_@@_missing_tests_prop,
%     \g_@@_not_tested_seq,
%     \g_@@_testfiles_seq,
%   }
%   A boolean describing whether the current macro has tests, and some
%   global structures which contain information about test files and
%   which tests are missing.
%    \begin{macrocode}
\bool_new:N \l_@@_macro_tested_bool
\prop_new:N \g_@@_missing_tests_prop
\seq_new:N \g_@@_not_tested_seq
\seq_new:N \g_@@_testfiles_seq
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}
%   {
%     \l_@@_macro_internal_set_bool,
%     \l_@@_macro_internal_bool,
%     \l_@@_macro_TF_bool,
%     \l_@@_macro_pTF_bool,
%     \l_@@_macro_noTF_bool,
%     \l_@@_macro_EXP_bool,
%     \l_@@_macro_rEXP_bool,
%     \l_@@_macro_var_bool,
%     \l_@@_override_module_tl,
%     \l_@@_macro_documented_tl,
%   }
%   Contain information about some options of function/macro
%   environments.  We initialize \cs{l_@@_override_module_tl} to avoid
%   overriding module names by an empty name (meaning no module).
%    \begin{macrocode}
\bool_new:N \l_@@_macro_internal_set_bool
\bool_new:N \l_@@_macro_internal_bool
\bool_new:N \l_@@_macro_TF_bool
\bool_new:N \l_@@_macro_pTF_bool
\bool_new:N \l_@@_macro_noTF_bool
\bool_new:N \l_@@_macro_EXP_bool
\bool_new:N \l_@@_macro_rEXP_bool
\bool_new:N \l_@@_macro_var_bool
\tl_new:N \l_@@_override_module_tl
\tl_set:Nn \l_@@_override_module_tl { \q_no_value }
\tl_new:N \l_@@_macro_documented_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}
%   {
%     \g_@@_lmodern_bool,
%     \g_@@_checkfunc_bool,
%     \g_@@_checktest_bool,
%     \g_@@_cs_break_bool,
%     \g_@@_kernel_bool
%   }
%   Information about package options.
%    \begin{macrocode}
\bool_new:N \g_@@_lmodern_bool
\bool_new:N \g_@@_checkfunc_bool
\bool_new:N \g_@@_checktest_bool
\bool_new:N \g_@@_kernel_bool
\bool_new:N \g_@@_cs_break_bool
\bool_gset_true:N \g_@@_cs_break_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_tmpa_tl, \l_@@_tmpb_tl, \l_@@_tmpa_int, \l_@@_tmpa_seq}
%   Some temporary variables.
%    \begin{macrocode}
\tl_new:N \l_@@_tmpa_tl
\tl_new:N \l_@@_tmpb_tl
\int_new:N \l_@@_tmpa_int
\int_new:N \l_@@_tmpa_seq
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_names_block_tl}
%   List of local sequence variables (produced through
%   \cs{@@_lseq_name:n}), one for each set of variants in a
%   \env{function} or \env{macro} environment.  More precisely these
%   sequences are named after the base forms, such as \cs{clist_count:n}
%   or \cs{clist_count:N} (which are not variants).  Each of these
%   sequences have the base name (without any signature) as their first
%   item, followed by the list of variant's signatures, or
%   \cs{scan_stop:} to denote the absence of signature (no colon).
%    \begin{macrocode}
\tl_new:N \l_@@_names_block_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_variants_seq}
%   Stores rather temporarily the list of variants (signatures only) of
%   a function/macro that is being documented.  It is global because we
%   need it to keep its value throughout cells of an alignment.
%    \begin{macrocode}
\seq_new:N \g_@@_variants_seq
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_names_verb_bool}
%   Set to |true| if the main argument of a macro/function environment
%   should be used as is, without removing any comma or space.
%    \begin{macrocode}
\bool_new:N \l_@@_names_verb_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_names_seq}
%   List of functions/environments/\ldots{} appearing as arguments of a
%   given \env{function} or \env{macro} environment.  These are the
%   names after conversion of |_@@| and |@@| to |__|\meta{module name}
%   and other sanitizing.
%    \begin{macrocode}
\seq_new:N \l_@@_names_seq
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_nested_names_seq}
%   Collects all macros in nested \env{macro} environments, to use them
%   in the \enquote{End definition} text.
%    \begin{macrocode}
\seq_new:N \g_@@_nested_names_seq
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}
%   {
%     \l_@@_index_macro_tl, \l_@@_index_key_tl,
%     \l_@@_index_module_tl, \l_@@_index_internal_bool
%   }
%   When analyzing a control sequence found within a \env{macrocode}
%   environment, \cs{l_@@_index_macro_tl} holds the control sequence
%   (partially a string), \cs{l_@@_index_key_tl} holds the future
%   sort key in the index, and \cs{l_@@_index_module_tl} is the
%   subindex in which the control sequence should be listed.  Finally,
%   \cs{l_@@_index_internal_bool} indicates when the control sequence is
%   internal and should be indexed in a slightly different subindex.
%    \begin{macrocode}
\tl_new:N \l_@@_index_macro_tl
\tl_new:N \l_@@_index_key_tl
\tl_new:N \l_@@_index_module_tl
\bool_new:N \l_@@_index_internal_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_module_name_tl}
%   The module name, set when reading a line |<@@=|\meta{module}|>|.
%    \begin{macrocode}
\tl_new:N \g_@@_module_name_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\c_@@_iow_rule_tl, \c_@@_iow_midrule_tl}
%   $40$~equal signs.
%    \begin{macrocode}
\tl_const:Nn \c_@@_iow_rule_tl
  { ======================================== }
\tl_const:Nn \c_@@_iow_mid_rule_tl
  { -------------------------------------- }
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}
%   {\l_@@_macro_box, \l_@@_macro_index_box, \l_@@_macro_int}
%   A vertical box in which the names given to the macro environment are
%   typeset, a horizontal box in which we store the targets created by
%   indexing commands, and the number of macros so far (including those
%   from surrounding \env{macro} environments).
%    \begin{macrocode}
\box_new:N \l_@@_macro_box
\box_new:N \l_@@_macro_index_box
\int_new:N \l_@@_macro_int
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}
%   {
%     \l_@@_cmd_tl,
%     \l_@@_cmd_index_tl,
%     \l_@@_cmd_module_tl,
%     \l_@@_cmd_noindex_bool,
%     \l_@@_cmd_replace_bool,
%   }
%   Variables used to control the behaviour of \cs{cmd}, \cs{cs} and
%   \cs{tn}.
%    \begin{macrocode}
\tl_new:N \l_@@_cmd_tl
\tl_new:N \l_@@_cmd_index_tl
\tl_new:N \l_@@_cmd_module_tl
\bool_new:N \l_@@_cmd_noindex_bool
\bool_new:N \l_@@_cmd_replace_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_in_implementation_bool}
%   This boolean is \texttt{true} within the \env{implementation}
%   environment, and \texttt{false} anywhere else.
%    \begin{macrocode}
\bool_new:N \l_@@_in_implementation_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}
%   {
%     \g_@@_typeset_documentation_bool,
%     \g_@@_typeset_implementation_bool
%   }
%   These booleans control whether the documentation/implementation
%   should be typeset.  By default both should be.
%    \begin{macrocode}
\bool_new:N \g_@@_typeset_documentation_bool
\bool_new:N \g_@@_typeset_implementation_bool
\bool_set_true:N \g_@@_typeset_documentation_bool
\bool_set_true:N \g_@@_typeset_implementation_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_base_name_tl, \l_@@_variants_prop}
%   The name of the macro which is being documented (without its
%   signature), and a property list mapping base forms of variants to
%   all variants which have the same base form.
%    \begin{macrocode}
\tl_new:N \g_@@_base_name_tl
\prop_new:N \l_@@_variants_prop
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_function_label_clist, \l_@@_no_label_bool}
%   Option of a \env{function} environment which replaces the label that
%   would normally be inserted by labels for the given list of control
%   sequences.  This is only useful to avoid duplicate labels when a
%   function's documentation appears multiple times.
%    \begin{macrocode}
\clist_new:N \l_@@_function_label_clist
\bool_new:N \l_@@_no_label_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_date_added_tl, \l_@@_date_updated_tl}
%   Values of some options of the \env{function} environment.
%    \begin{macrocode}
\tl_new:N \l_@@_date_added_tl
\tl_new:N \l_@@_date_updated_tl
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\l_@@_macro_argument_tl}
%   Save the argument of a \env{macro} or \env{function} environment for
%   use in error messages.
%    \begin{macrocode}
\tl_new:N \l_@@_macro_argument_tl
%    \end{macrocode}
% \end{variable}
%
% ^^A Bruno: what does the next line do?
%    \begin{macrocode}
% \int_new:N \c@CodelineNo
%    \end{macrocode}
%
% \subsection{Variants and helpers}
%
% \begin{macro}{\@@_tmpa:w, \@@_tmpb:w}
%   Auxiliary macros for temporary use.
%    \begin{macrocode}
\cs_new_eq:NN \@@_tmpa:w ?
\cs_new_eq:NN \@@_tmpb:w ?
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \seq_set_split:NoV,
%     \str_case:fn,
%     \tl_count:f,
%     \tl_greplace_all:Nxn,
%     \tl_greplace_all:Nno,
%     \tl_if_head_eq_charcode:oNTF,
%     \tl_if_head_eq_charcode:oNT,
%     \tl_if_head_eq_charcode:oNF,
%     \tl_if_head_eq_meaning:VNF,
%     \tl_if_in:noTF,
%     \tl_if_in:ooTF,
%     \tl_if_in:NoTF,
%     \tl_if_in:NoT,
%     \tl_if_in:NoF,
%     \tl_remove_all:Nx,
%     \tl_replace_all:Nxn,
%     \tl_replace_all:Nnx,
%     \tl_replace_all:Non,
%     \tl_replace_all:Nno,
%     \tl_replace_once:Noo,
%     \tl_to_str:f,
%     \tl_to_str:o,
%     \prop_get:NxNTF,
%     \prop_put:Nxn,
%     \prop_gput:NVx,
%   }
%   A few missing variants.
%    \begin{macrocode}
\cs_generate_variant:Nn \seq_set_split:Nnn { NoV }
\cs_generate_variant:Nn \seq_gput_right:Nn { Nf }
\cs_generate_variant:Nn \str_case:nn { fn }
\cs_generate_variant:Nn \tl_count:n { f }
\cs_generate_variant:Nn \tl_greplace_all:Nnn { Nx , Nno }
\cs_generate_variant:Nn \tl_if_empty:nTF { f }
\cs_generate_variant:Nn \tl_if_head_eq_charcode:nNTF { o }
\cs_generate_variant:Nn \tl_if_head_eq_charcode:nNT  { o }
\cs_generate_variant:Nn \tl_if_head_eq_charcode:nNF  { o }
\cs_generate_variant:Nn \tl_if_head_eq_meaning:nNF  { V }
\cs_generate_variant:Nn \tl_if_in:nnTF { no , oo }
\cs_generate_variant:Nn \tl_if_in:NnTF { No }
\cs_generate_variant:Nn \tl_if_in:NnT  { No }
\cs_generate_variant:Nn \tl_if_in:NnF  { No }
\cs_generate_variant:Nn \tl_remove_all:Nn   { Nx }
\cs_generate_variant:Nn \tl_replace_all:Nnn { Nx , Nnx, No , Nno }
\cs_generate_variant:Nn \tl_replace_once:Nnn { Noo }
\cs_generate_variant:Nn \tl_to_str:n { f , o }
\cs_generate_variant:Nn \prop_get:NnNTF { Nx }
\cs_generate_variant:Nn \prop_put:Nnn { Nx }
\cs_generate_variant:Nn \prop_gput:Nnn { NVx }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[TF]{\@@_if_almost_str:n}
%   Used to test if the argument of |\cmd| or other macros to be indexed
%   is almost a string or not: for instance this is \texttt{false} if |#1|
%   contains |\meta{...}|.  The surprising |f|-expansion are there to
%   cope with the case of |#1| starting with \cs{c_backslash_str}
%   which should be expanded and considered to be \enquote{normal}.
%    \begin{macrocode}
\prg_new_protected_conditional:Npnn \@@_if_almost_str:n #1 { TF , T , F }
  {
    \int_compare:nNnTF
      { \tl_count:n {#1} }
      < { \tl_count:f { \tl_to_str:f {#1} } }
      { \prg_return_false: }
      { \prg_return_true: }
  }
\cs_generate_variant:Nn \@@_if_almost_str:nT { V }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_trim_right:Nn, \@@_trim_right:No}
%   Removes all material after |#2| in the token list variable~|#1|.
%   Perhaps combine with \cs{@@_key_trim_module:n}?
%    \begin{macrocode}
\cs_new_protected:Npn \@@_trim_right:Nn #1#2
  {
    \cs_set:Npn \@@_tmp:w ##1 #2 ##2 \q_stop { \exp_not:n {##1} }
    \tl_set:Nx #1 { \exp_after:wN \@@_tmp:w #1 #2 \q_stop }
  }
\cs_generate_variant:Nn \@@_trim_right:Nn { No }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[TF]{\@@_str_if_begin:nn, \@@_str_if_begin:oo}
%   True if the first string starts with the second.
%    \begin{macrocode}
\prg_new_protected_conditional:Npnn \@@_str_if_begin:nn #1#2 { TF , T , F }
  {
    \tl_if_in:ooTF
      { \exp_after:wN \scan_stop: \tl_to_str:n {#1} }
      { \exp_after:wN \scan_stop: \tl_to_str:n {#2} }
      { \prg_return_true: }
      { \prg_return_false: }
  }
\prg_generate_conditional_variant:Nnn \@@_str_if_begin:nn
  { oo } { TF , T , F }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_replace_at_at:N}
% \begin{macro}{\@@_replace_at_at_aux:Nn}
%   The goal is to replace |@@| by the current module name.  We take
%   advantage of this function to also detect internal macros.  If there is
%   no \meta{module~name}, do nothing.  Otherwise, sanitize the catcodes
%   of |@| and~|_|, temporarily change |@@@@| to |aa| with different catcodes and later to |@@|, and replace |__@@| and |_@@| and |@@| by
%   |__|\meta{module~name}.  The result contains |_| with category
%   code letter because this is what the |macrocode| environment
%   expects.  Other use cases can apply \cs{tl_to_str:n} if needed.
%   Note that we include spaces between the
%   |@| in the code below, since it is also processed through the same
%   replacement rules.
%   \tcbdocmarginnote{U 2019-01-07}
%   Updated selection to include |!@@|. This must be used with l3doctripx otherwise
%   the style file will not be able to do the conversion.
%   This maybe can provide a generic package namespacing possibility. 
%    \begin{macrocode}
\cs_new_protected:Npn \@@_replace_at_at:N #1
  {
    \tl_if_empty:NF \g_@@_module_name_tl
      {
        \exp_args:NNo \@@_replace_at_at_aux:Nn
          #1 \g_@@_module_name_tl
      }
  }
\cs_new_protected:Npx \@@_replace_at_at_aux:Nn #1#2
  {
%    \tl_replace_all:Nnn #1 { \token_to_str:N @ } { @ }
%    \tl_replace_all:Nnn #1 { \token_to_str:N _ } { _ }
%    \tl_replace_all:Nnn #1 { \token_to_str:N ! } { ! }
%    \tl_replace_all:Nnn #1 { @ @ @ @ } { \token_to_str:N a a }
%    \tl_replace_all:Nnn #1 { _ _ @ @ } { _ _ #2 }
%    \tl_replace_all:Nnn #1 {   _ @ @ } { _ _ #2 }
%    \tl_replace_all:Nnn #1 {    !@ @ } {     #2 }
%    \tl_replace_all:Nnn #1 {     @ @ } { _ _ #2 }
   
   \tl_replace_all:Nnn #1 { \token_to_str:N @ } { @ }
    \tl_replace_all:Nnn #1 { \token_to_str:N _ } { _ }
    \tl_replace_all:Nnn #1 { \token_to_str:N ! } { ! }
    \tl_replace_all:Nnn #1 { @ @ @ @ } { \token_to_str:N a a }
    \tl_replace_all:Nnn #1 { _ _ @ @ } { _ _ #2 }
    \tl_replace_all:Nnn #1 {   _ @ @ } { _ _ #2 }
    \tl_replace_all:Nnn #1 {    !@ @ } {     #2 }
    \tl_replace_all:Nnn #1 {     @ @ } { _ _ #2 }
   
    \tl_replace_all:Nnn #1 { \token_to_str:N a a } { @ @ }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   {
%     \@@_detect_internals:N,
%     \@@_detect_internals_aux:N,
%     \@@_if_detect_internals_ok:NF
%   }
%   After splitting at each |__| and removing the leading item from the
%   sequence (since it does not follow |__|), remove everything after
%   any space or end-of-line to get a good approximation of the control
%   sequence (for the warning message).  Then check if that starts with
%   something allowed: |@@| module name and |:| or |_|, or if the
%   relevant boolean is set |kernel_| (it seems safe to assume we will
%   not define a |\__kernel:...| command).  For the message itself
%   remove anything after any |_| or |:| (with either catcode) to get a
%   guess of the module name.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_detect_internals:N #1
  {
    \bool_if:NT \l_@@_detect_internals_bool
      { \@@_detect_internals_aux:N #1 }
  }
\group_begin:
  \char_set_catcode_active:N \^^M
  \cs_new_protected:Npn \@@_detect_internals_aux:N #1
    {
      \tl_set_eq:NN \l_@@_detect_internals_tl #1
      \tl_replace_all:Non \l_@@_detect_internals_tl { \token_to_str:N _ } { _ }
      \seq_set_split:NnV \l_@@_tmpa_seq { _ _ } \l_@@_detect_internals_tl
      \seq_pop_left:NN \l_@@_tmpa_seq \l_@@_detect_internals_tl
      \seq_map_variable:NNn \l_@@_tmpa_seq \l_@@_detect_internals_tl
        {
          \@@_trim_right:No \l_@@_detect_internals_tl
            \c_catcode_active_space_tl
          \@@_trim_right:Nn \l_@@_detect_internals_tl ^^M
          \@@_if_detect_internals_ok:NF \l_@@_detect_internals_tl
            {
              \tl_set_eq:NN \l_@@_detect_internals_cs_tl \l_@@_detect_internals_tl
              \@@_trim_right:Nn \l_@@_detect_internals_tl _
              \@@_trim_right:Nn \l_@@_detect_internals_tl :
              \@@_trim_right:No \l_@@_detect_internals_tl { \token_to_str:N : }
              \msg_warning:nnxxx { !@@ } { foreign-internal }
                { \tl_to_str:N \l_@@_detect_internals_cs_tl }
                { \tl_to_str:N \l_@@_detect_internals_tl }
                { \tl_to_str:N \g_@@_module_name_tl }
            }
        }
    }
\group_end:
\prg_new_protected_conditional:Npnn \@@_if_detect_internals_ok:N #1 { F }
  {
    \@@_str_if_begin:ooTF {#1} { \g_@@_module_name_tl _ }
      { \prg_return_true: }
      {
        \@@_str_if_begin:ooTF {#1} { \g_@@_module_name_tl : }
          { \prg_return_true: }
          {
            \bool_if:NTF \g_@@_kernel_bool
              {
                \@@_str_if_begin:ooTF {#1} { kernel _ }
                  { \prg_return_true: }
                  { \prg_return_false: }
              }
              { \prg_return_false: }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[rEXP]{\@@_signature_base_form:n}
% \begin{macro}
%   {\@@_signature_base_form_aux:n, \@@_signature_base_form_aux:w}
%   Expands to the \enquote{base form} of the signature.  For instance,
%   given |noxcfvV| it would obtain |nnnNnnn|, or given |ow| it would
%   obtain |nw|.  The loop stops at the first token that is not
%   recognized; the rest is enclosed in \cs{exp_not:n}.
%    \begin{macrocode}
\cs_new:Npn \@@_signature_base_form:n #1
  { \@@_signature_base_form_aux:n #1 \q_stop }
\cs_new:Npn \@@_signature_base_form_aux:n #1
  {
    \str_case:nnTF {#1}
      {
        { N } { N }
        { c } { N }
        { n } { n }
        { o } { n }
        { f } { n }
        { x } { n }
        { V } { n }
        { v } { n }
      }
      { \@@_signature_base_form_aux:n }
      { \@@_signature_base_form_aux:w #1 }
  }
\cs_new:Npn \@@_signature_base_form_aux:w #1 \q_stop
  { \exp_not:n {#1} }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_predicate_from_base:n}
%   Get predicate from a function's base name.  The code is not broken
%   by functions with no signature.  The |n|-type version can be used
%   for keys and other non-control sequences.  The output after
%   |x|-expansion is a string.
%    \begin{macrocode}
\cs_new:Npn \@@_predicate_from_base:n #1
  {
    \@@_get_function_name:n {#1}
    \tl_to_str:n { _p: }
    \@@_get_function_signature:n {#1}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_split_function_do:nn, \@@_split_function_do:on}
% \begin{macro}{\@@_get_function_name:n, \@@_get_function_signature:n}
% \begin{macro}{\@@_split_function_auxi:w, \@@_split_function_auxii:w}
%   Similar to internal functions defined in \pkg{l3basics}, but here we
%   operate on strings directly rather than control sequences.
%    \begin{macrocode}
\cs_new:Npn \@@_get_function_name:n #1
  { \@@_split_function_do:nn {#1} { \use_i:nnn } }
\cs_new:Npn \@@_get_function_signature:n #1
  { \@@_split_function_do:nn {#1} { \use_ii:nnn } }
\cs_set_protected:Npn \@@_tmpa:w #1
  {
    \cs_new:Npn \@@_split_function_do:nn ##1
      {
        \exp_after:wN \@@_split_function_auxi:w
        \tl_to_str:n {##1} \q_mark \c_true_bool
        #1 \q_mark \c_false_bool
        \q_stop
      }
    \cs_new:Npn \@@_split_function_auxi:w
      ##1 #1 ##2 \q_mark ##3##4 \q_stop ##5
      { \@@_split_function_auxii:w {##5} ##1 \q_mark \q_stop {##2} ##3 }
    \cs_new:Npn \@@_split_function_auxii:w
      ##1##2 \q_mark ##3 \q_stop
      { ##1 {##2} }
  }
\exp_args:No \@@_tmpa:w { \token_to_str:N : }
\cs_generate_variant:Nn \@@_split_function_do:nn { o }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}[rEXP]{\@@_key_get_base:nN}
%   Get the base form of a function and store it.  As part of getting
%   the base form, change trailing |T| or |F| to |TF|, skipping that
%   change if the function contains no colon to avoid changing for
%   instance some names ending in \texttt{PDF} or similar.  The various
%   letters |z| serve as end-delimiters different from any outcome of
%   \cs{tl_to_str:n}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_key_get_base:nN #1#2
  {
    \@@_if_almost_str:nTF {#1}
      {
        \@@_key_get_base_TF:nN {#1} \l_@@_tmpa_tl
        \tl_set:Nx #2
          { \@@_split_function_do:on \l_@@_tmpa_tl { \@@_base_form_aux:nnN } }
      }
      { \tl_set:Nn #2 {#1} }
  }
\cs_new:Npx \@@_key_get_base_TF:nN #1#2
  {
    \tl_set:Nx #2 { \exp_not:N \tl_to_str:n {#1} }
    \tl_if_in:NoF #2 { \tl_to_str:n {:} }
      { \exp_not:N \prg_break: }
    \tl_if_in:onT { #2 z } { \tl_to_str:n {TF} z }
      { \exp_not:N \prg_break: }
    \tl_if_in:onT { #2 z } { \tl_to_str:n {T} z }
      {
        \tl_put_right:Nn #2 { \tl_to_str:n {F} }
        \exp_not:N \prg_break:
      }
    \tl_if_in:onT { #2 z } { \tl_to_str:n {F} z }
      {
        \tl_put_right:Nn #2 { z }
        \tl_replace_once:Nnn #2 { \tl_to_str:n {F} z } { \tl_to_str:n {TF} }
        \exp_not:N \prg_break:
      }
    \exp_not:N \prg_break_point:
  }
\cs_new:Npn \@@_base_form_aux:nnN #1#2#3
  {
    \exp_not:n {#1}
    \bool_if:NT #3
      {
        \token_to_str:N :
        \str_if_eq:nnTF { #1 ~ } { \exp_args }
          { \exp_not:n {#2} }
          { \@@_signature_base_form:n {#2} }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_base_form_signature_do:nnn}
%   Do |#2{#1}| if there is no signature, or if |#1| contains two colons
%   in a row (this covers the weird function |\::N| and so on).
%   Otherwise apply |#3| with the following two arguments: the base form
%   of |#1|, and the original signature with an extra pair of braces.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_base_form_signature_do:nnn #1#2#3
  {
    \@@_split_function_do:nn {#1}
      { \@@_base_form_aux:nnnnnN {#1} {#2} {#3} }
  }
\cs_new_protected:Npn \@@_base_form_aux:nnnnnN #1#2#3#4#5#6
  {
    \bool_if:NTF #6
      {
        \tl_if_head_eq_charcode:nNTF {#4} :
          { #2 {#1} }
          {
            \use:x
              {
                \exp_not:n {#3}
                { \@@_base_form_aux:nnN {#4} {#5} #6 }
              }
                {#4} {#5}
          }
      }
      { #2 {#1} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[pTF]{\@@_date_compare:nNn}
% \begin{macro}{\@@_date_compare_aux:nnnNnnn, \@@_date_compare_aux:w}
%   Expects |#1| and |#3| to be dates in the format YYYY-MM-DD (but
%   accepts YYYY or YYYY-MM too).  Compares them using |#2| (one of |<|,
%   |=|, |>|), filling in zeros for missing data.
%    \begin{macrocode}
\prg_new_conditional:Npnn \@@_date_compare:nNn #1#2#3 { TF , T , F , p }
  { \@@_date_compare_aux:w #1--- \q_mark #2 #3--- \q_stop }
\cs_new:Npn \@@_date_compare_aux:w
    #1 - #2 - #3 - #4 \q_mark #5 #6 - #7 - #8 - #9 \q_stop
  {
    \@@_date_compare_aux:nnnNnnn
      { \tl_if_empty:nTF {#1} { 0 } {#1} }
      { \tl_if_empty:nTF {#2} { 0 } {#2} }
      { \tl_if_empty:nTF {#3} { 0 } {#3} }
      #5
      { \tl_if_empty:nTF {#6} { 0 } {#6} }
      { \tl_if_empty:nTF {#7} { 0 } {#7} }
      { \tl_if_empty:nTF {#8} { 0 } {#8} }
  }
\cs_new:Npn \@@_date_compare_aux:nnnNnnn #1#2#3#4#5#6#7
  {
    \int_compare:nNnTF {#1} = {#5}
      {
        \int_compare:nNnTF {#2} = {#6}
          {
            \int_compare:nNnTF {#3} #4 {#7}
              { \prg_return_true: } { \prg_return_false: }
          }
          {
            \int_compare:nNnTF {#2} #4 {#6}
              { \prg_return_true: } { \prg_return_false: }
          }
      }
      {
        \int_compare:nNnTF {#1} #4 {#5}
          { \prg_return_true: } { \prg_return_false: }
      }
    \use_none:n
    \q_stop
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_gprop_name:n, \@@_lseq_name:n}
%   We need to keep track of some information about control sequences
%   (and other strings) that are being (or have been) documented.  Some
%   is stored into global props and some into local seqs, whose name
%   does not follow conventions: it is \cs[no-index]{g_@@} or
%   \cs[no-index]{l_@@} followed by a space and by the string, which can
%   be arbitrary.  We cannot reasonably use a single big |prop| for
%   speed reasons.
%    \begin{macrocode}
\cs_new:Npn \@@_gprop_name:n #1 { g_@@ ~ \tl_to_str:n {#1} }
\cs_new:Npn \@@_lseq_name:n #1 { l_@@ ~ \tl_to_str:n {#1} }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Messages}
%
%    \begin{macrocode}
\msg_new:nnnn { !@@ } { no-signature-TF }
  { Function/macro~'#1'~cannot~be~turned~into~a~conditional. }
  {
    A~function~or~macro~environment~with~option~pTF,~TF~or~noTF~
    received~the~argument~'#1'.~This~function's~name~has~no~
    ':'~hence~it~is~not~clear~where~to~add~'_p'~or~'TF'.~
    Please~follow~expl3~naming~conventions.
  }
\msg_new:nnn { !@@ } { deprecated-function }
  { The~deprecated~function(s)~'#1'~should~have~been~removed~on~#2. }
  
\msg_new:nnn { !@@ } { date-format }
  { The~date~'#1'~should~be~given~in~YYYY-MM-DD~format. }
  
\msg_new:nnn { !@@ } { syntax-nested-function }
  {
    The~'syntax'~environment~should~be~used~in~the~
    innermost~'function'~environment.
  }
\msg_new:nnn { !@@ } { multiple-syntax }
  {
    The~'syntax'~environment~should~only~be~used~once~in~
    a~'function'~environment.
  }
\msg_new:nnn { !@@ } { deprecated-option }
  { The~option~'#1'~has~been~deprecated~for~'#2'. }
  
\msg_new:nnn { !@@ } { foreign-internal }
  {
    A~control~sequence~of~the~form~'...__#1'~was~used.~
    It~should~only~be~used~in~the~module~'#2'
    \tl_if_empty:nF {#3} { ,~not~in~'#3' } .
  }
%    \end{macrocode}
%
% \subsection{Configuration and tweaks}
%
% \begin{macro}{\MakePrivateLetters}
%   A few more letters are \enquote{private} in a \LaTeX3 programming
%   environment.
%    \begin{macrocode}
\cs_gset:Npn \MakePrivateLetters
  {
    \char_set_catcode_letter:N \@
    \char_set_catcode_letter:N \_
    \char_set_catcode_letter:N \:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{CodelineNo}
%   Some configurations which have to do with line numbering. This is now provisioned
% through a key value interface.
%    \begin{macrocode}
\setcounter{StandardModuleDepth}{1}
%\@addtoreset{CodelineNo}{part}
%\tl_replace_once:Nnn \theCodelineNo
%  { \HDorg@theCodelineNo }
%  { \textcolor[gray]{0.5} { \sffamily\tiny\arabic{CodelineNo} } }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\verbatim, \endverbatim}
%   In \file{.dtx} documents, the \env{verbatim} environment adds extra
%   space because it only removes the first \enquote{\%} sign, and not
%   the indentation (typically a space).  Fix it with \pkg{fancyvrb}:
%    \begin{macrocode}

% \cs_gset_eq:NN \verbatim \Verbatim
% \cs_gset_eq:NN \endverbatim \endVerbatim
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ifnot@excluded}
%   This function tests whether a macro name stored in
%   \tn{macro@namepart} was excluded from indexing by \tn{DoNotIndex}.
%   Rather than trying to fix catcodes that come into here, turn
%   everything to string catcodes.  This is somewhat inefficient as we
%   could have ensured that \tn{index@excludelist} has string catcodes
%   in the first place.
%    \begin{macrocode}
\cs_set_protected:Npn \ifnot@excluded
  {
    \exp_args:Nxx \expanded@notin
      { \c_backslash_str \tl_to_str:N \macro@namepart , }
      { \exp_args:NV \tl_to_str:n \index@excludelist }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\pdfstringnewline}
% \begin{macro}{\@@_pdfstring_newline:w}
%   We avoid some hyperref warnings by making |\\| (almost) trivial in
%   bookmarks: more precisely it might be used with a star and an
%   optional argument, which we thus remove using an \pkg{xparse}
%   expandable command.  Since there cannot be trailing optional
%   arguments, pick up an extra mandatory one and put it back.
%    \begin{macrocode}
\cs_new:Npn \pdfstringnewline { : ~ }
\DeclareExpandableDocumentCommand
  { \@@_pdfstring_newline:w } { s o m } { \pdfstringnewline #3 }
\pdfstringdefDisableCommands
  { \cs_set_eq:NN \\ \@@_pdfstring_newline:w }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\cmd, \cs, \tn}
%   They rely on a common auxiliary \cs{@@_cmd:nn} which receives as
%   arguments the options and some tokens whose string representation
%   starts with a backslash (to support cases such as |\cs{pkg_\ldots}|,
%   we do not turn the whole argument into a string).
%    \begin{macrocode}
\DeclareDocumentCommand \cmd { O{} m }
  { \@@_cmd:no {#1} { \token_to_str:N #2 } }
  
\DeclareDocumentCommand \cs  { O{} m }
  { \@@_cmd:no {#1} { \c_backslash_str #2 } }

\DeclareDocumentCommand \tn  { O{} m }
  {
    \@@_cmd:no
      { module = TeX , replace = false , #1 }
      { \c_backslash_str #2 }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\meta}
%   A document-level command.
%    \begin{macrocode}
\DeclareDocumentCommand \meta { m }
  { \@@_meta:n {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \@@_pdfstring_cmd:w,
%     \@@_pdfstring_cs:w,
%     \@@_pdfstring_meta:w
%   }
%   To work within a bookmark, these commands must be expandable.
%    \begin{macrocode}
\DeclareExpandableDocumentCommand
  { \@@_pdfstring_cmd:w } { o m } { \token_to_str:N #2 }
\DeclareExpandableDocumentCommand
  { \@@_pdfstring_cs:w }  { o m } { \textbackslash \tl_to_str:n {#2} }
\cs_new:Npn \@@_pdfstring_meta:w #1
  { < \tl_to_str:n {#1} > }
\pdfstringdefDisableCommands
  {
    \cs_set_eq:NN \cmd  \@@_pdfstring_cmd:w
    \cs_set_eq:NN \cs   \@@_pdfstring_cs:w
    \cs_set_eq:NN \tn   \@@_pdfstring_cs:w
    \cs_set_eq:NN \meta \@@_pdfstring_meta:w
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Arg, \marg, \oarg, \parg}
%   |\marg{text}| prints \marg{text}, \enquote{mandatory argument}.\\
%   |\oarg{text}| prints \oarg{text}, \enquote{optional argument}.\\
%   |\parg{te,xt}| prints \parg{te,xt}, \enquote{picture mode argument}.
%   Finally, \cs{Arg} is the same as \cs{marg}.
%    \begin{macrocode}
\newcommand\Arg[1]
  { \texttt{\char`\{} \meta{#1} \texttt{\char`\}} }
\providecommand\marg[1]{ \Arg{#1} }
\providecommand\oarg[1]{ \texttt[ \meta{#1} \texttt] }
\providecommand\parg[1]{ \texttt( \meta{#1} \texttt) }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\file, \env, \pkg, \cls}
%   This list may change\dots this is just my preference for markup.
%    \begin{macrocode}
\DeclareRobustCommand \file {\nolinkurl}
\DeclareRobustCommand \env {\texttt}

%\DeclareRobustCommand \pkg {\textsf}
%\DeclareRobustCommand \cls {\textsf}

%    \end{macrocode}
% \end{macro}
% \begin{macro}{\EnableDocumentation, \EnableImplementation}
% \begin{macro}{\DisableDocumentation, \DisableImplementation}
%   Control whether to typeset the documentation/implementation or not.
%   These simply set two switches.
%    \begin{macrocode}
\NewDocumentCommand \EnableDocumentation { }
  { \bool_gset_true:N \g_@@_typeset_documentation_bool }
\NewDocumentCommand \EnableImplementation { }
  { \bool_gset_true:N \g_@@_typeset_implementation_bool }
\NewDocumentCommand \DisableDocumentation { }
  { \bool_gset_false:N \g_@@_typeset_documentation_bool }
\NewDocumentCommand \DisableImplementation { }
  { \bool_gset_false:N \g_@@_typeset_implementation_bool }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{environment}{documentation}
% \begin{environment}{implementation}
%   If the documentation/implementation should be typeset, then simply
%   set the boolean \cs{l_@@_in_implementation_bool} which indicates
%   whether we are within the implementation section.  Otherwise use
%   \cs{comment} (and a paired \cs{endcomment}).
%    \begin{macrocode}
\NewDocumentEnvironment { documentation } { }
  {
    \bool_if:NTF \g_@@_typeset_documentation_bool
      { \bool_set_false:N \l_@@_in_implementation_bool }
      { \comment }
  }
  { \bool_if:NF \g_@@_typeset_documentation_bool { \endcomment } }
\NewDocumentEnvironment { implementation } { }
  {
    \bool_if:NTF \g_@@_typeset_implementation_bool
      { \bool_set_true:N \l_@@_in_implementation_bool }
      { \comment }
  }
  { \bool_if:NF \g_@@_typeset_implementation_bool { \endcomment } }
%    \end{macrocode}
% \end{environment}
% \end{environment}

% \begin{environment}{variable}
%   The \env{variable} environment behaves as a \env{function} or
%   \env{macro} environment depending on the part of the document.
%    \begin{macrocode}
\DeclareDocumentEnvironment { variable } { O{} +v }
  {
    \bool_if:NTF \l_@@_in_implementation_bool
      { \@@_macro:nnw { var , #1 } {#2} }
      { \@@_function:nnw {#1} {#2} }
  }
  {
    \bool_if:NTF \l_@@_in_implementation_bool
      { \@@_macro_end: }
      { \@@_function_end: }
  }
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{function}
% \begin{environment}{macro}
%   Environment for documenting function(s), and environment for
%   documenting the implementation of a macro.
%    \begin{macrocode}
\DeclareDocumentEnvironment { function } { O{} +v }
  { \@@_function:nnw {#1} {#2} }
  { \@@_function_end: }
\DeclareDocumentEnvironment { macro } { O{} +v }
  { \@@_macro:nnw {#1} {#2} }
  { \@@_macro_end: }
%    \end{macrocode}
% \end{environment}
% \end{environment}
%
% \begin{environment}{syntax}
%   Syntax block placed next to the list of functions to illustrate
%   their use.  TODO: test that the \env{syntax} environment is only
%   used inside the \env{function} environment, and that it only appears
%   once.
%    \begin{macrocode}
\NewDocumentEnvironment { syntax } { }
  { \@@_syntax:w }
  {
    \@@_syntax_end:
    \ignorespacesafterend
  }
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{texnote}
%   Used to describe information destined to \TeX{} experts only.
%    \begin{macrocode}
\NewDocumentEnvironment { texnote } { }
  {
    \endgraf
    \vspace{3mm}
    \small\textbf{\TeX~hackers~note:}
  }
  {
    \vspace{3mm}
  }
%    \end{macrocode}
% \end{environment}
% \begin{macro}{\CodedocExplain, \CodedocExplainEXP, \CodedocExplainREXP, \CodedocExplainTF}
%   Explanation of stars and |TF| notations, for use in third-party
%   packages.
%    \begin{macrocode}
\NewDocumentCommand { \CodedocExplain } { }
  { \CodedocExplainEXP \ \CodedocExplainREXP \ \CodedocExplainTF }
\NewDocumentCommand { \CodedocExplainEXP } { }
  {
    \raisebox{\baselineskip}[0pt][0pt]{\hypertarget{expstar}{}}%
    \@@_typeset_exp:\ indicates~fully~expandable~functions,~which~
    can~be~used~within~an~\texttt{x}-type~argument~(in~plain~
    \TeX{}~terms,~inside~an~\cs{edef}),~as~well~as~within~an~
    \texttt{f}-type~argument.
  }
\NewDocumentCommand { \CodedocExplainREXP } { }
  {
    \raisebox{\baselineskip}[0pt][0pt]{\hypertarget{rexpstar}{}}%
    \@@_typeset_rexp:\ indicates~
    restricted~expandable~functions,~which~can~be~used~within~an~
    \texttt{x}-type~argument~but~cannot~be~fully~expanded~within~an~
    \texttt{f}-type~argument.
  }
\NewDocumentCommand { \CodedocExplainTF } { }
  {
    \raisebox{\baselineskip}[0pt][0pt]{\hypertarget{explTF}{}}%
    \@@_typeset_TF:\ indicates~conditional~(\texttt{if})~functions~
    whose~variants~with~\texttt{T},~\texttt{F}~and~\texttt{TF}~
    argument~specifiers~expect~different~
    \enquote{true}/\enquote{false}~branches.
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Implementing text markup}
%
% Keys for \cs{cmd}, \cs{cs} and \cs{tn}.
%    \begin{macrocode}
\keys_define:nn { phdd/cmd }
  {
    index     .tl_set:N     = \l_@@_cmd_index_tl        ,
    module    .tl_set:N     = \l_@@_cmd_module_tl       ,
    no-index  .bool_set:N   = \l_@@_cmd_noindex_bool    ,
    replace   .bool_set:N   = \l_@@_cmd_replace_bool    ,
  }
%    \end{macrocode}
%
% \begin{macro}{\@@_cmd:nn, \@@_cmd:no}
%   Apply the key--value \meta{options}~|#1| after setting some
%   default values.  Then (unless |replace=false|) replace |@@| in~|#2|,
%   which is a bit tricky: the |_| must be given the catcode expected by
%   \cs{@@_replace_at_at:N}, but should be reverted to their original
%   catcode (normally active, needed for line-breaking) without
%   rescanning the whole argument.  Then typeset the command in
%   \tn{verbatim@font}, after turning it to harmless characters if
%   needed (and keeping the underscore breakable); in any case, spaces
%   must be turned into \tn{@xobeysp} and we must use \tn{@} to avoid
%   longer spaces after a control sequence that ends for instance with a
%   colon (empty signature).  Finally, produce an index entry.
%   Indexing is suppressed when \cs{l_@@_cmd_noindex_bool} is true.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_cmd:nn #1#2
  {
    \bool_set_false:N \l_@@_cmd_noindex_bool
    \bool_set_true:N \l_@@_cmd_replace_bool
    \tl_set:Nn \l_@@_cmd_index_tl { \q_no_value }
    \tl_set:Nn \l_@@_cmd_module_tl { \q_no_value }
    \keys_set:nn { phdd/cmd } {#1}
    \tl_set:Nn \l_@@_cmd_tl {#2}
    \bool_if:NT \l_@@_cmd_replace_bool
      {
        \tl_set_rescan:Nnn \l_@@_tmpb_tl { } { _ }
        \tl_replace_all:Non \l_@@_cmd_tl \l_@@_tmpb_tl { _ }
        \@@_replace_at_at:N \l_@@_cmd_tl
        \tl_replace_all:Nno \l_@@_cmd_tl { _ } \l_@@_tmpb_tl
      }
%    \end{macrocode}
%
% \paragraph{Typesetting}
% Note the replacement for the underscore is to permit linebreaks.
% The \texttt{underscore} package adds the linebreak,
% and the regex results in applying the breakable underscore only to the \emph{last}
% of a run of underscores, and not if the underscore follows a backslash.
%    \begin{macrocode}
\def\BreakableUnderscore{\leavevmode\nobreak\hskip\z@skip
 %\ifx\f@family\ttdefault \string \else 
 \textunderscore
 %\fi
 \@dischyph\nobreak\hskip\z@skip}
    \mode_if_math:T { \mbox }
      {
        \verbatim@font
        \@@_if_almost_str:VT \l_@@_cmd_tl
          {
            \tl_set:Nx \l_@@_cmd_tl { \tl_to_str:N \l_@@_cmd_tl }
            \bool_if:NT \g_@@_cs_break_bool
              { 
                % underscore is replaced with breakable underscore.
                \regex_replace_all:nnN
                  {([^\\])_([^\_])}
                  {\1\c{BreakableUnderscore}\2}
                  \l_@@_cmd_tl
              }
          }
        \tl_replace_all:Nnn \l_@@_cmd_tl { ~ } { \@xobeysp }
        \l_@@_cmd_tl
        \@
      }
%    \end{macrocode}
% \paragraph{Indexing}
%    \begin{macrocode}
    \bool_if:NF \l_@@_cmd_noindex_bool
      {
        \quark_if_no_value:NF \l_@@_cmd_index_tl
          {
            \tl_set:Nx \l_@@_cmd_tl
              { \c_backslash_str \exp_not:o { \l_@@_cmd_index_tl } }
          }

        \exp_args:No \@@_key_get:n { \l_@@_cmd_tl }
        \quark_if_no_value:NF \l_@@_cmd_module_tl
          {
            \tl_set:Nx \l_@@_index_module_tl
              { \tl_to_str:N \l_@@_cmd_module_tl }
          }
        \@@_special_index_module:ooonN
          { \l_@@_index_key_tl }
          { \l_@@_index_macro_tl }
          { \l_@@_index_module_tl }
          { usage }
          \l_@@_index_internal_bool
      }
  }
\cs_generate_variant:Nn \@@_cmd:nn { no }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \@@_meta:n,
%     \@@_ensuremath_sb:n,
%     \@@_meta_original:n
%   }
%   Store |#1| in \cs{l_@@_tmpa_tl} and replaces every underscore,
%   regardless of its category (\enquote{math toggle},
%   \enquote{alignment}, \enquote{superscript}, \enquote{subscript},
%   \enquote{letter}, \enquote{other}, or \enquote{active}) by
%   \cs{@@_ensuremath_sb:n} (which creates math subscripts), then runs
%   the code used for \tn{meta} in \pkg{doc.sty}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_meta:n #1
  {
    \tl_set:Nn \l_@@_tmpa_tl {#1}
    \tl_map_inline:nn
      { { 3 } { 4 } { 7 } { 8 } { 11 } { 12 } { 13 } }
      {
        \tl_set_rescan:Nnn \l_@@_tmpb_tl
          { \char_set_catcode:nn { `_ } {##1} } { _ }
        \tl_replace_all:Non \l_@@_tmpa_tl \l_@@_tmpb_tl
          { \@@_ensuremath_sb:n }
      }
    \exp_args:NV \@@_meta_original:n \l_@@_tmpa_tl
  }
  
\cs_new_protected:Npn \@@_ensuremath_sb:n #1
  { \ensuremath { \sb {#1} } }
  
% Orginal meta  
\cs_new_protected:Npn \@@_meta_original:n #1
  {
    <%\ensuremath \langle
    \mode_if_math:T { \nfss@text }
    {
      \meta@font@select
      \edef \meta@hyphen@restore
        { \hyphenchar \the \font \the \hyphenchar \font }
      \hyphenchar \font \m@ne
      \language \l@nohyphenation
      \color{themeta}#1 \/
      \meta@hyphen@restore
    }
    >%\ensuremath \rangle
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Common between \env{macro} and \env{function}}
%
% \begin{macro}
%   {
%     \@@_typeset_exp:, \@@_typeset_rexp:,
%     \@@_typeset_TF:, \@@_typeset_aux:n
%   }
%   Used by \cs{@@_macro_single:nNN} and in the \env{function} environment
%   to typeset conditionals and auxiliary functions.
%    \begin{macrocode}
%
\cs_new_protected:Npn \@@_typeset_exp: % check
  { \hyperlink{expstar} {$\star$} }
  
\cs_new_protected:Npn \@@_typeset_rexp:
  { \hyperlink{rexpstar} {\ding{73}} } % hollow star
  
\cs_new_protected:Npn \@@_typeset_TF:
  {
    \hyperlink{explTF}
      {
        \color{themacrocolor} % was black
        \itshape TF
        \makebox[0pt][r]
          {
            \color{red}
            \underline { \phantom{\itshape TF} \kern-0.1em }
          }
      }
  }
\cs_new_protected:Npn \@@_typeset_aux:n #1
  {
    { 
    %\color[gray]{0.5}
    %YL
    \color{themacrocolor} #1 
    }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{docCommand}{__phdd_get_hyper_target:nN}{\Arg{macro name} \Arg{tl var} \hfill\hfill\Arg{oN,xN}}
%   Create a \pkg{hyperref} anchor from a macro name~|#1| and stores it
%   in the token list variable~|#2|.  For instance, |\prg_replicate:nn|
%   gives |doc/function//prg/replicate:nn|.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_get_hyper_target:nN #1#2
  {
    \tl_set:Nx #2 { \tl_to_str:n {#1} }
    \tl_replace_all:Nxn #2 { \c_underscore_str } { / }
    \tl_remove_all:Nx   #2 { \c_backslash_str }
    \tl_put_left:Nn #2 { doc/function// }
  }
\cs_generate_variant:Nn \@@_get_hyper_target:nN { o , x }
%    \end{macrocode}
% \end{docCommand}
%
% \begin{macro}{\@@_names_get_seq:nN}
%   The argument~|#1| (argument of a |function| or |macro| environment)
%   has catcodes $10$ (space), $12$ (other) and $13$ (active).  Sanitize
%   catcodes.  If the |verb| option was used, output a one-item
%   sequence.  Otherwise, remove any \enquote{\%} character at the
%   beginning of a line.  Remove tabs and newlines.  Finally, convert
%   |_@@| and |@@| to |__|\meta{module name} (if it is non-empty).  At
%   this point, \cs{l_@@_tmpa_tl} contains a comma-delimited list of
%   names, where |@| and~|_| have category code letter.  Turn it to a
%   string, parse it as a comma-delimited list (in particular this
%   removes spaces), and output a sequence of function/macro names.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_names_get_seq:nN #1#2
  {
    \tl_set:Nx \l_@@_tmpa_tl { \tl_to_str:n {#1} }
    \bool_if:NTF \l_@@_names_verb_bool
      {
        \seq_clear:N #2
        \seq_put_right:NV #2 \l_@@_tmpa_tl
      }
      {
        \tl_remove_all:Nx \l_@@_tmpa_tl
          { \iow_char:N \^^M \c_percent_str }
        \tl_remove_all:Nx \l_@@_tmpa_tl { \tl_to_str:n { ^ ^ A } }
        \tl_remove_all:Nx \l_@@_tmpa_tl { \iow_char:N \^^I }
        \tl_remove_all:Nx \l_@@_tmpa_tl { \iow_char:N \^^M }
        \@@_detect_internals:N \l_@@_tmpa_tl
        \@@_replace_at_at:N \l_@@_tmpa_tl
        \exp_args:NNx \seq_set_from_clist:Nn #2
          { \tl_to_str:N \l_@@_tmpa_tl }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_names_parse:, \@@_names_parse_one:n}
%   The goal is to group variants together.  We populate
%   \cs{l_@@_names_block_tl} with local sequence variable named with
%   \cs{@@_lseq_name:n} after the base forms.  When encountering a new
%   base form, set the corresponding local sequence to hold the
%   \meta{base name} (stripped of the signature) and add the local
%   sequence to the list \cs{l_@@_names_block_tl}.  In all cases append
%   the signature to the local sequence, which thus takes the form
%   \meta{base name}, \meta{signature_1}, \meta{signature_2} and so on.
%   If the original function had no signature (no colon) then use
%   \cs{scan_stop:} as the signature (there can be no variant).  We
%   special case commands |#1| starting with |\::|, namely weird
%   functions named |\::N| and the like.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_names_parse:
  {
    \tl_clear:N \l_@@_names_block_tl
    \seq_map_function:NN
      \l_@@_names_seq
      \@@_names_parse_one:n
  }
\cs_new_protected:Npn \@@_names_parse_one:n #1
  {
    \@@_split_function_do:nn {#1}
      { \@@_names_parse_one_aux:nnNn }
    {#1}
  }
\cs_new_protected:Npn \@@_names_parse_one_aux:nnNn #1#2#3#4
  {
    \bool_if:NTF #3
      {
        \tl_if_head_eq_charcode:nNTF {#2} :
          { \@@_names_parse_aux:nnn {#4} {#4} { \scan_stop: } }
          {
            \exp_args:Nx \@@_names_parse_aux:nnn
              { \@@_base_form_aux:nnN {#1} {#2} #3 }
              {#1} {#2}
          }
      }
      {
        \bool_if:NT \l_@@_macro_TF_bool
          { \msg_error:nnx { l3doc } { no-signature-TF } {#4} }
        \@@_names_parse_aux:nnn {#4} {#4} { \scan_stop: }
      }
  }
\cs_new_protected:Npn \@@_names_parse_aux:nnn #1
  { \exp_args:Nc \@@_names_parse_aux:Nnn { \@@_lseq_name:n {#1} } }
\cs_new_protected:Npn \@@_names_parse_aux:Nnn #1#2#3
  {
    \tl_if_in:NnF \l_@@_names_block_tl {#1}
      {
        \tl_put_right:Nn \l_@@_names_block_tl {#1}
        \seq_clear_new:N #1
        \seq_put_right:Nn #1 {#2}
      }
    \seq_put_right:Nn #1 {#3}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_names_typeset:}
% \begin{macro}{\@@_names_typeset_auxi:n}
%   This code is in particular used when typesetting function names in a
%   \env{function} environment.  The mapping to \cs{l_@@_names_block_tl}
%   cannot use \cs{tl_map_inline:Nn} because the code following |\\|
%   would not be expandable, thus breaking \tn{bottomrule}.
%
%   Call \cs{@@_names_typeset_auxi:n} on each local sequence (which
%   holds a set of variants).  The first step is to pop the base form
%   and change spaces to category other so
%   that they get displayed eventually.  Then store the variants in
%   \cs{g_@@_variants_seq}, remove the first, which will be displayed
%   more prominently, and reconstruct the actual name, passing it to
%   \cs{@@_names_typeset_auxii:n}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_names_typeset:
  {
    \tl_map_function:NN \l_@@_names_block_tl
      \@@_names_typeset_auxi:n
  }
\cs_new_protected:Npn \@@_names_typeset_auxi:n #1
  {
    \seq_pop:NN #1 \l_@@_tmpa_tl
    \tl_gset_eq:NN \g_@@_base_name_tl \l_@@_tmpa_tl
    \tl_greplace_all:Nno \g_@@_base_name_tl
      { ~ } { \c_catcode_other_space_tl }
    \seq_get:NN #1 \l_@@_tmpa_tl
    \str_if_eq:VnTF \l_@@_tmpa_tl { \scan_stop: }
      {
        \seq_gclear:N \g_@@_variants_seq
        \@@_names_typeset_auxii:x { \g_@@_base_name_tl }
      }
      {
        \seq_gset_eq:NN \g_@@_variants_seq #1
        \seq_gpop:NN \g_@@_variants_seq \l_@@_tmpb_tl
        \@@_names_typeset_auxii:x
          { \g_@@_base_name_tl : \l_@@_tmpb_tl }
      }
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   {\@@_names_typeset_auxii:n, \@@_names_typeset_auxii:x}
%   In case the option |pTF| was given, typeset predicates before the
%   |TF| functions.  In case the option |noTF| was given, typeset the
%   non-|TF| function as well.  Pass the relevant boolean in both cases
%   to control whether to append |TF|.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_names_typeset_auxii:n #1
  {
    \bool_if:NT \l_@@_macro_pTF_bool
      {
        \@@_names_typeset_block:xN
          { \@@_predicate_from_base:n {#1} }
          \c_false_bool
      }
    \bool_if:NT \l_@@_macro_noTF_bool
      { \@@_names_typeset_block:nN {#1} \c_false_bool }
    \@@_names_typeset_block:nN {#1} \l_@@_macro_TF_bool
  }
\cs_generate_variant:Nn \@@_names_typeset_auxii:n { x }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_names_typeset_block:nN, \@@_names_typeset_block:xN}
%   Names in \env{function} and \env{macro} environments are typeset
%   differently.  To distinguish the two note that
%   \cs{l_@@_nested_macro_int} is at least one when in an \env{macro}
%   environment (we assume \env{function} is not nested inside it).  A
%   block is a function with all its variants.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_names_typeset_block:nN
  {
    \int_compare:nNnTF \l_@@_nested_macro_int = 0
      { \@@_typeset_function_block:nN }
      { \@@_macro_typeset_block:nN }
  }
\cs_generate_variant:Nn \@@_names_typeset_block:nN { x }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[pTF]{\@@_if_macro_internal:n}
% \begin{macro}[EXP]{\@@_if_macro_internal_aux:w}
%   Determines whether the given macro should be considered internal or
%   public.  If an option such as |int| was given then the answer is
%   \cs{l_@@_macro_internal_bool}, otherwise check for whether the macro
%   name contains~|__|.
%    \begin{macrocode}
\prg_new_conditional:Npnn \@@_if_macro_internal:n #1 { p , T , F , TF }
  {
    \bool_if:NTF \l_@@_macro_internal_set_bool
      {
        \bool_if:NTF \l_@@_macro_internal_bool
          { \prg_return_true: } { \prg_return_false: }
      }
      {
        \tl_if_empty:fTF
          {
            \exp_after:wN \@@_if_macro_internal_aux:w
            \tl_to_str:n { #1 ~ __ }
          }
          { \prg_return_false: } { \prg_return_true: }
      }
  }
\exp_last_unbraced:NNNNo
  \cs_new:Npn \@@_if_macro_internal_aux:w #1 { \tl_to_str:n { __ } } { }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_names_block_base_map:N}
%   The \cs{l_@@_names_block_tl} contains sequence variables
%   corresponding to different base functions and their variants.  For
%   each such sequence, put the first and second items in
%   \cs{l_@@_tmpa_tl} and \cs{l_@@_tmpb_tl} and build the base
%   function's name.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_names_block_base_map:N #1
  {
    \tl_map_inline:Nn \l_@@_names_block_tl
      {
        \group_begin:
          \seq_set_eq:NN \l_@@_tmpa_seq ##1
          \seq_pop:NN \l_@@_tmpa_seq \l_@@_tmpa_tl
          \seq_get:NN \l_@@_tmpa_seq \l_@@_tmpb_tl
          \exp_args:NNx
        \group_end:
        #1
          {
            \l_@@_tmpa_tl
            \str_if_eq:VnF \l_@@_tmpb_tl { \scan_stop: }
              { : \l_@@_tmpb_tl }
            \bool_if:NT \l_@@_macro_TF_bool { TF }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{The \env{function} environment}
%
%    \begin{macrocode}
\keys_define:nn { l3doc/function }
  {
    TF .value_forbidden:n = true ,
    TF .code:n =
      {
        \bool_set_true:N \l_@@_macro_TF_bool
      } ,
    EXP .value_forbidden:n = true ,
    EXP .code:n =
      {
        \bool_set_true:N \l_@@_macro_EXP_bool
        \bool_set_false:N \l_@@_macro_rEXP_bool
      } ,
    rEXP .value_forbidden:n = true ,
    rEXP .code:n =
      {
        \bool_set_false:N \l_@@_macro_EXP_bool
        \bool_set_true:N \l_@@_macro_rEXP_bool
      } ,
    pTF .value_forbidden:n = true ,
    pTF .code:n =
      {
        \bool_set_true:N \l_@@_macro_pTF_bool
        \bool_set_true:N \l_@@_macro_TF_bool
        \bool_set_true:N \l_@@_macro_EXP_bool
        \bool_set_false:N \l_@@_macro_rEXP_bool
      } ,
    noTF .value_forbidden:n = true ,
    noTF .code:n =
      {
        \bool_set_true:N \l_@@_macro_noTF_bool
        \bool_set_true:N \l_@@_macro_TF_bool
      } ,
    added .code:n = { \@@_date_set:Nn \l_@@_date_added_tl {#1} },
    updated .code:n = { \@@_date_set:Nn \l_@@_date_updated_tl {#1} } ,
    deprecated .code:n = { \@@_deprecated_on:n {#1} } ,
    tested .code:n = { } ,
    label .code:n =
      {
        \clist_set:Nn \l_@@_function_label_clist {#1}
        \bool_set_true:N \l_@@_no_label_bool
      } ,
    verb .value_forbidden:n = true ,
    verb .bool_set:N = \l_@@_names_verb_bool ,
    module .tl_set:N = \l_@@_override_module_tl ,
  }
%    \end{macrocode}
%
% \begin{macro}{\@@_date_set:Nn}
%   Normalize the date into the format \texttt{YYYY-MM-DD}; more
%   precisely month and day are allowed to be single digits.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_date_set:Nn #1#2
  {
    \tl_set:Nn #1 {#2}
    \regex_replace_once:nnNF
      { \A(\d\d\d\d)[-/](\d\d?)[-/](\d\d?)\Z } { \1-\2-\3 } #1
      {
        \msg_error:nnn { !@@ } { date-format } {#2}
        \tl_set:Nn #1 { 1970-01-01 }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_deprecated_on:n}
%   The date comparison function expects two dates in the YYYY-MM-DD
%   format (|-|~is not subtraction here).
%   Complain if a deprecated function should have been removed earlier.
%   In any case, mark it as internal to suppress the text
%   \enquote{documented on page \ldots{}}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_deprecated_on:n #1
  {
    \@@_date_set:Nn \l_@@_tmpa_tl {#1}
    \exp_args:No \@@_date_compare:nNnT
      { \l_@@_tmpa_tl } < { \tex_year:D - \tex_month:D - \tex_day:D }
      {
        \msg_error:nnxx { l3doc } { deprecated-function }
          { \tl_to_str:N \l_@@_macro_argument_tl }
          { \l_@@_tmpa_tl }
      }
    \bool_set_true:N \l_@@_macro_internal_bool
    \bool_set_true:N \l_@@_macro_internal_set_bool
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_function:nnw}
%   \begin{arguments}
%     \item Key--value list.
%     \item Comma-separated list of functions; input has already been
%       sanitised by catcode changes before reading the argument.
%   \end{arguments}
% \begin{macro}{\@@_function_end:}
%   Make sure any paragraph is finished, and similar safe practices at
%   the beginning of an environment which will typeset material.
%   Initialize some variables.  Parse the key--value list.  Clean up the
%   list of functions, then go through them to extract some data.  After
%   this, typeset the function names in the coffin
%   \cs{l_@@_functions_coffin} and measure it to know if it fits in the
%   margin.  Finally, start a vertical coffin for the main part of the
%   environment.  This coffin stops when the environment ends, then all
%   the pieces are assembled into a single coffin, which is typeset.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_function:nnw #1#2
  {
    \@@_function_typeset_start:
    \@@_function_init:
    \tl_set:Nn \l_@@_macro_argument_tl {#2}
    \keys_set:nn { l3doc/function } {#1}
    \@@_names_get_seq:nN {#2} \l_@@_names_seq
    \@@_names_parse:
    \@@_function_typeset:
    \@@_function_reset:
    \@@_function_descr_start:w
  }
\cs_new_protected:Npn \@@_function_end:
  {
    \@@_function_descr_stop:
    \@@_function_assemble:
    \@@_function_typeset_stop:
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   {\@@_function_typeset_start:, \@@_function_typeset_stop:}
%   At the start of the \env{function} environment, before performing
%   any assignment, close the last paragraph, and set up the typesetting
%   scene.  Further code typesets a coffin, so we end the paragraph and
%   allow a page break.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_function_typeset_start:
  {
    \par \bigskip \noindent
  }
\cs_new_protected:Npn \@@_function_typeset_stop:
  {
    \par
    \allowbreak
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_function_init:}
%   Complain if \texttt{function} environments are nested.  Clear
%   various variables.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_function_init:
  {
    \box_if_empty:NF \g_@@_syntax_box
      { \msg_error:nn { l3doc } { syntax-nested-function } }
    \coffin_clear:N \l_@@_descr_coffin
    \box_gclear:N \g_@@_syntax_box
    \coffin_clear:N \l_@@_syntax_coffin
    \coffin_clear:N \l_@@_functions_coffin
    \bool_set_false:N \l_@@_macro_TF_bool
    \bool_set_false:N \l_@@_macro_pTF_bool
    \bool_set_false:N \l_@@_macro_noTF_bool
    \bool_set_false:N \l_@@_macro_EXP_bool
    \bool_set_false:N \l_@@_macro_rEXP_bool
    \bool_set_false:N \l_@@_no_label_bool
    \bool_set_false:N \l_@@_names_verb_bool
    \bool_set_true:N \l_@@_in_function_bool
    \clist_clear:N \l_@@_function_label_clist
    \tl_set:Nn \l_@@_override_module_tl { \q_no_value }
    \char_set_active_eq:NN \< \@@_shorthand_meta:
    \char_set_catcode_active:N \<
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_shorthand_meta:, \@@_shorthand_meta:w}
%   Allow |<...>| to be used as markup for |\meta{...}|.
% As for example \Arg{test}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_shorthand_meta:
  { \mode_if_math:TF { < } { \@@_shorthand_meta:w } }
  
\cs_new_protected_nopar:Npn \@@_shorthand_meta:w #1 > { \meta {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_function_reset:}
%   Clear some variables.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_function_reset:
  {
    \tl_set:Nn \l_@@_override_module_tl { \q_no_value }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_function_typeset:}
%   Typeset in the coffin \cs{l_@@_functions_coffin} the functions listed in
%   \cs{l_@@_names_block_tl} and the relevant dates, then set
%   \cs{l_@@_long_name_bool} to be \texttt{true} if this coffin is
%   larger than the available width in the margin.  The function
%   \cs{@@_typeset_functions:} is quite involved hence given later.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_function_typeset:
  {
    \dim_zero:N \l_@@_trial_width_dim
    \hcoffin_set:Nn \l_@@_functions_coffin { \@@_typeset_functions: }
    \dim_set:Nn \l_@@_trial_width_dim
      { \box_wd:N \l_@@_functions_coffin }
    \bool_set:Nn \l_@@_long_name_bool
      { \dim_compare_p:nNn \l_@@_trial_width_dim > \marginparwidth }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {\@@_function_descr_start:w, \@@_function_descr_stop:}
%   The last step in \cs{@@_function:nnw} (the beginning of a
%   \env{function} environment) is to open a coffin which will capture
%   the description of the function, namely the body of the
%   \env{function} environment.  This is closed by \cs{@@_function_end:}
%   (the end of a \env{function} environment).
%    \begin{macrocode}
\cs_new_protected:Npn \@@_function_descr_start:w
  {
    \vcoffin_set:Nnw \l_@@_descr_coffin { \textwidth }
      \noindent \ignorespaces
  }
\cs_new_protected:Npn \@@_function_descr_stop:
  { \vcoffin_set_end: }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_function_assemble:}
%   The box \cs{g_@@_syntax_box} contains the contents of the syntax
%   environment if it was used.  Now that we have all the pieces, join
%   together the syntax coffin, the names coffin, and the description
%   coffin.  The relative positions depend on whether the names coffin
%   fits in the margin.  Then typeset the combination.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_function_assemble:
  {
    \hcoffin_set:Nn  \l_@@_syntax_coffin
      { \box_use_drop:N \g_@@_syntax_box }
    \bool_if:NTF \l_@@_long_name_bool
      {
        \coffin_join:NnnNnnnn
          \l_@@_output_coffin {hc} {vc}
          \l_@@_syntax_coffin {l} {T}
          {0pt} {0pt}
        \coffin_join:NnnNnnnn
          \l_@@_output_coffin {l} {t}
          \l_@@_functions_coffin  {r} {t}
          {-\marginparsep} {0pt}
        \coffin_join:NnnNnnnn
          \l_@@_output_coffin {l} {b}
          \l_@@_descr_coffin  {l} {t}
          {0.75\marginparwidth + \marginparsep} {-\medskipamount}
        \coffin_typeset:Nnnnn \l_@@_output_coffin
          {\l_@@_descr_coffin-l} {\l_@@_descr_coffin-t}
          {0pt} {0pt}
      }
      {
        \coffin_join:NnnNnnnn
          \l_@@_output_coffin {hc} {vc}
          \l_@@_syntax_coffin {l} {t}
          {0pt} {0pt}
        \coffin_join:NnnNnnnn
          \l_@@_output_coffin {l} {b}
          \l_@@_descr_coffin  {l} {t}
          {0pt} {-\medskipamount}
        \coffin_join:NnnNnnnn
          \l_@@_output_coffin {l} {t}
          \l_@@_functions_coffin  {r} {t}
          {-\marginparsep} {0pt}
        \coffin_typeset:Nnnnn \l_@@_output_coffin
          {\l_@@_syntax_coffin-l} {\l_@@_syntax_coffin-T}
          {0pt} {0pt}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_typeset_functions:}
%   This function builds the \cs{l_@@_functions_coffin} by typesetting the
%   function names (with variants) and the relevant dates in a
%   \env{tabular} environment.  The use of rules \tn{toprule},
%   \tn{midrule} and \tn{bottomrule} requires whatever lies between the
%   last |\\| and the rule to be expandable, making our lives a bit
%   complicated.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_typeset_functions:
  { 
    \small\ttfamily
    \HD@savedestfalse
    \HD@target
    \Hy@MakeCurrentHref { HD. \int_use:N \c@HD@hypercount }
    \renewcommand{\arraystretch}{1.6}
    \begin{tabular} [b] { @{} l @{} >{\hspace{\tabcolsep}} r @{} }
      \hline
      \@@_function_extra_labels:
      \@@_names_typeset:
      \@@_typeset_dates:
      \hline
    \end{tabular}
    \normalfont\normalsize
  }
%    \end{macrocode}
% \end{macro}
%
% ^^A TODO: collect all index targets from a given function environment in a box and stick it at the top.
% \begin{macro}
%   {\@@_typeset_function_block:nN, \@@_typeset_function_block:xN}
% \begin{macro}{\@@_function_index:n, \@@_function_index:x}
%   |#1| is a csname, |#2| a boolean indicating whether to add |TF| or not.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_typeset_function_block:nN #1#2
  {
    \@@_function_index:x
      { #1 \bool_if:NT #2 { \tl_to_str:n {TF} } }
    \@@_function_label:xN {#1} #2
    #1
    \bool_if:NT #2 { \@@_typeset_TF: }
    \@@_typeset_expandability:
    \seq_if_empty:NF \g_@@_variants_seq
      { \@@_typeset_variant_list:nN {#1} #2 }
    \\
  }
\cs_generate_variant:Nn \@@_typeset_function_block:nN { x }
\cs_new_protected:Npn \@@_function_index:n #1
  {
    \seq_gput_right:Nn \g_doc_functions_seq {#1}
    \@@_special_index:nn {#1} { usage }
  }
\cs_generate_variant:Nn \@@_function_index:n { x }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \@@_typeset_expandability:
  {
    &
    \bool_if:NT \l_@@_macro_EXP_bool  { \@@_typeset_exp: }
    \bool_if:NT \l_@@_macro_rEXP_bool { \@@_typeset_rexp: }
  }
%    \end{macrocode}
%
% |#1| is the function, |#2| whether to add |TF|.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_typeset_variant_list:nN #1#2
  {
    \\
    \@@_typeset_aux:n { \@@_get_function_name:n {#1} }
    :
    \int_compare:nTF { \seq_count:N \g_@@_variants_seq == 1 }
      { \seq_use:Nn \g_@@_variants_seq { } }
      {
        \textrm(
          \seq_use:Nn \g_@@_variants_seq { \textrm| }
        \textrm)
      }
    \bool_if:NT #2 { \@@_typeset_TF: }
    \@@_typeset_expandability:
  }
%    \end{macrocode}
%
% |#1| is the function name, |#2| whether to add |TF|.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_function_extra_labels:
  {
    \bool_if:NT \l_@@_no_label_bool
      {
        \clist_map_inline:Nn \l_@@_function_label_clist
          {
            \@@_get_hyper_target:oN { \token_to_str:N ##1 }
              \l_@@_tmpa_tl
            \exp_args:No \label { \l_@@_tmpa_tl }
          }
      }
  }
\cs_new_protected:Npn \@@_function_label:nN #1#2
  {
    \bool_if:NF \l_@@_no_label_bool
      {
        \@@_get_hyper_target:xN
          {
            \exp_not:n {#1}
            \bool_if:NT #2 { \tl_to_str:n {TF} }
          }
          \l_@@_tmpa_tl
        \exp_args:No \label { \l_@@_tmpa_tl }
      }
  }
\cs_generate_variant:Nn \@@_function_label:nN { x }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_typeset_dates:}
%   To display metadata for when functions are added/modified.
%   This function must be expandable since it produces rules for use in
%   alignments.
%    \begin{macrocode}
\cs_new:Npn \@@_typeset_dates:
  {
    \bool_lazy_and:nnF
      { \tl_if_empty_p:N \l_@@_date_added_tl }
      { \tl_if_empty_p:N \l_@@_date_updated_tl }
      { \midrule }
    \tl_if_empty:NF \l_@@_date_added_tl
      {
        \multicolumn { 2 } { @{} r @{} }
          { \scriptsize New: \, \l_@@_date_added_tl } \\
      }

    \tl_if_empty:NF \l_@@_date_updated_tl
      {
        \multicolumn { 2 } { @{} r @{} }
          { \scriptsize Updated: \, \l_@@_date_updated_tl } \\
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_syntax:w, \@@_syntax_end:}
%   Implement the \env{syntax} environment.
%    \begin{macrocode}
\dim_new:N \l_@@_syntax_dim
\cs_new_protected:Npn \@@_syntax:w
  {
    \box_if_empty:NF \g_@@_syntax_box
      { \msg_error:nn { l3doc } { multiple-syntax } }
    \dim_set:Nn \l_@@_syntax_dim
      {
        \textwidth
        \bool_if:NT \l_@@_long_name_bool
          { + 0.75 \marginparwidth - \l_@@_trial_width_dim }
      }
    \hbox_gset:Nw \g_@@_syntax_box
      \small \ttfamily
      \arrayrulecolor{white}
      \begin{tabular} { @{} l @{} }
        \toprule
        \begin{minipage}[t]{\l_@@_syntax_dim}
          \raggedright
          \obeyspaces
          \obeylines
  }
\cs_new_protected:Npn \@@_syntax_end:
  {
        \end{minipage}
      \end{tabular}
      \arrayrulecolor{black}
    \hbox_gset_end:
    \bool_if:NF \l_@@_in_function_bool
      {
        \begin{quote}
          \mode_leave_vertical:
          \box_use_drop:N \g_@@_syntax_box
        \end{quote}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{The \env{macro} environment}
%
% Keyval for the \env{macro} environment.
% TODO: provide document command for documenting keys.
%    \begin{macrocode}
\keys_define:nn { !@@/macro }
  {
    aux .value_forbidden:n = true ,
    aux .code:n =
      {
        \msg_warning:nnnn { !@@ } { deprecated-option }
          { aux } { function/macro }
      } ,
    internal .value_forbidden:n = true ,
    internal .code:n =
      {
        \bool_set_true:N \l_@@_macro_internal_bool
        \bool_set_true:N \l_@@_macro_internal_set_bool
      } ,
    int .value_forbidden:n = true ,
    int .code:n =
      {
        \bool_set_true:N \l_@@_macro_internal_bool
        \bool_set_true:N \l_@@_macro_internal_set_bool
      } ,
    var .value_forbidden:n = true ,
    var .code:n =
      { \bool_set_true:N \l_@@_macro_var_bool } ,
    TF .value_forbidden:n = true ,
    TF .code:n =
      { \bool_set_true:N \l_@@_macro_TF_bool } ,
    pTF .value_forbidden:n = true ,
    pTF .code:n =
      {
        \bool_set_true:N \l_@@_macro_TF_bool
        \bool_set_true:N \l_@@_macro_pTF_bool
        \bool_set_true:N \l_@@_macro_EXP_bool
        \bool_set_false:N \l_@@_macro_rEXP_bool
      } ,
    noTF .value_forbidden:n = true ,
    noTF .code:n =
      {
        \bool_set_true:N \l_@@_macro_TF_bool
        \bool_set_true:N \l_@@_macro_noTF_bool
      } ,
    EXP .value_forbidden:n = true ,
    EXP .code:n =
      {
        \bool_set_true:N \l_@@_macro_EXP_bool
        \bool_set_false:N \l_@@_macro_rEXP_bool
      } ,
    rEXP .value_forbidden:n = true ,
    rEXP .code:n =
      {
        \bool_set_false:N \l_@@_macro_EXP_bool
        \bool_set_true:N \l_@@_macro_rEXP_bool
      } ,
    tested .code:n =
      {
        \bool_set_true:N \l_@@_macro_tested_bool
      } ,
    added .code:n = {} , % TODO
    updated .code:n = {} , % TODO
    deprecated .code:n = { \@@_deprecated_on:n {#1} } ,
    verb .bool_set:N = \l_@@_names_verb_bool ,
    module .tl_set:N = \l_@@_override_module_tl ,
    documented-as .tl_set:N = \l_@@_macro_documented_tl ,
  }
%    \end{macrocode}
%
% \begin{macro}{\@@_macro:nnw}
%   The arguments are a key--value list of \meta{options} and a
%   comma-list of \meta{names}, read verbatim by \pkg{xparse}.  First
%   initialize some variables before applying the \meta{options}, then
%   parse the \meta{names} to get a sequence of macro names, then apply
%   \cs{@@_macro_single:nNN} to each (this step is more subtle than
%   \cs{seq_map_function:NN} because of |TF|/|pTF|/|noTF|).  Finally typeset
%   the macro names in the margin.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_macro:nnw #1#2
  {
    \@@_macro_init:
    \tl_set:Nn \l_@@_macro_argument_tl {#2}
    \keys_set:nn { !@@/macro } {#1}
    \@@_names_get_seq:nN {#2} \l_@@_names_seq
    \@@_names_parse:
    \@@_macro_save_names:
    \@@_names_typeset:
    \@@_macro_dump:
    \@@_macro_reset:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_macro_init:}
%   The booleans hold various key--value options,
%   \cs{l_@@_nested_macro_int} counts the number of \env{macro}
%   environments around the current point (is $0$ outside).
%    \begin{macrocode}
\cs_new_protected:Npn \@@_macro_init:
  {
    \int_incr:N \l_@@_nested_macro_int
    \bool_set_false:N \l_@@_macro_internal_bool
    \bool_set_false:N \l_@@_macro_internal_set_bool
    \bool_set_false:N \l_@@_macro_TF_bool
    \bool_set_false:N \l_@@_macro_pTF_bool
    \bool_set_false:N \l_@@_macro_noTF_bool
    \bool_set_false:N \l_@@_macro_EXP_bool
    \bool_set_false:N \l_@@_macro_rEXP_bool
    \bool_set_false:N \l_@@_macro_var_bool
    \bool_set_false:N \l_@@_macro_tested_bool
    \bool_set_false:N \l_@@_names_verb_bool
    \tl_set:Nn \l_@@_override_module_tl { \q_no_value }
    \tl_clear:N \l_@@_macro_documented_tl
    \cs_set_eq:NN \testfile \@@_print_testfile:n
    \box_clear:N \l_@@_macro_index_box
    \vbox_set:Nn \l_@@_macro_box
      {
        \hbox:n
          {
            \strut
            \int_compare:nNnT \l_@@_macro_int = 0
              { \HD@target }
          }
        \vskip \int_eval:n { \l_@@_macro_int - 1 } \baselineskip
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_macro_reset:}
%   We ensure that \cs{cs} commands nested inside a macro whose module
%   is imposed are not affected.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_macro_reset:
  {
    \tl_set:Nn \l_@@_override_module_tl { \q_no_value }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_macro_save_names:}
%   The list of names defined in a set of \env{macro} environments is
%   eventually used to display on which page they are documented.  If
%   the |documented-as| key is given, use that, otherwise find names in
%   \cs{l_@@_names_block_tl}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_macro_save_names:
  {
    \tl_if_empty:NTF \l_@@_macro_documented_tl
      { \@@_names_block_base_map:N \@@_macro_save_names_aux:n }
      {
        \seq_gput_right:Nf \g_@@_nested_names_seq
          { \exp_after:wN \token_to_str:N \l_@@_macro_documented_tl }
      }
  }
\cs_new_protected:Npn \@@_macro_save_names_aux:n #1
  { \seq_gput_right:Nn \g_@@_nested_names_seq {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_macro_dump:}
%   This calls |\makelabel{}|
%    \begin{macrocode}
\cs_new_protected:Npn \@@_macro_dump:
  {
    \topsep\MacroTopsep
    \trivlist
    \cs_set:Npn \makelabel ##1
      {
        \llap
          {
            \hbox_unpack_clear:N \l_@@_macro_index_box
            \vtop to \baselineskip
              {
                \vbox_unpack_clear:N \l_@@_macro_box
                \vss
              }
          }
      }
    \item [ ]
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_macro_typeset_block:nN}
%   Used to typeset a macro and its variants.  |#1| is the macro name,
%   |#2| is a boolean controlling whether to add |TF|.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_macro_typeset_block:nN #1#2
  {
    \@@_macro_single:nNN {#1} \c_true_bool #2
    \seq_if_empty:NF \g_@@_variants_seq
      {
        \@@_macro_typeset_variant_list:xN
          { \@@_get_function_name:n {#1} } #2
      }
  }
\cs_generate_variant:Nn \@@_macro_typeset_block:nN { x }
\cs_new_protected:Npn \@@_macro_typeset_variant_list:nN #1#2
  {
    \seq_map_inline:Nn \g_@@_variants_seq
      { \@@_macro_single:nNN { #1 : ##1 } \c_false_bool #2 }
  }
\cs_generate_variant:Nn \@@_macro_typeset_variant_list:nN { x }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_macro_single:nNN}
%   The arguments are |#1| a macro name (without |TF|), |#2| a boolean
%   determining whether or not to index, and |#3| whether or not to add |TF|.
%   Let's start to mess around with \cls{doc}'s \env{macro} environment.
%   See \file{doc.dtx} for a full explanation of the original
%   environment.  It's rather \emph{enthusiastically} commented.
%   \begin{arguments}
%     \item Macro/function/whatever name; input has already been
%       sanitised.
%   \end{arguments}
%   The assignments to \cs{saved@macroname} and \cs{saved@indexname}
%   are used by \pkg{doc}'s \cs{changes} mechanism.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_macro_single:nNN #1#2#3
  {
    \tl_set:Nn \saved@macroname {#1}
    \@@_macro_typeset_one:nN {#1} #3
    \bool_if:NT #3 { \DoNotIndex {#1} }
    \exp_args:Nx \@@_macro_index:nN
      { #1 \bool_if:NT #3 { \tl_to_str:n { TF } } }
      #2
  }
\cs_new_protected:Npn \@@_macro_index:nN #1#2
  {
    \DoNotIndex {#1}
    \bool_if:NT #2
      {
        \@@_if_macro_internal:nF {#1}
          { \seq_gput_right:Nn \g_doc_macros_seq {#1} }
        \hbox_set:Nw \l_@@_macro_index_box
          \hbox_unpack_clear:N \l_@@_macro_index_box
          \int_gincr:N \c@CodelineNo
          \@@_special_index:nn {#1} { main }
          \int_gdecr:N \c@CodelineNo
        \exp_args:NNNo \hbox_set_end:
          \tl_set:Nn \saved@indexname { \l_@@_index_key_tl }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_macro_typeset_one:nN}
%   For a long time, \cls{l3doc} collected the macro names as labels in
%   the first items of nested \tn{trivlist}, but these were not closed
%   properly with \tn{endtrivlist}.  Also, it interacted in surprising
%   ways with \pkg{hyperref} targets.  Now, we collect typeset macro
%   names by hand in the box \cs{l_@@_macro_box}.  Note the space |\ |.
%   |#1| is the macro name, |#2| whether to add |TF|.
%   TODO see if we need to label it here.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_macro_typeset_one:nN #1#2
  {
    \vbox_set:Nn \l_@@_macro_box
      { 
        \vbox_unpack_clear:N \l_@@_macro_box
        % YL added 15pt if used in conjuction with listings to avoid overlapping
        % still probelms lining up with codeline. Need to hack doc or doc-v3.
        \hbox { \llap { \@@_print_macroname:nN {#1} #2 \space}\space\space\space\space }
      }
    \int_incr:N \l_@@_macro_int
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_print_macroname:nN}
%   In the name, spaces are replaced by other spaces to ensure they get
%   displayed in case there are any.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_print_macroname:nN #1#2
  {
    \strut
    \@@_get_hyper_target:xN
      {
        \exp_not:n {#1}
        \bool_if:NT #2 { \tl_to_str:n {TF} }
      }
      \l_@@_tmpa_tl
    \cs_if_exist:cTF { r@ \l_@@_tmpa_tl }
      { \exp_last_unbraced:NNo \hyperref [ \l_@@_tmpa_tl ] }
      { \use:n }
      {
        \int_compare:nTF { \str_count:n {#1} <= 28 }
          { \MacroFont } {\MacroFont} %{ \MacroLongFont }
        \tl_set:Nn \l_@@_tmpa_tl {#1}
        \tl_replace_all:Nno \l_@@_tmpa_tl
          { ~ } { \c_catcode_other_space_tl }
        \@@_macroname_prefix:o \l_@@_tmpa_tl
        \@@_macroname_suffix:N #2
      }
  }
\cs_new_protected:Npn \@@_macroname_prefix:n #1
  {
    \@@_if_macro_internal:nTF {#1}
      { \@@_typeset_aux:n {#1} } {#1}
  }
\cs_generate_variant:Nn \@@_macroname_prefix:n { o }
\cs_new_protected:Npn \@@_macroname_suffix:N #1
  { \bool_if:NTF #1 { \@@_typeset_TF: } { } }
%    \end{macrocode}
% \end{macro}
%%%%%%
%    \begin{macrocode}
\providecommand \MacroLongFont
  {
    \ttfamily %\fontfamily{lmtt}\fontseries{lc}\small
  }
%    \end{macrocode}
%
% \begin{macro}{\@@_print_testfile:n, \@@_print_testfile_aux:n}
%   Used to show that a macro has a test, somewhere.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_print_testfile:n #1
  {
    \bool_set_true:N \l_@@_macro_tested_bool
    \tl_if_eq:nnF {#1} {*}
      {
        \seq_if_in:NnF \g_@@_testfiles_seq {#1}
          {
            \seq_gput_right:Nn \g_@@_testfiles_seq {#1}
            \par
            \@@_print_testfile_aux:n {#1}
          }
      }
  }
\cs_new_protected:Npn \@@_print_testfile_aux:n #1
  {
    \footnotesize
    (
    \textit
      {
        The~ test~ suite~ for~ this~ command,~
        and~ others~ in~ this~ file,~ is~ \textsf{#1}
      }.
    )\par
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\TestFiles}
%    \begin{macrocode}
\DeclareDocumentCommand \TestFiles {m}
  {
    \par
    \textit
      {
        The~ following~ test~ files~ are~
        used~ for~ this~ code:~ \textsf{#1}.
      }
    \par \ignorespaces
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\UnitTested}
%    \begin{macrocode}
\DeclareDocumentCommand \UnitTested { } { \testfile* }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\TestMissing}
%    \begin{macrocode}
\DeclareDocumentCommand \TestMissing { m }
  { \@@_test_missing:n {#1} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_test_missing:n}
%   Keys in \cs{g_@@_missing_tests_prop} are lists of macros given as
%   arguments of one \env{macro} environment.  Values are pairs of a
%   file name and a comment about the missing tests.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_test_missing:n #1
  {
    \@@_test_missing_aux:Nxn
      \g_@@_missing_tests_prop
      { \seq_use:Nn \l_@@_names_seq { , } }
      { { \g_file_curr_name_str \c_space_tl (#1) } }
  }
\cs_new_protected:Npn \@@_test_missing_aux:Nnn #1#2#3
  {
    \prop_get:NnNTF #1 {#2} \l_@@_tmpa_tl
      { \tl_put_right:Nn \l_@@_tmpa_tl { , #3 } }
      { \tl_set:Nn \l_@@_tmpa_tl {#3} }
    \prop_put:Nno #1 {#2} \l_@@_tmpa_tl
  }
\cs_generate_variant:Nn \@@_test_missing_aux:Nnn { Nx }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_macro_end:}
%   It is too late for anyone to declare a test file for this macro, so
%   we can check now whether the macro is tested.  If the \env{macro}
%   environment which is being ended is the outermost one, then wrap
%   each macro in \tn{texttt} (with the addition of |TF| if relevant)
%   and typeset two informations: that this ends the definition of some
%   macros, and that they are documented on some page.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_macro_end:
  {
    \endtrivlist
    \@@_macro_end_check_tested:
    \int_compare:nNnT \l_@@_nested_macro_int = 1
      { \@@_macro_end_style:n { \@@_print_end_definition: } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_macro_end_check_tested:}
%   If the |checktest| option was issued and the macro is not an
%   auxiliary nor a variable (and it does not have a test), then add it
%   to the sequence of non-tested macros.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_macro_end_check_tested:
  {
    \bool_lazy_all:nT
     {
       { \g_@@_checktest_bool }
       { ! \l_@@_macro_var_bool }
       { ! \l_@@_macro_tested_bool }
     }
     {
       \seq_set_filter:NNn \l_@@_tmpa_seq \l_@@_names_seq
         { ! \@@_if_macro_internal_p:n {##1} }
       \seq_gput_right:Nx \g_@@_not_tested_seq
         {
           \seq_use:Nn \l_@@_tmpa_seq { , }
           \bool_if:NTF \l_@@_macro_pTF_bool {~(pTF)}
             { \bool_if:NT \l_@@_macro_TF_bool {~(TF)} }
         }
     }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_macro_end_style:n}
%   Style for the extra information at the end of a top-level
%   \env{macro} environment.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_macro_end_style:n #1
  {
    \nobreak \noindent
    { \footnotesize ( \emph{#1} ) \par }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \@@_print_end_definition:,
%     \@@_macro_end_wrap_item:n,
%     \@@_print_documented:
%   }
%   Surround each item by \tn{texttt}, replacing |_|
%   by \tn{_} as well.  Then list the
%   macro names through \cs{seq_use:Nnnn}, unless there are too many.
%   Finally, if the macro is neither auxiliary nor internal, add a link
%   to where it is documented.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_macro_end_wrap_item:n #1
  {
    \tl_set:Nn \l_@@_tmpa_tl {#1}
    \tl_replace_all:Non \l_@@_tmpa_tl
      { \token_to_str:N _ } { \_ }
    \texttt { \l_@@_tmpa_tl }
  }
\cs_new_protected:Npn \@@_print_end_definition:
  {
    \seq_set_map:NNn \l_@@_tmpa_seq
      \g_@@_nested_names_seq
      { \exp_not:n { \@@_macro_end_wrap_item:n {##1} } }
    End~ definition~ for~
    \int_compare:nTF { \seq_count:N \l_@@_tmpa_seq <= 3 }
      {
        \seq_use:Nnnn \l_@@_tmpa_seq
          { \,~and~ } { \,,~ } { \,,~and~ }
      }
      { \seq_item:Nn \l_@@_tmpa_seq {1}\,~and~others }
    \@.
    \@@_print_documented:
  }
\cs_new_protected:Npn \@@_print_documented:
  {
    \seq_gset_filter:NNn \g_@@_nested_names_seq
      \g_@@_nested_names_seq
      { ! \@@_if_macro_internal_p:n {##1} }
      
    \seq_if_empty:NF \g_@@_nested_names_seq
      {
        \int_set:Nn \l_@@_tmpa_int
          { \seq_count:N \g_@@_nested_names_seq }
        %\int_compare:nNnTF \l_@@_tmpa_int = 1 {~This~} {~These~}
        %\bool_if:NTF \l_@@_macro_var_bool {variable} {function}
        % add switch for this
%        \int_compare:nNnTF \l_@@_tmpa_int = 1 {~is~} {s~are~}
%        documented~on~page~
%        \@@_get_hyper_target:xN
%          { \seq_item:Nn \g_@@_nested_names_seq { 1 } }
%          \l_@@_tmpa_tl
%        \exp_args:Nx \pageref { \l_@@_tmpa_tl } .
        
      }
    \seq_gclear:N \g_@@_nested_names_seq
  }
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\DescribeOption}
%   For describing package options.  Due to Joseph Wright.  Name/usage
%   might change soon.
% \DescribeOption{print} A print option.
%    \begin{macrocode}
\newcommand*{\DescribeOption}
  {
    \leavevmode
    \@bsphack
    \begingroup
      \MakePrivateLetters
      \Describe@Option
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand*{\Describe@Option}[1]
  {
    \endgroup
    \marginpar{
      \raggedleft
      \PrintDescribeEnv{#1}
    }
    \SpecialOptionIndex{#1}
    \@esphack
    \ignorespaces
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand*{\SpecialOptionIndex}[1]
  {
    \@bsphack
    \begingroup
      \HD@target
      \let\HDorg@encapchar\encapchar
      \edef\encapchar usage
        {
          \HDorg@encapchar hdclindex{\the\c@HD@hypercount}{usage}
        }
      \index
        {
          #1\actualchar{\protect\ttfamily#1}~(option)
          \encapchar usage
        }
      \index
        {
          options:\levelchar#1\actualchar{\protect\ttfamily#1}
          \encapchar usage
        }
    \endgroup
    \@esphack
  }
%    \end{macrocode}
% \end{macro}
%
% Here are some definitions for additional markup that helps to
% structure your documentation.
%
% 
% 
%     Provides a danger bend, as known from the \TeX{}book.
%   
%   The actual character from the font |manfnt|:
%    \begin{macrocode}
\font \manual = manfnt \scan_stop:
\cs_gset:Npn \dbend { {\manual\char127} }
%    \end{macrocode}
%
% Defines the single danger bend. Use it whenever there is a feature in
% your package that might be tricky to use.  FIXME: Has to be fixed when
% in combination with a macro-definition.
%    \begin{macrocode}
%\newenvironment {danger}
%  {
%    \begin{trivlist}\item[]\noindent
%    \begingroup\hangindent=2pc\hangafter=-2
%    \cs_set:Npn \par{\endgraf\endgroup}
%    \hbox to0pt{\hskip-\hangindent\dbend\hfill}\ignorespaces
%  }
%  {
%    \par\end{trivlist}
%  }
%    \end{macrocode}
%    \begin{macrocode}
\newenvironment{TemplateInterfaceDescription}[1]
  {
    \subsection{The~object~type~`#1'}
    \begingroup
    \@beginparpenalty\@M
    \description
    \def\TemplateArgument##1##2{\item[Arg:~##1]##2\par}
    \def\TemplateSemantics
      {
        \enddescription\endgroup
        \subsubsection*{Semantics:}
      }
  }
  {
    \par\bigskip
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\newenvironment{TemplateDescription}[2]
  {
    \subsection{The~template~`#2'~(object~type~#1)}
    \subsubsection*{Attributes:}
    \begingroup
    \@beginparpenalty\@M
    \description
    \def\TemplateKey##1##2##3##4
      {
        \item[##1~(##2)]##3%
        \ifx\TemplateKey##4\TemplateKey\else
%         \hskip0ptplus3em\penalty-500\hskip 0pt plus 1filll Default:~##4%
          \hfill\penalty500\hbox{}\hfill Default:~##4%
          \nobreak\hskip-\parfillskip\hskip0pt\relax
        \fi
        \par
      }
    \def\TemplateSemantics
      {
        \enddescription\endgroup
        \subsubsection*{Semantics~\&~Comments:}
      }
  }
  { \par \bigskip }
%    \end{macrocode}
%
%    \begin{macrocode}
\newenvironment{InstanceDescription}[4][xxxxxxxxxxxxxxx]
  {
    \subsubsection{The~instance~`#3'~(template~#2/#4)}
    \subsubsection*{Attribute~values:}
    \begingroup
    \@beginparpenalty\@M
    \def\InstanceKey##1##2{\>\textbf{##1}\>##2\\}
    \def\InstanceSemantics{\endtabbing\endgroup
      \vskip-30pt\vskip0pt
      \subsubsection*{Layout~description~\&~Comments:}}
    \tabbing
    xxxx\=#1\=\kill
  }
  { \par \bigskip }
%    \end{macrocode}
%
% \subsection{Inheriting doc}
%
% Code here is taken from \pkg{doc}, stripped of comments and translated
% into \pkg{expl3} syntax. New features are added in various places.
%
% \begin{macro}
%   {\StopEventually, \Finale, \AlsoImplementation, \OnlyDescription}
% 
%   TODO: remove these four commands altogether, document that it is
%   better to use the \env{documentation} and \env{implementation}
%   environments.
%    \begin{macrocode}
\DeclareDocumentCommand \OnlyDescription { }
  { \bool_gset_false:N \g_@@_typeset_implementation_bool }
  
\DeclareDocumentCommand \AlsoImplementation { }
  { \bool_gset_true:N \g_@@_typeset_implementation_bool }
  
\DeclareDocumentCommand \StopEventually { m }
  {
    \bool_if:NTF \g_@@_typeset_implementation_bool
      {
        \@bsphack
        \tl_gset:Nn \g_@@_finale_tl { #1 \check@checksum }
        \init@checksum
        \@esphack
      }
      { #1 \endinput }
  }
  
\DeclareDocumentCommand \Finale { }
  { \tl_use:N \g_@@_finale_tl }
\tl_new:N \g_@@_finale_tl
%    \end{macrocode}
% 
% \end{macro}
%
% \begin{macro}{\@@_input:n}
%   Inputting a file, with some setup: the module name should be empty
%   before the first |<@@=|\meta{module}|>| line in the file.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_input:n #1
  {
    \tl_gclear:N \g_@@_module_name_tl
    \MakePercentIgnore
    \input{#1}
    \MakePercentComment
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DocInput}
%   Modified from \pkg{doc} to accept comma-list input (who has commas
%   in filenames?).
%    \begin{macrocode}

\DeclareDocumentCommand \DocInput { m }
  {
    \clist_map_inline:nn {#1}
      {
        \clist_put_right:Nn \g_docinput_clist {##1}
        \@@_input:n {##1}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DocInputAgain}
%   Uses \cs{g_docinput_clist} to re-input whatever's already been
%   \tn{DocInput}-ed until now.  May be used multiple times.
%    \begin{macrocode}
\DeclareDocumentCommand \DocInputAgain { }
  { \clist_map_function:NN \g_docinput_clist \@@_input:n }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DocInclude}
%   More or less exactly the same as \tn{include}, but uses
%   \tn{DocInput} on a \file{.dtx} file, not \tn{input} on a \file{.tex}
%   file.
%
%    \begin{macrocode}
\DeclareDocumentCommand \DocInclude { m }
  {
    \relax\clearpage
    \docincludeaux
    \IfFileExists{#1.fdd}
      { \cs_set:Npn \currentfile{#1.fdd} }
      { \cs_set:Npn \currentfile{#1.dtx} }
    \int_compare:nNnTF \@auxout = \@partaux
      { \@latexerr{\string\include\space cannot~be~nested}\@eha }
      { \@docinclude #1 }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_gset:Npn \@docinclude #1
  {
    \clearpage
    \immediate\write\@mainaux{\string\@input{#1.aux}}
    \@tempswatrue
    \if@partsw
      \@tempswafalse
      \cs_set:Npx \@tempb{#1}
      \@for\@tempa:=\@partlist\do
        {
          \ifx\@tempa\@tempb\@tempswatrue\fi
        }
    \fi
    \if@tempswa
      \cs_set_eq:NN \@auxout                 \@partaux
      \immediate\openout\@partaux #1.aux
      \immediate\write\@partaux{\relax}
      \cs_set_eq:NN \@ltxdoc@PrintIndex      \PrintIndex
      \cs_set_eq:NN \PrintIndex              \relax
      \cs_set_eq:NN \@ltxdoc@PrintChanges    \PrintChanges
      \cs_set_eq:NN \PrintChanges            \relax
      \cs_set_eq:NN \@ltxdoc@theglossary     \theglossary
      \cs_set_eq:NN \@ltxdoc@endtheglossary  \endtheglossary
      \part{\currentfile}
      {
        \cs_set_eq:NN \ttfamily\relax
        \cs_gset:Npx \filekey
          { \filekey, \thepart = { \ttfamily \currentfile } }
      }
      \DocInput{\currentfile}
      \cs_set_eq:NN \PrintIndex              \@ltxdoc@PrintIndex
      \cs_set_eq:NN \PrintChanges            \@ltxdoc@PrintChanges
      \cs_set_eq:NN \theglossary             \@ltxdoc@theglossary
      \cs_set_eq:NN \endtheglossary          \@ltxdoc@endtheglossary
      \clearpage
      \@writeckpt{#1}
      \immediate \closeout \@partaux
    \else
      \@nameuse{cp@#1}
    \fi
    \cs_set_eq:NN \@auxout \@mainaux
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_gset:Npn \codeline@wrindex #1
  {
    \immediate\write\@indexfile
      {
        \string\indexentry{#1}
          { \filesep \int_use:N \c@CodelineNo }
      }
  }
\tl_gclear:N \filesep
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\docincludeaux}
%    \begin{macrocode}
\cs_gset:Npn \docincludeaux
  {
    \tl_set:Nn \thepart { \alphalph { part } }
    \tl_set:Nn \filesep { \thepart - }
    \cs_set_eq:NN \filekey \use_none:n
    \tl_gput_right:Nn \index@prologue
      {
        \cs_gset:Npn \@oddfoot
          {
            \parbox { \textwidth }
              {
                \strut \footnotesize
                \raggedright { \bfseries File~Key: } ~ \filekey
              }
          }
        \cs_set_eq:NN \@evenfoot \@oddfoot
      }
    \cs_gset_eq:NN \docincludeaux \relax
    \cs_gset:Npn \@oddfoot
      {
        \cs_if_exist:cTF { ver @ \currentfile }
          { File~\thepart :~{\ttfamily\currentfile}~ }
          {
            \GetFileInfo{\currentfile}
            File~\thepart :~{\ttfamily\filename}~
            Date:~\ExplFileDate\ % space
            Version~\ExplFileVersion
          }
        \hfill \thepage
      }
    \cs_set_eq:NN \@evenfoot \@oddfoot
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{The \env{macrocode} environment}
%
% \begin{macro}{\xmacro@code, \@@_xmacro_code:n, \@@_xmacro_code:w}
%   Hook into the \texttt{macrocode} environment in a dirty way:
%   \tn{xmacro@code} is responsible for grabbing (and tokenizing) the
%   body of the environment.  Redefine it to pass what it grabs to
%   \cs{@@_xmacro_code:n}.  This new macro replaces all |@@| by the
%   appropriate module name.  One exceptional case is the
%   |<@@=|\meta{module}|>| lines themselves, where |@@| should not be
%   modified.  Actually, we search for such lines, to set the module
%   name automatically.  We need to be careful: no |<@@=| should appear
%   as such in the code below since \pkg{l3doc} is also typeset using
%   this code.
%
%   TODO: right now, in a line containing |<@@=|\meta{module}|>|, the
%   |@@| are replaced (using different values of the \meta{module}
%   before and after the assignment).  Is this a waste?
%
%
%    \begin{macrocode}
\RequirePackage{colorize}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
%</DOCUM>
%<*colorize>
\ExplSyntaxOn
\bgroup
\obeylines
\tl_new:N \l_@@_store_tl
\egroup

\NewDocumentCommand{\codelinefont}{O{blue} m}
  {\begingroup\bfseries
    \color{#1}
    #2
   \endgroup
  }
  
\def\keyvaluestyle#1
  {
    \begingroup
      =\color{orange}
      %\panunicode #1,
    \endgroup
  }  
%    \end{macrocode}


%    \begin{macrocode}
\regex_const:Nn \c_ifs_regex { ((\\if(x{1}|num|dimen|cat|eof|false|true|mode|mmode|hmode
         |vmode|\_meaning|_mode_|inner|defined|csname|[@a-zA-Z]*)*|\\else)|(\\fi))  }
  \cs_set:Npn \colorizeifs {
	   \regex_replace_all:NnN 
	     {\c_ifs_regex}
	     {
	       \c{codelinefont}[purple500]\cB\{\1\cE\}
	     }\l@@_store_tl
}
%    \end{macrocode}
%    \begin{macrocode}
  % Coffin l33 module. box vbox hbox use same colors
% captures hbox:n hbox_... etc
\clist_gset:Nn\coffinkeywords_clist 
  { {(\\(coffin|box|hbox|vbox)_*[a-zA-Z_]+[^:])},
  }    
\def\coffinkeywordsregex#1{
	   \regex_replace_all:nnN 
	     {#1}
	     {
	       \c{codelinefont}[oprah]\cB\{\1\cE\}
	     }\l@@_store_tl
}

% Key handlers such as |.code| common with \pkg{pgf}.
% reserved words starting with a dot and any number of letters terminating
% with a colon which is not colorized .code 
% For pgf keys we can look for the equal sign to terminate the capture.
\regex_const:Nn \c_handlers_regex { ( ( [.]code|\.value|\.bool|.meta|.choice|\.tl )[a-z\_]*[\:] )  }
  \cs_set:Npn \colorizehandlers {
	   \regex_replace_all:NnN 
	     {\c_handlers_regex}
	     {
	       \c{codelinefont}[thered]\cB\{\1\cE\}
	     }\l@@_store_tl
}
%    \end{macrocode}
%

% \begin{macro}{\colorizemodulekeywords}
% To colorize modules such as |tex_|, |tl_| etc, we use a factory function.
% These are called via a clist, which stores the regexes.
% Best later to choose the colors from a color stack.
% \#1 is the prefix and \#2 is the style to be used. The style is to be 
% changed to use a key value interface down the line.
% This can also be captured in a generic fashion.
%    \begin{macrocode}
\cs_generate_variant:Nn \clist_map_function:NN {cc}
\cs_generate_variant:Nn \regex_replace_all:NnN {cnN}
%    \end{macrocode}
%
% \begin{macro}{\l_@@_regexes_clist}
%  A list to hold simple regular expressions.
%    \begin{macrocode}
\clist_new:N \l_@@_regexes_clist
%    \end{macrocode}
%    \end{macro}
%
% Enables the addition of more keywords, so we can expose it at the programmer interface.
% The |\u| in the regular expression namely, |\u{htl var namei}| matches the exact contents of the token list htl vari. Within
%a |\c{...}| control sequence matching, the |\u| escape sequence only expands its argument
%once, in effect performing |\tl_to_str:v|. Quantifiers are not supported directly: use a
%group.
% \begin{Verbatim}[gobble=1]
% \cs_new_protected:Npn \regex_const:Nn #1#2
%  {
%    \__regex_compile:n {#2}
%    \tl_const:Nx #1 { \exp_not:o \l__regex_internal_regex }
%  }
% \end{Verbatim}
%
% The constant regex in l3regex is defined using |tl_const:Nx|, hence we build a new one from its definition
% to allow us to hook into the keywords list. We first handle modules. Our life is easier as all modules
% in l3 have prefixes with an underscore and can be captured fairly easily.   
%
% \begin{macro}{\phd_more_keywords_tl}
% Token lists holding regex prefixes.
%    \begin{macrocode}
\cs_set:Npn \phd_more_keywords_tl {|phd}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\def\AAA#1{
 %  \regex_const:Nn \c_cs_regex 
   \__regex_compile:n{(\\(cs|regex|seq|tl|clist|dim|char|int|%
group|bool|prg|iow|prop|exp|msg|quark|str|token|keys|q|c|%
coffin|box|hbox|vbox|tex|sys#1)_[a-zA-Z_]+[^:])}
  \tl_set:Nx \c_cs_regex { \exp_not:o \l__regex_internal_regex }
}
%    \end{macrocode}
%
% adds more module prefixes to |\c_cs_regex|
%    \begin{macrocode}
\cs_new:Npn \add_module_prefix:n #1 {
  \tl_put_right:Nn\phd_more_keywords_tl{#1}
  \expandafter\AAA\expandafter{\phd_more_keywords_tl }

}
\cs_generate_variant:Nn \add_module_prefix:n {x,f}
\NewDocumentCommand\AddPrefix{m}
  {
    \add_module_prefix:n {#1}
  }

\add_module_prefix:x {|phdd}


%    \end{macrocode}
%    \begin{macrocode}
\tl_new:N \g_@@_design_colors_tl
\tl_put_right:Nn \g_@@_design_colors_tl 
  {
    \cs_set:Npn \cscolor{\color{blue}}
    \cs_set:Npn \regexcolor{\color{theblue}}
    \cs_set:Npn \seqcolor{\color{purple500}}
    \cs_set:Npn \tlcolor{\color{blue900}}
    \cs_set:Npn \clistcolor{\color{purple800}}
    \cs_set:Npn \dimcolor{\color{unorange}}
    \cs_set:Npn \charcolor{\color{red}}
    \cs_set:Npn \intcolor{\color{red}}
    \cs_set:Npn \groupcolor{\color{red800}}
    \cs_set:Npn \boolcolor{\color{purple800}}
    \cs_set:Npn \prgcolor{\color{purple800}}
    \cs_set:Npn \iowcolor{\color{purple500}}
    \cs_set:Npn \propcolor{\color{red400}}
    \cs_set:Npn \expcolor{\color{redA100}}
    \cs_set:Npn \msgcolor{\color{green900}}
    \cs_set:Npn \quarkcolor{\color{red800}}
    \cs_set:Npn \strcolor{\color{orange700}}
    \cs_set:Npn \tokencolor{\color{orange700}}
    \cs_set:Npn \qcolor{\color{orange500}}
    \cs_set:Npn \ccolor{\color{unorange}}
    \cs_set:Npn \keyscolor{\color{deeporange700}}
    \cs_set:Npn \coffincolor{\color{deeporange700}}
    \cs_set:Npn \boxcolor{\color{deeporange600}}
    \cs_set:Npn \hboxcolor{\color{deeporange500}}
    \cs_set:Npn \vboxcolor{\color{deeporange500}}
    \cs_set:Npn \phdcolor{\color{deeporange900}}
    \cs_set:Npn \phddcolor{\color{deeporange900}}
    \cs_set:Npn \texcolor{\color{red800}}
    \cs_set:Npn \cctabcolor{\color{red800}}
    \cs_set:Npn \intarraycolor{\color{green500}}
    \cs_set:Npn \syscolor{\color{purple500}}
  }

\tl_use:N \g_@@_design_colors_tl

\regex_const:Nn \c_tl_regex {((\\tl_[a-zA-Z_]+[^:])|(\\c_[^_][a-z\_]+tl)) }
\regex_const:Nn \c_seq_regex {((\\seq_[a-zA-Z_]+[^:])|(\\c_[^_][a-z\_]+seq)) }
\regex_const:Nn \c_clist_regex { ((\\clist_[a-zA-Z_]+[^:])|(\\c_[^_][a-z\_]+clist)) }
\regex_const:Nn \c_tex_regex { (\\tex_[a-zA-Z_]+[^:]) }
\regex_const:Nn \c_exp_regex { (\\exp_[a-zA-Z_]+[^:]) }
\regex_const:Nn \c_dim_regex { ((\\bool_[a-zA-Z_]+[^:])|(\\c_[^_][a-z\_]+dim)) }
\regex_const:Nn \c_str_regex { ((\\str_[a-zA-Z_]+[^:])|(\\c_[^_][a-z\_]+str)) }
\regex_const:Nn \c_bool_regex { ((\\bool_[a-zA-Z_]+[^:])|(\\c_[^_][a-z\_]+bool)) }
\regex_const:Nn \c_char_regex { ((\\char_[a-zA-Z_]+[^:])|(\\c_[^_][a-z\_]+char)) }
\regex_const:Nn \c_int_regex { ((\\int_[a-zA-Z_]+[^:])|(\\c_[^_][a-z\_]+int)) }
\regex_const:Nn \c_iow_regex { (\\iow_[a-zA-Z_]+[^:]) }
\regex_const:Nn \c_group_regex { (\\group_[a-zA-Z_]+[^:]) }
\regex_const:Nn \c_box_regex { (\\box_[a-zA-Z_]+[^:]) }
\regex_const:Nn \c_skip_regex { ((\\skip_[a-zA-Z_]+[^:])|(\\c_[^_][a-z\_]+skip)) }
\regex_const:Nn \c_token_regex { ((\\token_[a-zA-Z_]+[^:])|(\\c_[^_][a-z\_]+token)) }
\regex_const:Nn \c_regex_regex { ((\\regex_[a-zA-Z_]+[^:])|(\\c_[^_][a-z\_]+regex)) }

\cs_new:Npn \colorizemodulekeywords #1 #2 
  {
    \cs_set:cpn {currentcolors} {\color{#2}}
    
    \cs_gset:cpn {#1keywordsregex} ##1
      {
	     \regex_replace_all:nnN 
	      { ##1}
	      {
	        \c{codelinefont}[#2]\cB\{\0\cE\}
	      }\l@@_store_tl
      }
      
      \cs_gset:Npn \keywordsregex_aux:n ##1 ##2
      {
	     \regex_replace_all:cnN 
	        {c_cs_regex}
	      {
	        \cB{
	           \c{\2color}\1
	        \cE}
	      }\l@@_store_tl
      }
%    \end{macrocode}
%
% In order to speed up the regular expression processing we predefine
% common module regular expressions
%    \begin{macrocode}      
    \cs_if_free:cTF {c_cs_regex} {  
%      \clist_gset:cn {#1keywords_clist} 
%        { % c if it has a constant c_underscore_str, i.e it has no :
%          {(\\(#1)_[a-zA-Z_]+[^:])},
%          % capture c_something_tl but not c__something_tl
%          {\\c_[^_][a-z\_]+#1}
%        }
%      \clist_map_function:cc {#1keywords_clist} {#1keywordsregex}
    }
    { \keywordsregex_aux:n {#1} {#2}  }
    
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{keywordsregex}{\Arg{regex expression for keywords}}
%    \begin{macrocode}
%\def\keywordsregex#1{
%	   \regex_replace_all:nnN 
%	     {#1}
%	     {
%	       \c{codelinefont}[blue]\cB\{\0\cE\}
%	     }\l@@_store_tl
%}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\colorizebrackets,colorizesquarebrackets}
%    \begin{macrocode}
\regex_const:Nn \c_braces_regex { (\{|\})+ }
\regex_const:Nn \c_square_brackets_regex { [\[\]]+ }
\regex_const:Nn \c_brackets_regex { [\(\)] }

\def\bracescolor#1{\normalcolor\textcolor{thebracescolor}{#1}\normalcolor}

\def\squarebracketscolor#1{\textcolor{thesquarebracketscolor}{#1}}

\def\bracketscolor#1{\bgroup\bfseries\color{thered}#1\egroup}
\cs_set:Npn \colorizebraces #1
  {  	     
	  \regex_replace_all:NnN 
	    {
	      \c_braces_regex
	    }  
	    {
	      \c{bracescolor}\cB\{\0\cE\}
	    }\l@@_store_tl
  }
  
\cs_set:Npn \colorizesquarebrackets #1 
  {  	     
	  \regex_replace_all:NnN 
	    {
	      \c_square_brackets_regex
	    }  
	    {
	      \c{squarebracketscolor}\cB\{\0\cE\}
	    }\l@@_store_tl
  }
\cs_set:Npn \colorizebrackets #1 
  {  	     
	  \regex_replace_all:NnN 
	    {
	      \c_brackets_regex
	    }  
	    {
	      \c{bracketscolor}\0
	    }\l@@_store_tl
  }

% Highlight math operators
% First we do the math operator signs$
\regex_const:Nn \c_math_operator_regex { [\$]+ }

\def\mathoperatorcolor#1
{
  \bgroup
    \bfseries\color{thered}#1
  \egroup
}

\cs_set:Npn \colorizemathoperator #1
  {
	  \regex_replace_all:NnN 
	    {
	      \c_math_operator_regex
	    }  
	    {
	      \c{mathoperatorcolor}\cB\{\0 \cE\}
	    }\l@@_store_tl	
  }  
%    \end{macrocode}
% \end{macro}
% 
%    \begin{macrocode}	  
\cs_new:Npn \colorizexparsedeclarations{
 \regex_replace_all:nnN 
	     {
	       \\(DeclareDocumentCommand|DeclareOption|NewDocumentCommand%
	         |DeclareRobustCommand|NewDocumentEnvironment|r*e*newcommand|newenvironment|def)[\*\{\\\_]
	     }
	     {
	        \c{codelinefont}[blue]\cB\{\1\cE\}
	     }\l@@_store_tl
}	  
%    \end{macrocode}
% 
% 
% The command colorizes the output in macro code. It uses the l3regex package, which
% is inherently slow. It is only called when the key \docAuxKey[phdd]{codecolorize} is set to true. 
% \begin{macro}{\phdd_code_colorize_bool}
%	  \begin{macrocode}
%\bool_new:N \phdd_code_colorize_bool 
%\bool_gset_false:N \phdd_code_colorize_bool
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{colorizecomments}
%    \begin{macrocode}
% Attempt to capture comment strings
% for TeX these are the (%). Note the (\v) in the
% regex is any character for vertical space ^^M.
% Also captures \foo_underscore:N.
% Captures also escape characters # & * - and others.
% Parameter parameter_test
%% 
% % % 
% Capture all characters up to vertical command. Has issues
% as it is not protected and other commands can colorize it.
% 
%
% \ \*  Any number of starting spaces
%  
% [^\<]* Do not colorize guards i.e., %<*guard>, use star as
% we may have only a %.  
% Strategy: capture anything except end of lines. These are 
% modified by \obeylines and \doc uses everypar that makes
% it hard to capture.
\regex_const:Nn \c_comments_regex 
  {  
    (\%\ *\%*[ a-zA-Z\ \\\*\_\:\;\.\!\"\`\'\#\&\-\^\(\)\|\d\=\+\,\@\}\{\[\]\/\% ]*)
  }
  
\cs_gset:Npn \colorizecomments
  {   
      \regex_replace_all:NnN \c_comments_regex 
	     { 
          \c{color}\cB{green800\cE}\1\c{normalcolor}           
        }\l@@_store_tl
  }

%    \end{macrocode} 
% \end{macro}
% 
%    \begin{macrocode}

\cs_gset:Npn \listings_code 
  {
  %\colorizebraces{orangeA700}
%  \colorizesquarebrackets{orange500}
  %\colorizebrackets{thered}
%  \colorizemathoperator{thered}
%% 
%   \colorizehandlers
%  \colorizemodulekeywords{tex}{red500}
%  \colorizemodulekeywords{regex}{red400}
%  \colorizemodulekeywords{exp}{red500}
%  \colorizemodulekeywords{dim}{teal500}
%  \colorizemodulekeywords{mode}{teal500}  
%  \colorizemodulekeywords{clist}{teal600} 
%  \colorizemodulekeywords{str}{unorange}
%  \colorizemodulekeywords{bool}{blue800}
%  \colorizemodulekeywords{tl}{blue600}
%  
%  \colorizemodulekeywords{token}{orange700}
%
  \colorizemodulekeywords{cs}{-thecsmodulecolor}
%  \colorizemodulekeywords{xcol}{thecsmodulecolor}
%  \colorizemodulekeywords{char}{orange900}
%  \colorizemodulekeywords{seq}{blue900}	    
%  \colorizemodulekeywords{iow}{blueprint}	
%  \colorizemodulekeywords{int}{purple500} 
%  \colorizemodulekeywords{dim}{purple500} 
%  \colorizemodulekeywords{tex}{unorange}
%  \colorizemodulekeywords{skip}{purple700}
%  \colorizemodulekeywords{hbox}{purple500}
%  \colorizemodulekeywords{box}{purple500}
%  \colorizemodulekeywords{group}{purple500}
%  \colorizeifs{} 
  %\colorizecomments
  %\commentshack
 % \show\l@@_store_tl  
  
  } 
\ExplSyntaxOff  
%</colorize>  
%<*DOCUM>  
%    \end{macrocode}	     
%	
%    \begin{macrocode} 
\ExplSyntaxOn
\group_begin:
  \char_set_catcode_other:N \^^A
  \char_set_catcode_active:N \^^S
  \char_set_catcode_active:N \^^B
  \char_set_catcode_other:N \^^L
  \char_set_catcode_other:N \^^R
  \char_set_lccode:nn { `\^^A } { `\% }
  \char_set_lccode:nn { `\^^S } { `\  }
  \char_set_lccode:nn { `\^^B } { `\\ }
  \char_set_lccode:nn { `\^^L } { `\{ }
  \char_set_lccode:nn { `\^^R } { `\} }
  \tex_lowercase:D
    {
      \group_end:
      \cs_set_protected:Npn \xmacro@code #1 ^^A ^^S^^S^^S^^S ^^Bend ^^Lmacrocode^^R
        {\@@_xmacro_code:n {#1} \end{macrocode} }
    }

    
\group_begin:
  \bool_set_false:N \phdd_code_colorize_bool
  \char_set_catcode_active:N \<
  \char_set_catcode_active:N \>
%    \end{macrocode}
% We check for guards as well as <nocolor> directive
%    \begin{macrocode}  
  \cs_new_protected:Npn \@@_xmacro_code:n #1
    {
      \tl_if_in:nnTF {#1} { < @ @ = }
        { \@@_xmacro_code:w #1 \q_stop }
        {
          \tl_if_in:nnTF {#1} { < nocolor }
          { 
            \bool_set_false:N \phdd_code_colorize_bool
            \tl_gset:Nn \l_@@_store_tl {#1}
            \@@_detect_internals:N \l_@@_store_tl
            \@@_replace_at_at:N \l_@@_store_tl
            % Call the pretty printer or skip
           
            \bool_if:NTF \phdd_code_colorize_bool
              {
                \listings_code
                \tl_use:N \l_@@_store_tl
              }
            {#1}
            
          }
          {
            \tl_gset:Nn \l_@@_store_tl {#1}
            \@@_detect_internals:N \l_@@_store_tl
            \@@_replace_at_at:N \l_@@_store_tl
            % Call the pretty printer or skip
           
            \bool_if:NTF \phdd_code_colorize_bool
              {
                \listings_code
                \tl_use:N \l_@@_store_tl
              }
            {
             \tl_use:N \l_@@_store_tl
            
             
           % #1
            }
          }  
        }
        
%        \tl_if_in:nnTF {#1} { < nocolor }
%        { \@@_xmacro_code:w #1 \q_stop }
%        {
%          \tl_gset:Nn \l_@@_store_tl {#1}
%          \@@_detect_internals:N \l_@@_store_tl
%          \@@_replace_at_at:N \l_@@_store_tl
%          % Call the pretty printer or skip
%          \bool_set_true:N \phdd_code_colorize_bool
%          \bool_if:NTF \phdd_code_colorize_bool
%            {
%              \listings_code
%              \tl_use:N \l_@@_store_tl
%            }
%            {#1}
%        }
        
    }
    
    

    
  \cs_new_protected:Npn \@@_xmacro_code:w #1 < @ @ = #2 > #3 \q_stop
    {
      \tl_set:Nn \l_@@_tmpa_tl {#1}
      \@@_detect_internals:N \l_@@_tmpa_tl
      \@@_replace_at_at:N \l_@@_tmpa_tl

% We have found the name hence store it
      \tl_gset:Nn \g_@@_module_name_tl {#2}
      \tl_put_right:Nn \l_@@_tmpa_tl { < @ @ = #2 > }

% three reprsents the full code outside the guards 
      \tl_set:Nn \l_@@_tmpb_tl {#3}
% detect interna;      
      \@@_detect_internals:N \l_@@_tmpb_tl
% replace ats      
      \@@_replace_at_at:N \l_@@_tmpb_tl
%          
      \tl_put_right:No \l_@@_tmpa_tl { \l_@@_tmpb_tl }
      \tl_use:N \l_@@_tmpa_tl
    } 
    
    
\group_end:  
%    \end{macrocode}
% 
%
% \subsection{At end document}
%
% Print all defined and documented macros/functions.^^A
%    \begin{macrocode}
\iow_new:N \g_@@_func_iow
\tl_new:N \l_@@_doc_def_tl
\tl_new:N \l_@@_doc_undef_tl
\tl_new:N \l_@@_undoc_def_tl
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \@@_show_functions_defined:
  {
    \bool_lazy_and:nnT
      { \g_@@_typeset_implementation_bool } { \g_@@_checkfunc_bool }
      {
        \iow_term:x { \c_@@_iow_separator_tl \iow_newline: }
        \iow_open:Nn \g_@@_func_iow { \c_sys_jobname_str .cmds }

        \tl_clear:N \l_@@_doc_def_tl
        \tl_clear:N \l_@@_doc_undef_tl
        \tl_clear:N \l_@@_undoc_def_tl
        \seq_map_inline:Nn \g_doc_functions_seq
          {
            \seq_if_in:NnTF \g_doc_macros_seq {##1}
              {
                \tl_put_right:Nx \l_@@_doc_def_tl
                  { ##1 \iow_newline: }
                \iow_now:Nn \g_@@_func_iow { > ~ ##1 }
              }
              {
                \tl_put_right:Nx \l_@@_doc_undef_tl
                  { ##1 \iow_newline: }
                \iow_now:Nn \g_@@_func_iow { ! ~ ##1 }
              }
          }
        \seq_map_inline:Nn \g_doc_macros_seq
          {
            \seq_if_in:NnF \g_doc_functions_seq {##1}
              {
                \tl_put_right:Nx \l_@@_undoc_def_tl
                  { ##1 \iow_newline: }
                \iow_now:Nn \g_@@_func_iow { ? ~ ##1 }
              }
          }
        \@@_functions_typeout:nN
          {
            Functions~both~documented~and~defined: \iow_newline:
            (In~order~of~being~documented)
          }
          \l_@@_doc_def_tl
        \@@_functions_typeout:nN
          { Functions~documented~but~not~defined: }
          \l_@@_doc_undef_tl
        \@@_functions_typeout:nN
          { Functions~defined~but~not~documented: }
          \l_@@_undoc_def_tl

        \iow_close:N \g_@@_func_iow
        \iow_term:x { \c_@@_iow_separator_tl }
      }
  }
\AtEndDocument { \@@_show_functions_defined: }
%    \end{macrocode}
%
% TODO: use \cs{iow_term:x}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_functions_typeout:nN #1#2
  {
    \tl_if_empty:NF #2
      {
        \typeout
          {
            \c_@@_iow_midrule_tl \iow_newline:
            #1 \iow_newline:
            \c_@@_iow_midrule_tl \iow_newline:
            #2
          }
        \tl_clear:N #2
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \@@_show_not_tested:
  {
    \bool_if:NT \g_@@_checktest_bool
      {
        \tl_clear:N \l_@@_tmpa_tl
        \prop_if_empty:NF \g_@@_missing_tests_prop
          {
            \cs_set:Npn \@@_tmpa:w ##1##2
              {
                \iow_newline:
                \space\space\space\space \exp_not:n {##1}
                \clist_map_function:nN {##2} \@@_tmpb:w
              }
            \cs_set:Npn \@@_tmpb:w ##1
              {
                \iow_newline:
                \space\space\space\space\space\space * ~ ##1
              }
            \tl_put_right:Nx \l_@@_tmpa_tl
              {
                \iow_newline: \iow_newline:
                The~ following~ macro(s)~ have~ incomplete~ tests:
                \iow_newline:
                \prop_map_function:NN
                  \g_@@_missing_tests_prop \@@_tmpa:w
              }
          }
        \seq_if_empty:NF \g_@@_not_tested_seq
          {
            \cs_set:Npn \@@_tmpa:w ##1
              { \clist_map_function:nN {##1} \@@_tmpb:w }
            \cs_set:Npn \@@_tmpb:w ##1
              {
                \iow_newline:
                \space\space\space\space ##1
              }
            \tl_put_right:Nx \l_@@_tmpa_tl
              {
                \iow_newline:
                \iow_newline:
                The~ following~ macro(s)~ do~ not~ have~ any~ tests:
                \iow_newline:
                \seq_map_function:NN
                  \g_@@_not_tested_seq \@@_tmpa:w
              }
          }
        \tl_if_empty:NF \l_@@_tmpa_tl
          {
            \int_set:Nn \l_@@_tmpa_int { \tex_interactionmode:D }
            \errorstopmode
            \ClassError { l3doc } { \l_@@_tmpa_tl } { }
            \int_set:Nn \tex_interactionmode:D { \l_@@_tmpa_int }
          }
      }
  }
\AtEndDocument { \@@_show_not_tested: }
%    \end{macrocode}
%
% \subsection{Indexing}
%
% \subsubsection{Userspace commands}
%
% Fix index (for now):
%    \begin{macrocode}
\g@addto@macro \theindex { \MakePrivateLetters }
\cs_gset:Npn \verbatimchar {&}
%    \end{macrocode}
%
%    \begin{macrocode}
\setcounter { IndexColumns } { 2 }
%    \end{macrocode}
%
% Set up the Index to use \tn{part}
%    \begin{macrocode}
\IndexPrologue
  {
    \part*{Index}
    \markboth{Index}{Index}
    \addcontentsline{toc}{part}{Index}
    The~italic~numbers~denote~the~pages~where~the~
    corresponding~entry~is~described,~
    numbers~underlined~point~to~the~definition,~
    all~others~indicate~the~places~where~it~is~used.
  }
%    \end{macrocode}
%
% \begin{macro}{\SpecialIndex}
%   An attempt at affecting how commands which appear within the
%   \env{macrocode} environment are treated in the index.
%    \begin{macrocode}
\cs_gset_protected:Npn \SpecialIndex #1
  {
    \@bsphack
    \@@_special_index:nn {#1} { }
    \@esphack
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\msg_new:nnn { l3doc } { print-index-howto }
  {
    Generate~the~index~by~executing\\
    \iow_indent:n
      { makeindex~-s~gind.ist~-o~\c_sys_jobname_str.ind~\c_sys_jobname_str.idx }
  }
\tl_gput_right:Nn \PrintIndex
  { \AtEndDocument { \msg_info:nn { l3doc } { print-index-howto } } }
%    \end{macrocode}
%
% \subsubsection{Internal index commands}
%
% \begin{macro}{\it@is@a}
%   The index of one-character commands within the \env{macrocode}
%   environment is produced using \tn{it@is@a} \meta{char}.  Alter that
%   command.
%    \begin{macrocode}
\cs_gset_protected:Npn \it@is@a #1
  {
    \use:x
      {
        \@@_special_index_module:nnnnN
          {#1}
          { \bslash #1 }
          { }
          { }
          \c_false_bool
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_special_index:nn}
% ^^A TODO this override is somewhat a hack
%    \begin{macrocode}
\cs_new_protected:Npn \@@_special_index:nn #1#2
  {
    \@@_key_get:n {#1}
    \quark_if_no_value:NF \l_@@_override_module_tl
      { \tl_set_eq:NN \l_@@_index_module_tl \l_@@_override_module_tl }
    \@@_special_index_module:ooonN
      { \l_@@_index_key_tl }
      { \l_@@_index_macro_tl }
      { \l_@@_index_module_tl }
      {#2}
      \l_@@_index_internal_bool
  }
\cs_generate_variant:Nn \@@_special_index:nn { o }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}
%   {
%     \@@_special_index_module:nnnnN,
%     \@@_special_index_module:ooonN,
%     \@@_special_index_aux:nnnnnn,
%     \@@_special_index_set:Nn,
%   }
%   Remotely based on Heiko's replacement to play nicely with
%   \pkg{hypdoc}.  We use \tn{verb} or a \tn{verbatim@font} construction
%   depending on whether the number of tokens in |#2| is equal to its
%   number of characters: if it is not then that suggests that there is
%   a construct such as |\meta{...}|.
%    \begin{macrocode}
\tl_new:N \l_@@_index_escaped_macro_tl
\tl_new:N \l_@@_index_escaped_key_tl
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \@@_special_index_module:nnnnN #1#2#3#4#5
%    \end{macrocode}
% \begin{macroarguments}
% \item key
% \item macro
% \item module
% \item index `type' (\texttt{main}/\texttt{usage}/\emph{etc.})
% \item boolean whether internal command
%
% \end{macroarguments}
%
%    \begin{macrocode}
  {
    \use:x
      {
        \exp_not:n { \@@_special_index_aux:nnnnnn {#1} {#2} }
          \tl_if_empty:nTF {#3}
            { { } { } { } }
            {
              \str_if_eq:nnTF {#3} { TeX }
                {
                  { TeX~and~LaTeX2e }
                  { \string\TeX{}~and~\string\LaTeXe{} }
                }
                {
                  {#3}
                  { %\string\pkg our \pkg is a ref use something else
                   \bgroup\string\color{red}
                   \string\texttt{#3}~\egroup }
                }
              { \bool_if:NT #5 { ~internal } ~commands: }
            }
      }
          {#4}
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_generate_variant:Nn \@@_special_index_module:nnnnN { ooo }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \@@_special_index_aux:nnnnnn #1#2#3#4#5#6
%    \end{macrocode}
% \begin{macroarguments}
% \item key
% \item macro
% \item index subheading string
% \item index subheading text
% \item index subheading suffix (appended to both arg 3 and 4)
% \item index `type' (\texttt{main}/\texttt{usage}/\emph{etc.})
% 
% \end{macroarguments}
%
%    \begin{macrocode}
  {
    \tl_set:Nn \l_@@_index_escaped_key_tl {#1}
    \@@_quote_special_char:N \l_@@_index_escaped_key_tl
    \@@_special_index_set:Nn \l_@@_index_escaped_macro_tl {#2}
    \str_if_eq:onTF { \@currenvir } { macrocode }
      { \codeline@wrindex }
      {
        \str_case:nnF {#6}
          {
            { main }  { \codeline@wrindex }
            { usage } { \index }
          }
          { \HD@target \index }
      }
      {
        \tl_if_empty:nF { #3 #4 #5 }
          { #3 #5 \actualchar #4 #5 \levelchar }
        \l_@@_index_escaped_key_tl
        \actualchar
        {
          \token_to_str:N \verbatim@font \c_space_tl
          \l_@@_index_escaped_macro_tl
        }
        \encapchar
        hdclindex{\the\c@HD@hypercount}{#6}
      }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \@@_special_index_set:Nn #1#2
  {
    \tl_set:Nx #1 { \tl_to_str:n {#2} }
    \@@_if_almost_str:nTF {#2}
      {
        \tl_replace_all:Non #1 { \tl_to_str:n { __ } }
          {
            \verbatimchar
            \token_to_str:N \_ \token_to_str:N \_
            \token_to_str:N \verb * \verbatimchar
          }
        \exp_args:Nx \tl_map_inline:nn
          { \tl_to_str:N \verbatimchar \token_to_str:N _ }
          {
            \tl_replace_all:Nnn #1 {##1}
              {
                \verbatimchar \c_backslash_str ##1
                \token_to_str:N \verb * \verbatimchar
              }
          }
        \tl_set:Nx #1
          {
            \token_to_str:N \verb * \verbatimchar
            #1 \verbatimchar
          }
      }
      {
        \tl_set:Nn #1 {#2}
        \tl_replace_all:Non #1
          { \c_backslash_str }
          { \token_to_str:N \bslash \c_space_tl }
      }
    \@@_quote_special_char:N #1
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_quote_special_char:N}
% Quote some special characters.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_quote_special_char:N #1
  {
    \tl_map_inline:nn { \quotechar \actualchar \encapchar \levelchar }
      {
        \tl_replace_all:Nxn #1
          { \tl_to_str:N ##1 } { \quotechar \tl_to_str:N ##1 }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Finding sort-key and module}
%
% \begin{macro}{\@@_key_get:n}
%   Sets \cs{l_@@_index_macro_tl}, \cs{l_@@_index_key_tl}, and
%   \cs{l_@@_index_module_tl} from |#1|.  The base function is stored by
%   \cs{@@_key_get_base:nN} in \cs{l_@@_index_macro_tl}, falling back to
%   |#1| if it contains markup or has no signature.
%
%   The starting point for the \meta{key} is \cs{l_@@_index_key_tl} as a
%   string.  If it the first character is a backslash, remove
%   it.  Then recognize |expl| functions and variables by the presence
%   of |:| or~|_| and \TeX{}/\LaTeXe{} commands by the presence of~|@|.
%   For |expl| names, we call \cs{@@_key_func:} or \cs{@@_key_var:},
%   which are responsible for removing some characters and finding the
%   module name, while for \TeX{}/\LaTeXe{} commands the module name is
%   |TeX|, and others have an empty module name.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_key_get:n #1
  {
    \@@_key_get_base:nN {#1} \l_@@_index_macro_tl
    \tl_set:Nx \l_@@_index_key_tl
      { \tl_to_str:N \l_@@_index_macro_tl }
    \tl_clear:N \l_@@_index_module_tl
    \tl_if_in:NoTF \l_@@_index_key_tl { \tl_to_str:n { __ } }
      { \bool_set_true:N \l_@@_index_internal_bool }
      { \bool_set_false:N \l_@@_index_internal_bool }
    \exp_last_unbraced:NNo
    \tl_if_head_eq_charcode:oNT
      { \l_@@_index_key_tl } \c_backslash_str
      { \@@_key_pop: }
    \tl_if_in:NoTF \l_@@_index_key_tl { \token_to_str:N : }
      { \@@_key_func: }
      {
        \tl_if_in:NoTF \l_@@_index_key_tl { \token_to_str:N _ }
          { \@@_key_var: }
          {
            \tl_if_in:NoT \l_@@_index_key_tl { \token_to_str:N @ }
              { \tl_set:Nn \l_@@_index_module_tl { TeX } }
          }
      }
  }
\cs_new_protected:Npn \@@_key_pop:
  {
    \tl_set:Nx \l_@@_index_key_tl
      { \tl_tail:N \l_@@_index_key_tl }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_key_trim_module:n, \@@_key_drop_underscores:}
%   Helper that removes from \cs{l_@@_index_module_tl} everything after
%   the first occurence of |#1|.  Helper that removes any leading
%   underscore from \cs{l_@@_index_key_tl}.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_key_trim_module:n #1
  {
    \cs_set:Npn \@@_tmpa:w ##1 #1 ##2 \q_stop
      { \exp_not:n {##1} }
    \tl_set:Nx \l_@@_index_module_tl
      { \exp_after:wN \@@_tmpa:w \l_@@_index_module_tl #1 \q_stop }
  }
\cs_new_protected:Npn \@@_key_drop_underscores:
  {
    \tl_if_head_eq_charcode:oNT { \l_@@_index_key_tl } _
      { \@@_key_pop: \@@_key_drop_underscores: }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_key_func:}
%   The function \cs{@@_key_func:} is used if there is a colon, so
%   either for usual \pkg{expl3} functions or for keys from
%   \pkg{l3keys}.  After removing from the key a leading dot (for the
%   latter case), and any leading underscore, the module name is the
%   part before any colon or underscore.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_key_func:
  {
    \tl_if_head_eq_charcode:oNT { \l_@@_index_key_tl } .
      { \@@_key_pop: }
    \@@_key_drop_underscores:
    \tl_set_eq:NN \l_@@_index_module_tl \l_@@_index_key_tl
    \exp_args:No \@@_key_trim_module:n { \token_to_str:N : }
    \exp_args:No \@@_key_trim_module:n { \token_to_str:N _ }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_key_var:, \@@_key_get_module:}
%   The function \cs{@@_key_var:} covers cases with no~|:| but with~|_|,
%   typically variables but occasionally non-\pkg{expl3} functions such
%   as \Lua{} function with underscores.  First test the second
%   character: if that is~|_| then assume we have a proper variable,
%   otherwise use the part before any underscore as the module name.
%   For variables, distinguish quarks and scan marks (starting with |q|
%   and~|s|), then drop the first letter (local/global/constant marker)
%   and underscores.  If there is no underscore left we had something
%   like \cs{c_zero} which we assume is an integer constant.  If there
%   is one underscore we assume it is a variable like \cs{c_empty_tl}
%   whose module name is the last part.  Otherwise the module name is
%   the part before any underscore.
%    \begin{macrocode}
\cs_new_protected:Npn \@@_key_var:
  {
    \exp_args:Nx \tl_if_head_eq_charcode:nNTF
      { \exp_args:No \str_tail:n \l_@@_index_key_tl } _
      {
        \str_case:fn { \str_head:N \l_@@_index_key_tl }
          {
            { q } { \tl_set:Nn \l_@@_index_module_tl { quark } }
            { s } { \tl_set:Nn \l_@@_index_module_tl { quark } }
          }
        \@@_key_pop:
        \@@_key_pop:
        \@@_key_drop_underscores:
        \tl_if_empty:NT \l_@@_index_module_tl
          {
            \seq_set_split:NoV \l_@@_tmpa_seq
              { \token_to_str:N _ } \l_@@_index_key_tl
            \tl_set:Nx \l_@@_index_module_tl
              {
                \int_case:nnF { \seq_count:N \l_@@_tmpa_seq }
                  {
                    { 0 } { }
                    { 1 } { int }
                    { 2 } { \seq_item:Nn \l_@@_tmpa_seq { 2 } }
                  }
                  { \seq_item:Nn \l_@@_tmpa_seq { 1 } }
              }
          }
      }
      {
        \tl_set_eq:NN \l_@@_index_module_tl \l_@@_index_key_tl
        \exp_args:No \@@_key_trim_module:n { \token_to_str:N _ }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Change history}
%
% Set the change history to use \tn{part}.
% Allow control names to be hyphenated in here\dots
%    \begin{macrocode}
\GlossaryPrologue
  {
    \part*{Change~History}
    {\GlossaryParms\ttfamily\hyphenchar\font=`\-}
    \markboth{Change~History}{Change~History}
    \addcontentsline{toc}{part}{Change~History}
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\msg_new:nnn { !@@ } { print-changes-howto }
  {
    Generate~the~change~list~by~executing\\
    \iow_indent:n
      { makeindex~-s~gglo.ist~-o~\c_sys_jobname_str.gls~
                                      \c_sys_jobname_str.glo }
  }
\tl_gput_right:Nn \PrintChanges
  { \AtEndDocument { \msg_info:nn { !@@ } { print-changes-howto } } }

%
%    \end{macrocode}
%
%  Allocate a counter and use \latexe |\list| to implement this environment.
% For example:
% \begin{macroarguments}
%   \item first argument
%   \item second argument
%   \item third argument
%         \lorem  
% \end{macroarguments}
%
% \begin{macro}{labelargcount,\labelargcount}
%    \begin{macrocode}
\newcounter{phddargcount}
\cs_new:Npn \labelargcount
  {
     \texttt{\#\arabic{phddargcount}\hskip\labelsep$=$}
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\macroarguments,\endmacroarguments}
%    \begin{macrocode}
\cs_new:Npn \macroarguments
  {\list\labelargcount
    {\usecounter{phddargcount}
     \leftmargin=2\leftmargin
     \parsep \z@ \@plus\z@ \@minus\z@
     \topsep 4\p@ \@plus\p@ \@minus2\p@
     \itemsep\z@ \@plus\z@ \@minus\z@
     \def\makelabel##1{\hss\llap{##1}}}
  }
     
\cs_new:Npn \endmacroaruments {\endlist}  
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\AltMacroFont}
% Set doc's font for modules to up, otherwise * cannot be printed
% in unicode fonts (we have issues\ldots)
% \footnotechanges{1.01}{2018/01/18}{Added settings.}
% TODO change to lmtt 
%    \begin{macrocode}
\def\Module{
 \color{green800}
}
\def\AltMacroFont{
 \fontfamily{lmtt}\fontseries{lc}
 }
%    \end{macrocode}
% \end{macro}

\ExplSyntaxOff
%    \begin{macrocode}  
\wlog{************************************************}
\wlog{ END PHD-DOCUMENTATION                          }
\wlog{************************************************}
   
%    \end{macrocode}  
% \Finale
%    \begin{macrocode}
%</DOCUM>
%    \end{macrocode}
\endinput

\*\\\ \%[:punct:]\,\>\<\:\=\-\@\(\)\}\{\[\]]+)\Z