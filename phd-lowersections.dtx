% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd-pkgmanager --- a package to shorten preambles
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
This file provides a phd for defining a class.
%</readme>
%<*readmemd>
###The `phd` LaTeX2e package

The `phd-lowersections` latex package forms part of the `phd` bundle of packages 
and the class with the same name which provide
convenient methods to create new styles for books, reports
and articles. It also loads the most commonly used packages 
and resolves conflicts.

This work consists of the file  `phd-lowersections.dtx`, `phd-specials.dtx`,
and the derived files   `phd-lowersections.ins`,  `phd-lowersections.pdf`, 
and `phd-lowersections.sty`.

###Installation

run
           phd-lua.bat on windows
           pdflatex phd.dtx
           makeindex -s gind.ist -g phd 

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com

### Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use one command:

      \cxset{chapter name font-size = Huge,
             chapter number font-size = HUGE} 

### Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs. At present I estimate
that I have completed about 70% of the work that needs
to be done.

__The package as it stands is not production stable.__ 


%</readmemd>
%
%<*TODO>
1. Change old commands ending in @cx to new style.
2. Revisit fashion template and stewart. All specials need some clean-up. Add supplementary
    keys to these templates.
3. Overall checking.
4. Add a regiter function for new special templates.
5. Add style defaults to enable switching back to defaults easier. 
6. Add new special using l3 coffins. This is probably an ideal use.   
%</TODO>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input l3docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phd-lowersectons --- A package to beautify documents.
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble
%\BaseDirectory{C:/users/admin/my documents/github/phd}
%\usedir{MWE}
\generate{\file{\jobname.sty}{
  \from{\jobname.dtx}{LSECT}
  \from{phd-specials.dtx}{SPECIAL}
  }
  }
%\nopreamble\nopostamble
%</install>
%<install>\endbatchfile
%<*internal>
%\usedir{tex/latex/phd}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\generate{
	\file{README.txt}{\from{\jobname.dtx}{readme}}
  }
\generate{
  \file{\jobname.md}{\from{\jobname.dtx}{readmemd}}
}
\generate{
  \file{\jobname-todo.md}{\from{\jobname.dtx}{TODO}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*driver>
%\listfiles
% \NeedsTeXFormat{LaTeX2e}[2017/04/15]%
% \RequirePackage[2017/04/15]{latexrelease}
%
\documentclass[book,10pt,a4paper,oneside,colorize]{phddoc}
\usepackage[a4paper,left=4.25cm,right=3.75cm,top=3.5cm,bottom=2.5cm]{geometry}
%\usepackage[bottom=3cm]{geometry}
%\savegeometry{std}
%\usepackage{shellesc}
%\usepackage{microtype}
\let\textls\relax
%\usepackage{phd}
%\usepackage{phd-counters}
%\usepackage{phd-colorpalette}
%\usepackage{phd-documentation}
%\usepackage{phd-fontmanager}
%%\usepackage{phd-toc}
%\usepackage{phd-runningheads}
\usepackage{phd-lowersections}
\usepackage{phd-scriptsmanager}
\usepackage{phd-i18n}
\usepackage{makeidx}
\usepackage{amsthm}
\newtheorem{theorem}{Theorem}[section]

\theoremstyle{theorem}
\newtheorem{Rule}{Recommendation}[section]

\theoremstyle{remark}
\newtheorem{Step}{Step}
\sethyperref
\makeatletter
\makeatother
\let\HUGE\Huge
\let\HHUGE\Huge



%\input{defaults-chapters}  FIXME
%\definecolor{bgsexy}{HTML}{FF6927}
%
%\definecolor{creamy}{HTML}{FDEBD7}
     

\sethyperref
\addbibresource{phd1.bib}% Syntax changed must include the .bib
% We use the database biblatex-examples.bib.
\addbibresource{biblatex-examples.bib}
\input{phd-documentation-defaults.def}
\cxset{main font-size=10pt}
%\cxset{chapter number color=black,
%       part format=fashion,
%       chapter format=fashion,
%       section format=hang,
%       part afterindent=off,
%       subsection afterindent=off}
%\usepackage{mathptmx}
\defaultfontfeatures{Ligatures=TeX}
\setmainfont[UprightFont=TimesLTStd-Roman,
BoldFont=TimesLTStd-Bold,
ItalicFont=TimesLTStd-Italic,
BoldItalicFont=TimesLTStd-BoldItalic
]
{TimesLTStd-Roman}

%\setmonofont[Scale=0.95]{FiraMono}

%\setmainfont[UprightFont=BodoniFLF-Roman,
%BoldFont=BodoniFLF-Bold,
%ItalicFont=BodoniFLF-Italic,
%BoldItalicFont=BodoniFLF-Bold
%]
%{BodoniFLF-Roman}

%\setmainfont{Brill}

\usetikzlibrary{graphs}
\usetikzlibrary{datavisualization}
\cxset{palette unorange, section format=hang}
\urlstyle{rm}

\begin{document}
\DEBUGON
\parindent1em
%offended
{\color{white}
\coverpage{nina-leen}{\pagecolor{white} Book Design }{Camel Press}{HEADINGS DESIGN}{} 
}
\pagestyle{empty}

\secondpage
\thispagestyle{empty}
\clearpage
\frontmatter
\tableofcontents

\pagestyle{headings-spring-onion}
\setcounter{secnumdepth}{4}
\parskip1pt plus.1ex minus.1ex
\mainmatter
\pagenumbering{arabic}
\pagestyle{headings-spring-onion} 
    

\cxset{palette unorange,
       chapter opening=left,
       chapter format=fashion,
%       chapter grow left =-100pt,
%       chapter background-color = bgsexy!10,
%       chapter name=Chapter, 
%       chapter shadow = none,
%       chapter borderline top = 0pt,
%       chapter number color = white,
%       chapter number font-size=HHUGE,
%       chapter numbering=arabic,
%       section format= hang,
%       section number color = thesectiontitlecolor,
%       section number background-color = white,
%       section color  = thesectioncolor,
%       subsection title color=thesubsectiontitlecolor,
%       subsubsection number color = thesubsectionnumbercolor,
%       subsubsection title color = thesubsectiontitlecolor,
%       subsubsection title font-size=huge,
%       subsubsection format = inline,
%       chapter afterindent=false,
%       paragraph format=inline,
%       chapter numbering=arabic,
%       section numbering=arabic,
     } 
\pagestyle{headings-spring-onion}
\DEBUGON
%\input{./sections/bache}
\mainmatter
\let\citep\footcite
\let\citeyearpar\footcite
\let\citet\citetitle
%\input{./sections/fonts}
%
%\input{./sections/box-registers}
%\input{./sections/paragraphs}
%\input{./sections/boxesandglue}
%\input{./sections/rulesandleaders}
%\input{./sections/bibliographies}
%\input{./sections/indices}
%\input{./sections/maths-01}
%%\end{document}
%\input{./sections/languages}
%\input{./sections/dates}
%\input{./sections/characters}
%%\input{./sections/symbols}
%\input{./l3sections/l3seq}
%\input{./sections/numbers}
%\input{./sections/quotationsandotherintrusions}
%\input{./sections/macros}
%\input{./sections/iteration}
%\input{./sections/datastructures}
%\input{./sections/expandafter}
%\input{./sections/futurelet}
%\input{./sections/tables}
%\input{./sections/tikz}
\input{./sections/twowomen}
\input{./sections/twowomenreverse}
\DEBUGOFF
\large
\input{./sections/fonts}
\input{./sections/pgf-visualizations}
\input{./sections/pgf-graphs}
\input{./sections/charting01}
\input{./sections/captions}

%\input{./sections/pgfmanual-en-pgfkeys}
%
%\end{document}
\input{./sections/chapterdesign}
% \input{./sections/lowerlevelheadings}
% \input{./sections/tikz}
\pagestyle{headings-spring-onion}
\DocInput{\jobname.dtx}
\DocInput{phd-specials.dtx}
%\input{test-sectioning}
\printindex
%
% 
\end{document}
%</driver>
% \fi
%  \CheckSum{0}
%  \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \changes{1.0}{2013/01/26}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
% \GetFileInfo{phd.dtx}
% 
%  \def\fileversion{v1.1}          
%  \def\filedate{2012/03/06}
% \title{The \textsf{phd} package.
% \thanks{This
%        file (\texttt{phd.dtx}) has version number \fileversion, last revised
%        \filedate.}
% }
% \author{Dr. Yiannis Lazarides \\ \url{yannislaz@gmail.com}}
% \date{\filedate}
%
%
% 
% ^^A\maketitle
% 
% ^^A\frontmatter
%  ^^A\coverpage{./images/hine02.jpg}{Book Design }{Camel Press}{}{}
%  \newpage
% ^^A\secondpage
% \pagestyle{empty}
%
%
% \raggedbottom
% ^^A  \OnlyDescription
%
% ^^A\StopEventually{\printindex}
%
% \CodelineNumbered
% \pagestyle{headings-spring-onion}
% 
% 
% \part{IMPLEMENTATION AND FRIENDS}
% 
% \long\def\storyi{
% This chapter provides the objectives of the package,
% provides the methodology to attack the problem and discusses
% the difficulties encountered in trying to provide a full
% declarative interface. 
%}
% \chapter{phd-sect Code Implementation Objectives and Strategy}
% 
% \epigraph{
% I was reflecting on the convoluted Java frameworks widely adopted at work. Those hefty frameworks brought coding structures and conventions to large engineering teams; meanwhile, they also sucked the fun of programming like a Pastafarian monster slurping all the tomato sauce on a plate of spaghetti.
%}{\href{http://blog.zmxv.com/2015/07/code-golf-at-google.html}{Zhen Wang}}
%
% We start by outlining what we are trying to achieve with this package:
% \ExplSyntaxOn
%
% \ExplSyntaxOff
%
% \begin{description}
% \item[Declarative Interface] To provide a declarative interface to enable users to modify headings by
%       setting keys, rather than writing macros. In a nutshell, declarative programming consists of instructing a program on what needs to be done, instead of telling it how to do it. In practice, this approach entails providing a domain-specific language (DSL) for expressing what the user wants, and shielding them from the low-level constructs (loops, conditionals, assignments) that materialize the desired end state. 
% \item[Granularity] The interface must be able to manupulate properties of headings down to
%       the last detail.
% \item[Compatibility] To provide a compatibility mode, where documents wishing to test the package
% can have an easy switch to switch in and out. This is also important for the testing of the package.
% \item[Predefined templates] To provide a number of templates that cover most of the typical use case.
% \item[Extensibilty] To provide means for a plug-in architecture for extensions. Extensions shall
%       be handled by formatter functions. A key |cxset{chapter format=hang}| will typeset
%       chapters with the hang formatter function.
% \item[Internationalization] Comaptibility with Babel and polyglossia (preferred not to be used), through
%       a common interface with the |phd-i18n| package. Support of bidirectional scripts. 
% \item[Generalization] To provide abstract constructs to enable new headings to be introduced
%      in any language, thus providing true internationalization. \gettext{greek}{appendix}.
% \end{description}
% 
% \section*{Terminology}
%
%  \begin{description}
%  \item [document] Any written item, as a book, article, or letter, especially 
%                  of a factual or informative nature.
%  \item [heading] A division of a document or document series. For a normal
%        book headings are chapters, sections etc. However we allow for
%        specifying a more complex document divided into books, volumes
%        parts etc. For example the Bible has Books, chapters and verses,
%        where a legal document might require divisions such as clauses.
%        In general these divisions are numbered. These document divisions
%        are stored in the comma list |phd_book_divisions_clist|.
%  \item [head] A typeset heading, such as chapter head, or section head.
%        This can include a counter, label and title for example, 
%        \emph{Chapter 1 Introduction}.
%  \item [dom] This is a programming interface that provides a structured
%        representation of the document (a tree) and it defines a way
%        that the structure can be accessed. Although \latexe does not
%        offer a standard way to build such a tree (mainly because
%        \tex does not require the marking of paragraphs, it is 
%        useful to think of the document as a tree structure. We also
%        allow for a semi-automated way to build such a tree (with the 
%        exception that paragraphs are not included).
% \item [element] A part of the document tree that can be styled on
%       its own. For example the chapter label, or the section number.
%
% \end{description}
% \cxset{subsubsection afterskip=3pt}
% \section{Users}
%  We classify users according to the \LaTeX3 terminology as a) programmers b) template designers
%  and c) authors.
% \subsection{Author}
%  We assume that the author has an exising template which she is using but might want to do
%  some minor modifications, for example use an italic shape for the font of the mark, but an 
%  upright font for the page numbers. 
%
% {\obeylines 
%~~ |\cxset|
%~~~~~|{|
%~~~~~~~~\textit{chapter number color}~~|format          = apa,|
%~~~~~~~~\textit{section title font-size} |font-size   = Large,|
%~~~~~|}|
%}  
%
% We follow the idea of representing the basic elements of documents
% as elements, each one having a parent in order to specify
% the element we need to style as accurate as possible. One can think of
% this approach being congruent with objects in other languages.
% As a matter fact nothing stops us from defining a key value
% interface as shown below.
%
% {\obeylines 
%~~ |\cxset|
%~~~~~|{| 
%~~~~~~~~\textit{header.even.mark.font.size}   = |Large,|
%~~~~~~~~\textit{header.even.mark.font.family} = |serif,|
%~~~~~|}|
%}  
%
% This would pehaps make it easier for the template designer, but I have rejected
% the idea as my aim is to make it easy for the author, who can search the template
% and just enter a couple of new proerty values.
%
% \subsection{Template designer}
% The template designer in the example above would have selected the format style
% from a number of predefined formats (templates) or would have created a style
% called \textit{apa} from an existing template and modified it using declarative
% key style.
%
% \subsection{The programmer}
%
% The programmer in the example above could have created the basic format
% \textit{apa} by using both declarative as well as defining or using existing
% macros. To the programmer we offer an extension mechanism, where the contents
% of a |ps@| command are defined. For example the programmer can define a new
% style using \tikzname, but without having to worry about defining full |ps@|
% and their interface.
%
% \subsection{The publisher}
%
% Occassionally the publisher might need further macros and keys to assist with
% revisions, internal tracking and collation of manuscripts from different authors.
%
% \section{Code Architecture}
%
% We depart from the methods of \latexe in two important ways. We split the presentation
% into separate functions called \emph{formatters} that are responsible for \emph{shaping}
% the heading. These functions have the responsibility for applying the key-value settings
% for related keys. These functions are also responsible for handling the star version
% of the macros. This simplify the coding and keeps the responsbilty to the same function
% avoiding duplication of code and the related chances of introducing inconsistencies.
%
% We introduce the notion of a router which is a switch directing the program as to which
% formatter to use.
%
% The main function is the |start_section| which decides if the heading will be added to the
% table of contents, saves some of the input for the use of other modules and macros, adds
% the appropriate marks and calls the router to continue with the typesetting. 
%
% \section{Preliminaries}
%
%  Standard file identification. We first announce the package 
%	 and require that it be used with \LaTeX2e. 
% \iffalse
%<*LSECT>
% \fi
%    \begin{macrocode}    
%<@@=phd>
%    \end{macrocode}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[2017/04/15]%
\ProvidesFile{phd-lowersections}[2017/04/15 v1.0 Better headings (YL)]%
%    \end{macrocode}
%
% 
% \section{Source2e Interface}
% 
% I am not very fond of mixing expl3 control sequences with source2e commands. Here
% we provide an interface for all these commands we might use. 
% This section can be revisited once expl3 code becomes available.
%
% The predicate \docAuxCommand{@ltxcompat} signals to the program if we are in full
% \latexe comaptibility mode. In this mode we use the document division mark-up from
% the relevant default class. None of the keys will be available in this mode.
%
%    \begin{macrocode}
\ExplSyntaxOn
\let\ltxtoday\today
\let\phd_hang_from:nn \@hangfrom
\newif\if@ltxcompat \@ltxcompatfalse
\newif\if@ltxcompatsection \@ltxcompatsectionfalse
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}

%\newcommand\tikzi[1][]{}

\newif\if@DEBUG 
\@DEBUGfalse



\def\DEBUGON{
\@DEBUGtrue
\if@DEBUG  
\def\tikzi[##1]{%
  \begin{tikzpicture}[remember picture,overlay] 
    \draw[<->] (0,0)--(0,.2)--++(-.5,0) node[left,fill=blue!15,text=black]%
      {
        \parbox{2cm} 
        {
          {\sffamily
           \footnotesize ##1 }
         }
        };  
  \end{tikzpicture}%
}
\else
\def\tikzi[##1]{}
\fi}


\def\DEBUGOFF{
\@DEBUGfalse
\if@DEBUG  
\def\tikzi[##1]{%
    \begin{tikzpicture}[remember picture,overlay] 
                \draw[<->] (0,0)--(0,.2)--++(-.5,0) node[left,fill=blue!5,text=black]%
                {
                   \parbox{2cm} 
                    {
                       {\sffamily
                        \footnotesize ##1 }
                    }
                };  
   \end{tikzpicture}%
}
\else
\def\tikzi[##1]{}
\fi
}
  
\DEBUGON
  
%    \end{macrocode}
%
% \section{Key Management}
%
% This part of the code is a bit verbose. We care to provide keys for all
% parameters in order to allow flexibility and easy extensions.
%
%    \begin{macrocode}
\ExplSyntaxOn
\def\lphdsubsectionnumberprefixtl {}
\def\lphdsubsectionnumbersuffixtl {}
\def\lphdsubsubsectionnumberprefixtl{}
\def\lphdsubsubsectionnumbersuffixtl{}
\def\lphdparagraphnumberprefixtl{}
\def\lphdparagraphnumbersuffixtl{}
\def\lphdsubparagraphnumberprefixtl{}
\def\lphdsubparagraphnumbersuffixtl{}
%    \end{macrocode}
%
% \begin{docCommand}{phd_document_type_tl}{\marg{type of document}}
% A macro holding the literal type name of the document, i.e, article,
% proceedings, book, letter etc. This will be used to enable user commands
% to be created for maximum flexibility.
% \end{docCommand}
%
% \begin{docCommand}{@@_document_types_clist}{\marg{list of types provided}}
%  An associated clist that holds all the document types available by the class.
% \end{docCommand}
%
%    \begin{macrocode}
\clist_new:N \@@_document_types_clist {}
%    \end{macrocode}
% The build-in default document types are those provided by the standard
% classes, book, article etc.
%
%    \begin{macrocode}
\tl_new:N \@@_document_type_tl {}
\cs_new_nopar:Npn \@@_set_document_type:n #1 
  {
    \tl_gset:Nn \@@_document_type_tl {#1}
    %create secondary list as well here 
    \clist_gput_right:Nn \@@_document_types_clist {#1}
    \clist_new:c {@@_#1_divisions_clist}
  }
%    \end{macrocode}
%
% We set the default document type as \textit{book}. 
% 
%    \begin{macrocode}  
\@@_set_document_type:n {book}
%    \end{macrocode}
%
% \begin{docCommand} {phd_book_divisions_clist} { \marg{clist} }
%   This clist contains all the book divisions, we later also
%   provide an interface for the user to add new content to it.
%   For example this document is of type book.
% \end{docCommand} 
%
%    \begin{macrocode} 
\cs_new:Npn \@@_set_document_divisions #1 #2 {
  \clist_gset:cn {@@_#1_divisions_clist} {#2}
}  

\@@_set_document_divisions {book}
  {
    part,chapter,section,subsection,subsubsection,
    paragraph,subparagraph
  }
  
\@@_set_document_divisions {article}
  {
    section,subsection,subsubsection,
    paragraph,subparagraph
  }

\@@_set_document_divisions {proc}
  {
    section,subsection,subsubsection,
    paragraph,subparagraph
  }  

\@@_set_document_divisions {journal}  
  {
    volume,article,section,subsection,subsubsection,
    paragraph,subparagraph
  }
%
%    \end{macrocode}
% Somehow controversial, we divide a bible-like book into testament, book, chapter and verse. As we can create
% new ones to one's liking, we leave other religious main body subdivisions for another time.
%    \begin{macrocode}
\@@_set_document_divisions {bible}  
  {
    testament,book,chapter,verse
  }  
%    \end{macrocode}
% The structural elements of the main body of a publication, have been dealt with the code described so
% far. For dealing with the visual parts for such elements we have to define, subdivisions to cater for
% each one of them.
%
% \begin{docCommand} {phd_secondary_clist} {\marg{clist}}
%  Holds a list of all secondary elements for a book. Each main element has an associated
%  number of secondary elements, which are used in typesetting the element. Most sections will have a title, 
%  others will have an associated counter with them. 
% \end{docCommand}
%
%    \begin{macrocode}
\cs_new:Npn \element_delimiter{.}
\clist_new:N \thirdlist
\cs_new:Npn \z_make_names #1 {
   % append to third list
   \clist_map_inline:Nn \@@_book_divisions_clist {
     \clist_put_right:Nn \thirdlist{##1\element_delimiter#1}   
   } 
 }
   
\clist_new:N   \@@_secondary_clist_names_clist 
\clist_gset:Nn \@@_secondary_clist_names_clist 
 {
   label,label_before,number,title, title_before,number_before
 }
% map the two lists and create a third
\clist_map_inline:Nn \@@_secondary_clist_names_clist 
  {
     \z_make_names {#1}
  }
%    \end{macrocode}
% 
% Testing everything so far, we get a mind-boggling list of sub-elements that
% we can provide keys and settings for them. Each one of them will have numerous properties
% associated with them.
%
% \begin{multicols}{2}
% \ExplSyntaxOn
%  \clist_use:Nnnn \thirdlist{,\par}{,\par}{,\par} 
% \ExplSyntaxOff
% \end{multicols}
%    \begin{macrocode}
 \clist_new:N \@@_secondary_clist
 \clist_gset:Nn \@@_secondary_clist 
 { 
   part_label,
   part_label_before,
   part_number, 
   part_title,
   part_title_before   
   part_number_before,
   
   chapter_title,
   section_title,
   subsection_title,
   subsubsection_title,
   paragraph_title,
   subparagraph_title,
   chapter_title_before,
%   
   chapter_label,
   section_label,
   subsection_label,
   subsubsection_label,
   paragraph_label,
   subparagraph_label,
   chapter_label_before,
%  
   chapter_number,section_number,
   subsection_number,subsubsection_number,
   paragraph_number,subparagraph_number,
   
   chapter_number_before,

 }    
%    \end{macrocode}
%
% \begin{docCommand} {phd_create_new_element:nn} { \marg{label}}
%  Creates new dims for primary elements. The label is one of chapter, section
%  etc.
% \end{docCommand} 
%
%
%    \begin{macrocode}
\cs_new:Npn \@@_create_new_element:nn #1 
  {
    \dim_gzero_new:c {l_@@_#1_margin_top_width_dim} %margin
    \dim_gzero_new:c {l_@@_#1_margin_right_width_dim}
    \dim_gzero_new:c {l_@@_#1_margin_bottom_width_dim}
    \dim_gzero_new:c {l_@@_#1_margin_left_width_dim}
    
    \dim_gzero_new:c {l_@@_#1_padding_top_width_dim} %margin
    \dim_gzero_new:c {l_@@_#1_padding_right_width_dim}
    \dim_gzero_new:c {l_@@_#1_padding_bottom_width_dim}
    \dim_gzero_new:c {l_@@_#1_padding_left_width_dim}
    
    \dim_gzero_new:c {l_@@_#1_border_top_width_dim} %margin
    \dim_gzero_new:c {l_@@_#1_border_right_width_dim}
    \dim_gzero_new:c {l_@@_#1_border_bottom_width_dim}
    \dim_gzero_new:c {l_@@_#1_border_left_width_dim}
 }
%    \end{macrocode}
%
% Next we create the secondary elements.
%
%    \begin{macrocode}  
\clist_map_inline:Nn \@@_book_divisions_clist
  {
    \@@_create_new_element:nn {#1}
  }


 
\clist_map_inline:Nn \@@_secondary_clist
  {
    \@@_create_new_element:nn {#1}
  }
  
    
\cs_new:Npn \printproperties
  {
    \input{debug-dims}  
  }    
\ExplSyntaxOff  
%    \end{macrocode}
%
% 
% One simple way to model a key-value store is as a map $f:K \to V$ where $K$ is the set of possible keys and $V$ is the set of possible values.

% Often, each value $v \in V$ will itself be a tuple or \href{https://en.wikipedia.org/wiki/Record_%28computer_science%29}{record}.  You can represent a tuple as a Cartesian cross-product, e.g., $V = V_1 \times V_2 \times \dots \times V_k$.  You can represent a record as either a tuple (if the set of attributes is finite and known in advance), or as a function from attribute names to values.

% Modelling languages like \href{http://alloy.mit.edu/alloy/}{Alloy} can represent such maps natively.  Some modeling languages will use the notation $k.f$ instead of $f(k)$ (i.e., object field access notation instead of function evaluation), but the two are equivalent.

%If you don't want to use functions, but want to stick to just sets, that is also feasible.  You can model any function $f: K \to V$ as a binary relation, i.e., a set $S \subseteq K \times V$ with the additional property that if $(k_1,v_1) \in S$ and $(k_2,v_2) \in S$ and $k_1=k_2$, then $v_1=v_2$.  However this may be less natural.
%
% The function cxset takes two values a prefix and a value and returns $K \to V$. 
% The creator function $ G \circ N$.
%
%  \begin{docCommand} {l_@@_make_new_heading_keys:n} { \Arg{key prefix}\Arg{value prefix} }
%    Creates a new set of keys for an element for exmaple, chapter, section or 
%    chapter title.
%    Not all keys are applicable to all elements (for example numbering), hence the
%    code is split into primary and secondary elements. A primary element is an
%    element whose parent is |document|.
%  \end{docCommand} 
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \l_@@_make_new_heading_keys:n #1 #2
 {
  \cs:w cxset\cs_end:
    {
%    \end{macrocode}
% The first key we define is to set the element name. This is compatible with 
% all classes, e.g. \docAuxCommand{chaptername} (\chaptername) for the name of the chapter, \docAuxCommand{sectionname} (\sectionname) etc.
% Note the difference between the key namespace |chapter| from the value set by the function which is \textit{Chapter}. The latter can be set to anything such as \bgroup\gettext{albanian}{chapter} in 
% Albanian or \gettext{greek}{chapter} in Greek.\egroup 
%
% The handler |.store| is similar to \pgfname's |.store in|, except it accepts a |csname|. 
%
%    \begin{macrocode}    
     #1~name/.store                = #1name, 
%    \end{macrocode}
%
% The module |phd-i18n| provides helpers and captions for internationalization. 
% When creating the set of keys for an element we ensure that the english name exists
% as a default, so we repeat the code. We create
% a path |/phd/locale/en/chaptername| to store the various names. 
%
%    \begin{macrocode}     
     locale/en/#1~name/.store      = #1name,
%    \end{macrocode}     
%
% We avoid having to load packages to set the indentation of the first paragraph after
% a heading on or off. The handler |.onoff| is defined in the phd-handlers package and can
% take a  value of on, off, true, false.  As we use expl3 we get a value of
% \ExplSyntaxOn
%   {\ttfamily  
%   \meaning\chapter_afterindent}~   
% \ExplSyntaxOff 
% for false or off.
%
%    \begin{macrocode}
     #1~afterindent/.onoff         = #1_afterindent, 
% Main text alignment
     #1~align/.textalign           = l_@@_#2_align_tl,       
% spacing     
     #1~beforeskip/.store          = l_@@_#2_beforeskip_tl,
     #1~afterskip/.store           = l_@@_#2_afterskip_tl,
     #1~indent/.store              = l_@@_#2_indent_tl,
%    \end{macrocode}
% The font keys, following the pattern defined in CSS models.      
%    \begin{macrocode}
     #1~font-size/.fontsize        = l_@@_#2_fontsize_tl,
     #1~font-weight/.fontweight    = l_@@_#2_fontweight_tl,
     #1~font-shape/.fontstyle      = l_@@_#2_fontshape_tl,  
     #1~font-style/.fontstyle      = l_@@_#2_fontshape_tl, 
     #1~font-family/.fontfamily    = l_@@_#2_fontfamily_tl, 
     #1~font-face/.fontface        = l_@@_#2_fontface_tl, 
%    \end{macrocode}
% The \meta{element}\docValue{case} can be used to determine the text case, as lower or upper. This will
% have to be extended one day for languages that have difficult folding cases.
%    \begin{macrocode}  
     #1~case/.case                 = l_@@_#2_case_tl,  
%    \end{macrocode}     
% The \meta{element}\docValue{format} is the workhorse of the layout engine. It is similar to templates 
% in other languages. We use a special handler that checks if the format is either in a list or is defined.
% If it has been registered it can have any value, otherwise it needs to follow the convention,
% |\format_|\meta{name}:nn.This API is still not very stable and I might change it down the line.
%    \begin{macrocode}
     #1~format/.format~in          = l_@@_#2_format_tl,   
%    \end{macrocode}
% The following, keys deal with colors. Color names are stored in macros, with |.store|. The colorin macro uses
% |color|\meta{value}. The handler checks that the color exists. If it does not exist it issues an error and maps 
% to the color black. The values \docValue{palette} or \docValue{auto}, have a special meaning. If a palette is defined
% the color will map to |the|\meta{element}|color| or to the element parent color. The inheritance still needs to be
% defined better. \tcbdocmarginnote{Add missing\\colornames in\\ color palette.}
%    \begin{macrocode}     
     #1~background-color/.store        = l_@@_#2_background_color_tl,
     #1~frame-color/.store             = l_@@_#2_frame_color_tl,
     #1~color/.store                   = l_@@_#2_color_tl, 
     #1~shadow/.shadow                 = l_@@_#2_shadow_tl,
%    \end{macrocode}
% The following keys deal with setting values for heading elements that use the `box' model. They are
% normall defined in a similar way to those defined by \pkg{tcolorbox}.
%    \begin{macrocode}
     #1~width/.store                   = l_@@_#2_width,
     #1~arc/.store                     = l_@@_#2_arc_tl,
     #1~grow~left/.store               = l_@@_#2_grow_left_dim,
     #1~grow~right/.store              = l_@@_#2_grow_right_dim,
     #1~rounded~corners/.store         = l_@@_#2_rounded_corners_tl,
% Borderlines     
     #1~borderline~top/.store          = l_@@_#2_borderline_top_tl,
     #1~borderline~right/.store        = l_@@_#2_borderline_right_tl, 
     #1~borderline~bottom/.store       = l_@@_#2_borderline_bottom_tl, 
     #1~borderline~left/.store         = l_@@_#2_borderline_left_tl, 
%    \end{macrocode}
% Borderlines can be colored individually. They can use the palette, auto, cascade values, as previously
% discussed.
%    \begin{macrocode}     
     #1~borderline~top-color/.store    = l_@@_#2_borderline_top_color_tl,
     #1~borderline~right-color/.store  = l_@@_#2_borderline_right_color_tl, 
     #1~borderline~bottom-color/.store = l_@@_#2_borderline_bottom_color_tl, 
     #1~borderline~left-color/.store   = l_@@_#2_borderline_left_color_tl, 
%    \end{macrocode}
% The \meta{element}\docValue{border-top-width} and other similar elements store the dimension of borders,
% padding and margins. 
%    \begin{macrocode}               
% Box borders
     #1~border-top-width/.store        = l_@@_#2_border_top_width_dim,  
     #1~border-right-width/.store      = l_@@_#2_border_right_width_dim, 
     #1~border-bottom-width/.store     = l_@@_#2_border_bottom_width_dim,  
     #1~border-left-width/.store       = l_@@_#2_border_left_width_dim, 
%    \end{macrocode}
% The \meta{element}\docValue{padding-top-width} and other similar keys store the dimensions for padding
% around the box model. 
%    \begin{macrocode}     
% Box padding
     #1~padding-top-width/.store       = l_@@_#2_padding_top_width_dim,  
     #1~padding-right-width/.store     = l_@@_#2_padding_right_width_dim, 
     #1~padding-bottom-width/.store    = l_@@_#2_padding_bottom_width_dim,  
     #1~padding-left-width/.store      = l_@@_#2_padding_left_width_dim, 
% Box margin        
     #1~margin-top-width/.store        = l_@@_#2_margin_top_width_dim,  
     #1~margin-right-width/.store      = l_@@_#2_margin_right_width_dim, 
     #1~margin-bottom-width/.store     = l_@@_#2_margin_bottom_width_dim,  
     #1~margin-left-width/.store       = l_@@_#2_margin_left_width_dim, 
   }
 }
\ExplSyntaxOff 
%    \end{macrocode}
%
% The above key-value store describe keys and values that are common to all the elements of the set $K$. 
% Chapters, parts and sometimes sections might need to be typeset on new pages, we create
% booleans for these using another creator function,
%
% \begin{docCommand}{make_new_bool:n}{\Arg{element name}}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \make_new_bool:n #1 
  {
    \bool_new:c {#1_open_left_bool} 
    \bool_gset_false:c {#1_open_left_bool}
    \bool_new:c {#1_open_any_bool}  
    \bool_gset_false:c {#1_open_any_bool}
    \bool_new:c {#1part_open_anywhere_bool} 
    \bool_gset_false:c {#1_open_anywhere_bool}
    \bool_new:c {#1_open_right_bool}        
    \bool_gset_false:c {#1_open_right_bool}
  }
%    \end{macrocode}
% \end{docCommand}
%
% Create the booleans using the creator function for part, chapter and section.
%    \begin{macrocode}
\make_new_bool:n {part}
\make_new_bool:n {chapter}
\make_new_bool:n {section}
\ExplSyntaxOff  
%    \end{macrocode}
%
% We create keys for the booleans by defining a function and the calling it for the 
% document elements we allow,
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \make_new_opening_keys:n #1 
{
 \cxset{
    #1~opening/.is~choice,
    #1~opening/right/.code      = \bool_gset_true:c {#1_open_right_bool},
    #1~opening/left/.code       = \bool_gset_true:c {#1_open_left_bool},
    #1~opening/any/.code        = \bool_gset_true:c {#1_open_any_bool},
    #1~opening/none/.code       = \bool_gset_true:c {#1_open_anywhere_bool},
    #1~opening/anywhere/.code   = \bool_gset_true:c {#1_open_anywhere_bool}, 
    #1~opening/ifafter/.code    ={},
 }    
}
\make_new_opening_keys:n {part}
\make_new_opening_keys:n {chapter}
\make_new_opening_keys:n {section}
\ExplSyntaxOff
%    \end{macrocode}
%
%  Set the default values for part, chapter and sections.
%    \begin{macrocode}
\cxset{part opening = anywhere,
       chapter opening = anywhere,
       section opening = none}
%    \end{macrocode}
%
% Similarly to the booleans for defining where a heading is to be typeset some
% elements contain values for numbers.
% \begin{docCommand} {l_@@_make_new_numbering_keys:n} { \marg{element name} }
%  Not all heading elements need to access a counter and associated fields, so
%  we provide a function to specifically target these keys.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \l_@@_make_new_numbering_keys:n #1 
  {     
% Numbering Wow!
\cxset{
     #1~number~prefix/.store       = lphd#1numberprefixtl,
     #1~number~suffix/.store       = lphd#1numbersuffixtl,
     
     #1~number~after/.store        = l_@@_#1_number_after_tl,
     #1~numbering/.is~choice,
     #1~numbering/roman/.code          =
       \cs_gset:cpn {the#1}
         {
           \cs:w lphd#1numberprefixtl \cs_end: 
             \@roman\cs:w c@#1\cs_end:\relax
           \cs:w lphd#1numbersuffixtl \cs_end:   
         },
     #1~numbering/Roman/.code          =
      \cs_gset:cpn {the#1}
        {
          \cs:w lphd#1numberprefixtl \cs_end: 
          \expandafter\@Roman{\cs:w c@#1\cs_end:\relax} 
          \cs:w lphd#1numbersuffixtl \cs_end:  
        },
    #1~numbering/(roman)/.code          =
    \cs_gset:cpn {the#1}
       {
       \cs:w lphd#1numberprefixtl \cs_end: 
         (\@roman\cs:w c@#1\cs_end:\relax)
       \cs:w lphd#1numbersuffixtl \cs_end:    
       },
    #1~numbering/(Roman)/.code          =
    \cs_gset:cpn {the#1}
      {
        \cs:w lphd#1numberprefixtl \cs_end: 
        (\@Roman \cs:w c@#1\cs_end:\relax)
        \cs:w lphd#1numbersuffixtl \cs_end:  
      },
   #1~numbering/arabic/.code           =
    \cs_gset:cpn {the#1}
      {
        \cs:w lphd#1numberprefixtl \cs_end: 
        \@arabic\cs:w c@#1\cs_end: \relax
        \cs:w lphd#1numbersuffixtl \cs_end: 
      },
   #1~numbering/numeric/.code          =
    \cs_gset:cpn {the#1}
      {
        \cs:w lphd#1numberprefixtl \cs_end: 
        \@arabic\cs:w c@#1\cs_end:\relax
        \cs:w lphd#1numbersuffixtl \cs_end: 
      },
   #1~numbering/none/.code             = 
    \cs_gset:cpn {the#1} {},
    
   #1~numbering/alpha/.code            = 
    \cs_gset:cpn {the#1}
      {
        \cs:w lphd#1numberprefixtl \cs_end: 
        \exp_after:wN \alphalph {\cs:w c@#1\cs_end:\relax}
        \cs:w lphd#1numbersuffixtl \cs_end:   
      },
   #1~numbering/Alpha/.code            = 
    \cs_gset:cpn {the#1}
      {
        \cs:w lphd#1numberprefixtl \cs_end: 
          \exp_after:wN \AlphAlph{\cs:w c@#1\cs_end:\relax}
        \cs:w lphd#1numbersuffixtl \cs_end:  
      },
   #1~numbering/words/.code            = 
    \cs_gset:cpn {the#1}
      {
       \cs:w lphd#1numberprefixtl \cs_end: 
       \words@cx{\@arabic\cs:w c@#1\cs_end:\relax}
       \cs:w lphd#1numbersuffixtl \cs_end:  
      },
   #1~numbering/Words/.code            =
    \cs_gset:cpn {the#1}
      {
        \cs:w lphd#1numberprefixtl \cs_end: 
        \Words@cx{\@arabic\cs:w c@#1\cs_end:\relax }
        \cs:w lphd#1numbersuffixtl \cs_end:  
      },
   #1~numbering/WORDS/.code            =
    \cs_gset:cpn {the#1}
      {
       \cs:w lphd#1numberprefixtl \cs_end:   
       \WORDS@cx{\@arabic\cs:w c@#1\cs_end:\relax}
       \cs:w lphd#1numbersuffixtl \cs_end:  
      },
    #1~numbering/ordinals/.code            =
    \cs_gset:cpn {the#1}
      {
       \cs:w lphd#1numberprefixtl \cs_end:   
       \ordinals@cx{\@arabic\cs:w c@#1\cs_end:\relax}
       \cs:w lphd#1numbersuffixtl \cs_end:  
      },  
    #1~numbering/ORDINALS/.code            =
    \cs_gset:cpn {the#1}
      {
       \cs:w lphd#1numberprefixtl \cs_end:   
       \ORDINALS@cx{\@arabic\cs:w c@#1\cs_end:\relax}
       \cs:w lphd#1numbersuffixtl \cs_end:  
      },   
   #1~numbering~custom/.code           = 
    \cs_gset:cpn {the#1} {##1},        
  }   
 }   
\ExplSyntaxOff
%    \end{macrocode}
%
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn\phd_setparent:nn #1#2 {%
   \cs_gset:cpn {#1parent} {#2}
}
%    \end{macrocode}
%
% \subsection{Inheritance, auto and cascade}
% This can be a list pointing up. also need to thnk about secondary elements
% For example \docAuxCommand{chapterparent} will point to \textit{\chapterparent} and 
% where keys are set to inherit will be inherited. Other key values set to cascade can go
% up to top level. This is probably and ideal way to use clists.
%    \begin{macrocode}
\phd_setparent:nn {document}{root}
\phd_setparent:nn {part}{document}
\phd_setparent:nn {chapter}{document}
\phd_setparent:nn {section}{chapter}
\phd_setparent:nn {subsection}{section}
\phd_setparent:nn {subsubsection}{subsection}
\phd_setparent:nn {paragraph}{subsubsection}
%    \end{macrocode}
% \subsection{Creating the Keys}
% We are now ready to start creating the keys for the headings. The headings names are
% stored in  |phd_book_divisions_clist|. We iterate through all the elements to
% create the keys, first for the major elements and second for the secondary elements.
% Reminder a major element can be defined with one word and a secondary element with two
% or more.
%    \begin{macrocode}
\clist_map_inline:Nn \@@_book_divisions_clist 
  { 
    \l_@@_make_new_heading_keys:n{#1}{#1}
    \l_@@_make_new_numbering_keys:n{#1}
  }
%    \end{macrocode}
% Map through the list again for the secondary elements.
%    \begin{macrocode}
\clist_map_inline:Nn \@@_book_divisions_clist 
  {  
    \iow_log:n {#1, }
    \l_@@_make_new_heading_keys:n {#1~title}{#1_title} 
    \l_@@_make_new_heading_keys:n {#1~title~before}{#1_title_before} 
    \l_@@_make_new_heading_keys:n {#1~number}{#1_number}
    \l_@@_make_new_heading_keys:n {#1~number~before}{#1_number_before}
    \l_@@_make_new_heading_keys:n {#1~label}{#1_label}
    \l_@@_make_new_heading_keys:n {#1~label~before}{#1_label_before}
    \l_@@_make_new_heading_keys:n {#1~before}{#1_before}
    \l_@@_make_new_heading_keys:n {#1~after}{#1_after}
  }

\ExplSyntaxOff
%    \end{macrocode}
% \section{Programmatically create key defaults}
% With such a large list of properties, we create default values programmatically. Then
% these are overwritten later to more appropriate values. This ensures that all keys are
% created and that no errors occur.
%
% \begin{docCommand} {l_@@_set_headings_key_defaults:n } { \marg{element name} }
%   This function takes one agument and inititalizes all the keys.
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \l_@@_set_headings_key_defaults:n #1 
  {
    \cxset
      { 
% name      
       % #1~name                   = Chapter,
% numbering    
      %  #1~numbering              = arabic,        
        #1~align                  = Centering,
% renderer format        
        #1~format                 = block,
% fonts    
        #1~font-size              = HUGE,
        #1~font-weight            = bold,
        #1~font-family            = sffamily,
        #1~font-shape             = upshape,
        #1~font-style             = upshape,
        #1~case                   = upper, 
% colors    
        #1~color                  = black,
        #1~background-color       = bgsexy,
        #1~frame-color            = bgsexy,
% spacing    
        #1~indent                 = 0pt,
        #1~beforeskip             = 10pt,
        #1~afterskip              = -3ex,
        #1~afterindent/.onoff     = #1_afterindent,
% box and effects   
        #1~arc                    = 0pt,
      
        #1~grow~left              = 0mm,
        #1~grow~right             = 0mm, 
        #1~rounded~corners        = northeast,
        #1~shadow                 = drop~shadow,
% borderlines
        #1~borderline~top          = 1pt,
        #1~borderline~right        = 1pt,        
        #1~borderline~bottom       = 1pt,        
        #1~borderline~left         = 1pt, 
% borderlines color
        #1~borderline~top-color    = black,
        #1~borderline~right-color  = black,        
        #1~borderline~bottom-color = black,        
        #1~borderline~left-color   = black,                 
%    
        #1~border-left-width      = 1pt,
        #1~border-right-width     = 1pt,
        #1~border-top-width       = 1pt,
        #1~border-bottom-width    = 1pt,
    
        #1~padding-left-width     = 1pt,
        #1~padding-right-width    = 1pt,
        #1~padding-top-width      = 1pt,
        #1~padding-bottom-width   = 1pt,
%        
     }
  }
%    \end{macrocode}
% Next we map all the keys to defaults.
%
% \begin{macro}{\@@_book_divisions_clist}
%    \begin{macrocode}
\clist_map_inline:Nn \@@_book_divisions_clist
  { \wlog{set defaults ... #1 ...,}
    \l_@@_set_headings_key_defaults:n {#1}  
    \l_@@_set_headings_key_defaults:n {#1~title} 
    \l_@@_set_headings_key_defaults:n {#1~title~before} 
    \l_@@_set_headings_key_defaults:n {#1~label} 
    \l_@@_set_headings_key_defaults:n {#1~label~before}
    \l_@@_set_headings_key_defaults:n {#1~number}
    \l_@@_set_headings_key_defaults:n {#1~number~before}
    \l_@@_set_headings_key_defaults:n {#1~before}
    \l_@@_set_headings_key_defaults:n {#1~after}
  }
\ExplSyntaxOff  
%    \end{macrocode}  
%\end{macro}
 
%    \begin{macrocode} 

\ExplSyntaxOn 
\cxset 
  { 
    section~spaceout/.is~choice,
    section~spaceout/soul/.code            = \@sectionspaceouttrue,
    section~spaceout/none/.code            = \@sectionspaceoutfalse,
 }  
\ExplSyntaxOff 
%    \end{macrocode}
% As described earlier boxed headings have numerous elements, each of which can be styled
% on its own. 
% 
%
% \chapter{Formatters and Associated Functions}

% Formatters are functions that produce a layout and apply the properties
% to a number of elements. There are is a formatter for each format
% available as a property to a heading. The most comprehensive is the
% css block formatter that can size individual boxes and also
% float them as required. Special formatters can be added to the package
% as extensions. 
%
% \section{Helper functions}
%
% The helper functions transfer properties form keys to
% tikz or tcolorbox boxes or to plain macros for simpler formatters. They
% are just convenient functions to keep the code for the formatters, shorter.
%
% \paragraph{Setting fonts} One of the most common action is to style 
% text by applying fonts. There are five token lists storing information
% related to a particular element's font. We define an auxiliary function
% to apply it.
%
% \begin{docCommand} {set_font_aux:n} { \marg{element name} }
%  This helper function sets the font properties.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \set_font_aux:n #1
 {
   \cs_if_exist_use:c { #1_fontface_tl}
   \cs_if_exist_use:c { #1_fontfamily_tl }
   \cs_if_exist_use:c { #1_fontweight_tl }
   \cs_if_exist_use:c { #1_fontshape_tl  }
   \cs_if_exist_use:c { #1_fontsize_tl   }
   \selectfont
 }
%    \end{macrocode}
% 
% Expose the above through programmer/api function API as follows:
% $g(el) \to f_f()$
%
%    \begin{macrocode} 
\cs_set:Npn \elementfont #1
  {
    \set_font_aux:n{l_@@_#1}
  }
%    \end{macrocode} 
%
% {\elementfont{chapter}  Helper Functions \\
%  \elementfont{section}  Section 
%}
%
%    \begin{macrocode}
\cs_new:Npn \set_borders_aux:nn #1 #2
 {
   \dim_if_exist:cTF{l_@@_#1_border_#2_width_dim } {8pt}{2pt}
  }
%    \end{macrocode} 
%  
% \paragraph{Coloring}  
% 
% The function |get_color_name:n| returns the value of the color name from the key value
% store (stored in a token list).
%
% \begin{docCommand} { get_color_name:n } { \Arg{element name} }
%
% \example
% \ExplSyntaxOn
% { \cxset{chapter~label~color=red800,
%          chapter~title~color=orange800}
% 
%   color~name =
%   \get_color_name:n  {chapter_label} ~~
%   \bfseries 
%   \render_color:n {chapter_label} ~~ Chapter\space
%   \render_color:n {chapter_title} Title 
% }
% \ExplSyntaxOff
% \end{docCommand}
%
%
%    \begin{macrocode} 
\cs_new:Npn \get_color_name:n  #1 
 {
%   \def\temp{#1}
%   \ifx\temp\empty 
%     \cs:w l_@@_#1_color_tl\cs_end:
%   \else
     \cs:w l_@@_#1_color_tl \cs_end:
   %\fi
 }
 \cs_new:Npn \render_color:n  #1 
 {
     \expandafter\color{\cs:w l_@@_#1_color_tl\cs_end:}
   
 }
\ExplSyntaxOff 
%    \end{macrocode}
%
% \begin{docCommand} { set_borderline_aux:nn } { \marg{} \marg{}}
%  Sets the borders of a tcolorbox or other box. For tcolorbox, there
%  is an important difference between borderlines and rules.
%  Borderlines are a bit problematic in a declarative interface. 
%  Firstly they take four arguments. Following the shadows
%  interface we offer predetermined, styles as well as allow 
%  maximum flexibility through styles for the user.
%
%  To draw them they require offset, thikness, color and line type.
%  The offset determines if they drawn away or inwards the original
%  path.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \set_borderline_aux:nn #1 #2   
{
   \tcbset{borderline~style/.style = 
   {
     borderline~west = {\cs:w l_@@_#1_borderline_left_tl \cs_end:}
                       {-\set_borders_aux:nn {#1} {left}-0pt }
                       {
                        \cs:w l_@@_#1_borderline_left_color_tl \cs_end: , 
                         solid,
                       }, 
     borderline~east = {\cs:w l_@@_#1_borderline_right_tl \cs_end:}
                       {-\set_borders_aux:nn {#1} {right}-0pt }
                       { 
                         \cs:w l_@@_#1_borderline_right_color_tl \cs_end:,
                         solid
                       },  
     borderline~north = {\cs:w l_@@_#1_borderline_top_tl \cs_end:}
                       {-\set_borders_aux:nn {#1} {top}-0pt }
                       { \cs:w l_@@_#1_borderline_top_color_tl \cs_end:, 
                        dashed},   
     borderline~south = {\cs:w l_@@_#1_borderline_bottom_tl \cs_end:}
                       {-\set_borders_aux:nn {#1} {bottom}-0pt }
                       {
                         \cs:w l_@@_#1_borderline_bottom_color_tl \cs_end:, 
                         dashed
                       },                                                    
    }
  }                       
}
\ExplSyntaxOff
%    \end{macrocode}
%
% \chapter{Formatters for marginal headings}
% 
% \section{Simple Formatter functions}
%
% Start from the simplest type of heading that can place the heading in the margin.
% These type of sectional headings mean that we need to use ideas from marginpars.
% Perhaps the simplest one is to use an alias for |tcbdocmarginnote|. Out of necessity
% these sections need wider margins. 
% 
% \begin{docCommand} {format_inmargin} {}{}{}
%  This is a simple formatter that places the heading in the margin.
%  Useful for old nad modern  books.
% 
% \end{docCommand}
%
% \ExplSyntaxOn
% \format_inmargin:nnn {section}{In margin}{zzz} \lorem
% \ExplSyntaxOff
%    \begin{macrocode}      
\ExplSyntaxOn
\cs_set:Npn \format_inmargin:nnn #1#2#3
  {
     \tcbdocmarginnote
     { 
       \RaggedLeft
        Section:\thesection\\
       \hfill\hbox{\hfill#3}
       %#3
     } 
  }    
\ExplSyntaxOff  
%    \end{macrocode}
%
% \section{Hanged formats}
% Most books will have sections as hanged paragraphs. They can be indented or outdented
% into the margins and can consist of a single line or more. We provide a genereric
% formatter based on the one in \latexe first. 
%
% \ExplSyntaxOn
% \format_hang:nn {section}{Test~A~section}
% \ExplSyntaxOff
%
% \begin{docCommand} {format_hang:nn} { \marg{element name} \marg{title text} }
%  This formatter renders the classic \latexe hanged paragraph. As all the 
%  properties are available in the keys, we do not really need to concern ourselves
%  with passing values from the main function to here. 
% \end{docCommand}
%  
%    \begin{macrocode}
\ExplSyntaxOn
\DeclareDocumentCommand\format_hang:nn {s o m m}
  {\par\leavevmode
    % takes one param change to section_indent 
    \hskip-\parindent\phd_hang_from:nn
        {
        \IfBooleanTF{#1}
          {
            
              \set_font_aux:n {l_@@_#3}
              \cs_if_exist_use:c {the_#3_title_fontface_tl}
              \render_color:n {#3_number} 
              
              { %indent
                %\cs:w the#3 \cs_end:
                %\hskip1em
              }
          }
          {
         \set_font_aux:n {l_@@_#3}
         \cs_if_exist_use:c {the_#3_title_fontface_tl}
          \render_color:n {#3_number} 
          { %indent
           \cs:w the#3 \cs_end:
           \hskip1em
           }
         } 
        }
        {  
          \set_font_aux:n {l_@@_#3}
          \cs_if_exist_use:c {the_section_title_fontface_tl}
          
          \render_color:n {#3_title} 
          
         #4 
       }     
       
   { \interlinepenalty\@M   
    \tex_par:D 
   }
   
    %Check par here
%    \end{macrocode}
%
% In classic \latexe end of section action depends on the sign of the
% afterskip. A negative sign is used to indicate an inline paragraph and a
% positive a hanged section. All the post action being handled by |\@xsect|.
%
%    \begin{macrocode}  
    \par \nobreak
    %\skip_vertical:c {l_@@_#1_afterskip_tl}
    \vskip10pt
    \phd_after_heading: 
    \tex_ignorespaces:D
    
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand} {format_hang_inmargin} { \marg{element name} \marg{text} }
%  This is a variation to the hanged format, where the heading number is in the 
%  margin.
% \end{docCommand}
% \ExplSyntaxOn
% \format_hang_inmargin:nn {section}{Margin~Section}
% \lorem
% \lorem
% \ExplSyntaxOff
%    \begin{macrocode}
\ExplSyntaxOn
%\newtcbox\numberbox[1]{}
\cs_set:Npn \format_hang_inmargin:nn #1#2 
  {
    \bgroup
    \parindent0pt
    \setbox\@tempboxb\hbox 
     {
       \set_font_aux:n {l_@@_#1}
       \cs:w the#1 \cs_end:
     }
%    \end{macrocode}
% The number box is to be placed in the margin. Use a |makebox| of 0pt in combination with
% a tcbox. A second |makebox| moves the box by a negative |wd|. We use a special
% |\tcbox| for decorations.
%    \begin{macrocode}     
     \makebox[0pt]{
          \makebox[-\wd\@tempboxb][r]{%
         \set_font_aux:n {l_@@_#1}
         {
           \tcbox[nobeforeafter,
                  box~align=center,
                  size=minimal,
                  boxrule=0.4mm,
                  % has issues to get the colors
                  colframe = red500,
                  boxsep =0pt,
                  colback  = \get_color_name:n{#1_number_background},
                  ]
                  {
                    \cs:w the#1 \cs_end:
                  }
         }
        }
        }
     \begin{tcolorbox}[enhanced, 
                      %title empty, 
                       size=minimal,
                       nobeforeafter,box~align=center,
                       colback=white,
                       title,title~code={
								\path[draw=red500,solid,decorate,line~width=0.5mm,
								decoration={snake,aspect=0,segment~length=2.1mm}]
								([xshift=1mm]title.west) -- ([xshift=-1mm]title.east) -- (title.south);},
								title~code=,
                       ] 
          \set_font_aux:n {l_@@_#1}
          \render_color:n {#1_title} 
          #2 
    \end{tcolorbox}      
    \egroup
    \interlinepenalty\@M   
    \tex_par:D
%    \end{macrocode}
%
%    \begin{macrocode}  
    \par \nobreak
    \skip_vertical:c {l_@@_#1_afterskip_tl}
    \phd_after_heading: 
  }
\ExplSyntaxOff
%    \end{macrocode}
% 
% \section{Format simple ruled}
%
% In most books headings are simply variants of rules, text and sometimes a bit of ornamentation.
% 
%
% \subsection{The zoonek styles}
%
% These are based on who provided about thirty variants of headings that use rules, text and boxes
% in various variations. In all the formatters described in this section all applicable keys are
% available for rendering. Numerous |magic rules| that can be styled are available in the phd-rules
% package. Where possible rules are applied as leaders, so the formatter can be tested for different
% box widths.
% 
% \zoonek*{chapter}{The Zoonek Formatter}
% \zoonek{chapter}{Numbered Version}
%    \begin{macrocode}
\ExplSyntaxOn
\def\thickhrulefill{\leavevmode \leaders \hrule height 0.8ex \hfill \kern \z@}
\NewDocumentCommand \zoonek { s m m} {%
  \vspace*{10\p@}%
  {\parindent \z@ \centering \reset@font
         
        {\Huge \scshape
         \set_font_aux:n {l_phd_#2_number}
         \IfBooleanTF{#1}
         {\vphantom{\csname the#2\endcsname}}
         {
         \csname the#2\endcsname}
         
        }
        \par\nobreak
        \vspace*{10\p@}%
        \interlinepenalty\@M
        \thickhrulefill
        \par\nobreak
        \vspace*{2\p@}%
        % title
        {%\Huge \bfseries 
        \color{thechaptercolor}
        \set_font_aux:n {l__phd_#2_title}
        \so{#3}\relax
        \par\nobreak
        }
        \par\nobreak
        \vspace*{2\p@}%
        \thickhrulefill
    %\vskip 40\p@
    \vskip 100\p@
  }}
%    \end{macrocode} 
% 
% \subsection{zoonekii}
%
% The next formatter will have the label |chapter| and is left justified with a double rule
% below the label and number. We also ensure all applicable keys are made available through
% the key-value store below the interface:
% \medskip
%
% \zoonekii{chapter}{The Zoonekii Formatter} 
%
%    \begin{macrocode}
\cs_set:Npn \zoonekii #1 #2 {
 {\parindent \z@ \raggedright
    \reset@font
    \hrule
    \vspace*{10\p@}%
    \par
    \Large \scshape \@chapapp{}\hspace{0.5em} 
    \Huge\bfseries \csname the#1\endcsname
    \par\nobreak
    \vspace*{10\p@}%
    \hrule
    \par
    \vspace*{1\p@}%
    \hrule
    %\vskip 40\p@
    \vspace*{20\p@}
    \Huge \bfseries #2\par\nobreak
    \vskip 70\p@
 }    
}  
%    \end{macrocode}
% \subsection{zoonekiii}
% $f(c,n,t)\to D(c,n,t)$
%
% \zoonekiii{chapter}{The zoonekiii Formatter}
% 
%    \begin{macrocode}
\cs_set:Npn \zoonekiii #1 #2 {
 \vspace*{10\p@}%
  {\parindent \z@ \raggedleft \reset@font
        \scshape \gettext{danish}{#1}~\csname the#1\endcsname
        \par\nobreak
        \interlinepenalty\@M
    \Huge \bfseries #2\par\nobreak
    %\vspace*{1\p@}%
    \hrulefill
    \par\nobreak
    \vskip 100\p@
  }
}
%    \end{macrocode}
% \subsection{zoonekiv}
%
% \zoonekiv{chapter}{The Zoonekiv Formatter Function}
% \lorem\lorem
%
%    \begin{macrocode}
\cs_set:Npn \zoonekiv #1 #2 
{
{
\reset@font
  \parindent \z@ 
  \vspace*{10\p@}%
  \vbox{%
    \mbox{\hsize=2cm
      \fboxrule0pt
      \begin{tabular}{c}
        \scshape \strut \gettext{greek}{#1}\\ %\@chapapp{} \\
        \fbox{%
          \fcolorbox{thechaptercolor}{thechaptercolor}{
          \color{white}
          \vrule depth 10em width 0pt%
          \vrule height 0pt depth 0pt width 1ex%
          {\LARGE \bfseries \strut \csname the#1\endcsname}%
          \vrule height 0pt depth 0pt width 1ex%
          }
           \vrule height 0pt depth 0pt width 1ex%
          }
      \end{tabular}%
      }%
    \vtop{%
      \advance\hsize by -2cm
      \hrule\par
      \vskip 6pt%
      \Huge\bfseries#2
      }%
    }%
  \vskip 100\p@
}
}
%    \end{macrocode}
% The next formatter will probably benefit if changed to tikz. Left
% it here as it demonstrates ingenuity in using a rule and then overlaying
% it with the hading number.
%
% It can also benefit with the use fo color. It will have to be mirrored
% for RTL text.
%
% This is our last in this series. Variants can easily be obtained by using
% styles and groups of commands.
%
% \zoonekv{chapter}{The zoonekv Formatter Function}
%  With the right amount of colouring this can make a chapter heading appear modern
%  and stylish. Double digit numbering will introduce a bit of inconsistenvy but still
%  looks ok.
%
% \zoonekv*{chapter}{The zoonekv Star Function}
% \lorem
%    \begin{macrocode}
\def\LigneVerticale{\vrule height 5cm depth 2cm\hspace{0.1cm}\relax}

\def\VerticalLines
{\group_begin:
  \color{thechaptercolor}
  \let\LV\LigneVerticale
  \LV\LV\LV\LV\LV\LV\LV\LV\LV\LV
 \group_end: 
}
  
\def\GrosCarreAvecUnChiffre#1{%
  \rlap{{\color{rouge}\vrule height 0.8cm width 1cm depth 0.2cm}}%
  \rlap{\hbox to 1cm{\hss\mbox{\color{white}#1}\hss}}%
  \vrule height 0pt width 1cm depth 0pt}
  
\NewDocumentCommand\zoonekv {s m m} 
{
 \hbox~to~\linewidth{\hss\textdir TLT
    \huge 
    \VerticalLines
    \hspace{-0.5cm}%
    \IfBooleanTF{#1}
      {\GrosCarreAvecUnChiffre{\vphantom{\cs:w the#2\cs_end:}}}
      {\GrosCarreAvecUnChiffre{\cs:w the#2\cs_end:}}
    \hspace{0.2cm}
    \hbox{\parbox{\linewidth}{#3}}%
  }\par\vskip 2cm
}
%    \end{macrocode}
%
% \subsection{Lecture Formatters}
%
% These very simple formatters are fast and can look very nice in lecture notes, which should not be cluttered.
% 
%    \begin{macrocode}
\definecolor{red1}{rgb}{1,0.9,0.9} \definecolor{blue1}{rgb}{0.9,0.9,1} \definecolor{green1}{rgb}{0.9,1,0.9} 
\definecolor{yellow1}{rgb}{1,1,0.8} \definecolor{yellow2}{rgb}{1,1,0.8}
\definecolor{color11}{rgb}{1,0.9,0.6}

\def\lecture#1#2{
  \vspace{2mm} 
  \begin{center}
    \reset@font \fboxsep2mm 
    \fcolorbox{green1}{green1}{% 
      \parbox{\linewidth}{{\Large {\bf Lecture:\csname the#1\endcsname\space #2}}}} \vspace{2mm} 
   \end{center} }
\ExplSyntaxOff  
%    \end{macrocode}
%
% \cxset{chapter format=lecture,chapter opening=any,chapter afterindent=on}
% \fontsize{10}{14} \selectfont
% {\bf E-320: Math, a Historical Perspective \hfill O. Knill, 2010-2018}
% \lecture{chapter}{How to Use Formatters}
% 
% \lorem\lorem\lorem
%
% \cxset{chapter format=zoonekv}
%
% \section{MIT Press Linguistics}
% \DEBUGOFF
% This formatter function is suited for academic books. A similar style
% is used by the MIT Press. The MIT Press is a leading publisher of books and journals at the intersection of science, technology, and the arts. MIT Press books and journals are known for their intellectual daring, scholarly standards, and distinctive simple designs.
%
% \latex templates are available at their website, however some of them do contain errors
% and they seem to vary styles from book to book. For example the below heading can also be found with the number font being the same size as the title font.
%
% \bigskip
%
% \mitlinguistics{chapter}{Environmental Policy Analysis with STREAM: A Partial Equilibrium Model for Material Flows in the Economy}
%
% \lorem
% \mitlinguistics{chapter}{Gravitational Waves}
%
% \chapterauthors{Kurt Vonnegut}
%
% \lorem
% \lorem
% \bigskip
%
%    \begin{macrocode}
\ExplSyntaxOn
\newbox\chapnumberbox
\def\chapternumberfont{\fontsize{31}{32}\fontspec{SyntaxLTStd-Bold}}
\def\chaptertitlefont{\fontsize{11}{14}\fontspec{SyntaxLTStd-Bold}}
\def\chapauthorfont{\fontsize{10}{10}\fontspec{SyntaxLTStd-Bold}}
\newif\ifappendon
\appendonfalse
%    \end{macrocode}
%
% \begin{docCommand}{mitlinguistics}{\Arg{division name}\Arg{title}} 
%    \begin{macrocode}
\DeclareDocumentCommand\mitlinguistics{s m m} 
  {
    \bgroup
    \hsize=.9\hsize\relax
    \reset@font
%    \ifappendon
%      \renewcommand{\@chapapp}{\appendixname}%
%      \renewcommand{\thechapter}{\Alph{chapter}}
%    \else
%      \renewcommand{\thechapter}{\arabic{chapter}}
%      \renewcommand{\@chapapp}{Chapter}%
%   \fi
%\chaptermark{#1}{}%
   \setbox\chapnumberbox=\hbox{\chapternumberfont \cs:w the#2\cs_end:}
   \noindent
   \chapternumberfont \thechapter\hskip8pt
   \ifluatex
   \vbox to 1.05\ht\chapnumberbox
   \else
   \vbox to\ht\chapnumberbox
   \fi
   {
     \vss
     \advance\hsize-2pc
     \advance\hsize-\wd\chapnumberbox
     \hyphenpenalty10000 
     \RaggedRight
     \def\\ {\vskip1sp}
     \baselineskip=13pt\chaptertitlefont 
     #3}
    \vskip9pc
    \vskip9pt
  \egroup  
 \phd_after_heading:  
\ignorespaces}
%    \end{macrocode}
% \end{docCommand}
%
% The author name is added in a very simple bold font and lined with the title.
% It is a size less than the title font size. The author name is added to the 
% toc.\footnote{I have provided for a starred version as well, which simply does
% not add the author's name to the toc. However, there is now real reason why the names
% should be skipped.}
%
% \begin{docCommand}{chapterauthors}{\Arg{author name(s)}}
%    \begin{macrocode}
\long\def\chapterauthors#1
  {\addcontentsline{toc}{chapauthor}{#1}
   \setbox\chapnumberbox=\hbox{\chapternumberfont \cs:w thechapter\cs_end:}
   \vskip-97pt\vbox~to0pt{\vss\chapauthorfont
   \noindent\hspace{\dimexpr(\wd\chapnumberbox+8pt)}
#1 
}
 \skip_vertical:n {83pt}
 \@afterheading
}
\ExplSyntaxOff
%    \end{macrocode}
% \end{docCommand}
%
% \chapter{Emulation of titlesec}
% 
% Jeff bezos's package is fairly popular and some form of compatibility 
% with the key value system provided here can help with interfacing.
%
% The API provided by the package is basically two commands 
% \docAuxCommand{titleformat} and \docAuxCommand{titlespacing}.
% Similar to our interface e provides a |shape| option providing
% basic shaping commands. Our effort here is to provide an interface
% and not to support the package.
%
% If the package is loaded, we will fall back to latex compatibility 
% mode and let the package take over. However we will allow our own key value
% system to replace commands.
% 
% 
% 1:global 2:label 3:sep 4:style 5:after 6:left 7:right 8:title
% |\ttl@<shape>| and |\ttlh@<shape>| take the following eight
% arguments:
% |{format}{label}{sep}{before}{after}{left}{right}{title}|
% where before and after refer to the format.
%
% With the option explicit, \#4 contains the title and \#8 is
% empty.
%
% \subsection{Bezo's concept of classes}
%
% While the shapes and the like modify the behaviour of titles related to the
% surrounding text, \emph{title classes} allow to change the generic behavioud of them.
% With the help of classes you may insert, say, a new |subchapter| level
% between |chapter| and |section|, or creating a scheme of your own.\footnote{Making a consistent
% scheme and defining all related stuff like counters, macros, format, spacing and, if there is a TOC, TOC format is left to the responsibilty of the user.} There are three classes: \option{page} is like
% a the standard book |\part|, in a single page, |top| like |\chapter|, which begins a page and places the title at the top, and \option{straight} is intended for titles in the middle of test.
% 
% \begin{docCommand}{titleclass}{\Arg{name}\Arg{class}\oarg{super level cmd}}
% Command to add a new document division.
% \end{docCommand}
%
% \subsection{Rules}
%
% \begin{docCommand}{titleline}{\meta{*}\oarg{align}\Arg{horizontal material}}
% The \cs{titleline} command allows inserting a line, which may contain text and other \enquote{horizontal}
% material. it is intended mainly for rules and leaders but in fact is also useful for other purposes. 
% The line has a fixed width and hence must be filled, i.e., |\titleline{CHAPTER}| produces an underfull box.
% Here the optional align (l, r or c) helps, so that you simply type, say, |\titleline[c]{CHAPTER}|.
%
% A variant of |\titleline| to be used only with |calcwidth|. The text will be enclosed first in a box of
% width \cs{titlewidth}; this box will be in turn enclosed in the main box with the specified alignment.
% There is no equivalent \cs{titlerule} and therefore you must enclose it explicitly in a \cs{titleline}* if
% you want the |\titlewidth| to be taken into account:
% 
% |\titleline*[c]{\titlerule[.8pc]}|
% 
% \end{docCommand}
% 
% Some dimensions
%
%    \begin{macrocode}
\ExplSyntaxOn
\newdimen\titlewidth
\setlength\titlewidth{0pt}

\def\ttl@calcneg#1#2{%
  {\setlength\@tempskipa{#2}%
   #1{-\@tempskipa}}}
%    \end{macrocode}
%
% Define the command using xparse it is cleaner.
%    \begin{macrocode}   
\ProvideDocumentCommand\titleline { s o m } 
  {
    % star 
    \IfBooleanTF{#1}
      {
        \titleline_star{#2}{#3}
      }%
      % no star
      { 
        \titleline_nostar {#2}{#3}
      }
  }

\cs_set:Npn \titleline_star #1 #2 {
  %star~option~#1
  \IfValueT{#1}
    {\ttl@line{\hb@xt@\titlewidth}{s}{#2}}
}

\cs_set:Npn \titleline_nostar #1 #2 {
  %no~star~option~#1 
  \IfValueT{#1}
   {\ttl@line{}{}{#2}}
}


% this was #1[#2]#3
\def\ttl@line#1#2#3{%
  \vskip\topskip
  \hrule \@height \z@
  \nobreak
  \vskip-\topskip
  \begingroup
    \parindent\z@
    \everypar{}%
    \leftskip\z@
    \rightskip\z@   %  #1 is either \hb@xt@\titlewidth or empty:
    % added it here
    \gdef\ttl@makeline##1{##1}
    \@makebox[\hsize][#2]{\ttl@makeline{#1{#3}}}%
    \par
  \endgroup
  \hrule height \z@
  \nobreak}
%    \end{macrocode}
%
% \begin{docCommand}{titlerule}{\meta{*}\oarg{}}
%    \begin{macrocode}
\ProvideDocumentCommand\titlerule { s o m } 
  {
    %\@ifstar{\ttl@row}{\ttl@rule}
    \IfBooleanTF
      {
        \ttl@row{#2}{#3}
      }
      {
        \ttl@rule{#2}{#3}
      }
  }
%    \end{macrocode}
% \end{docCommand}
%
%    \begin{macrocode}
\let\ttl@leaders\xleaders % For titletoc compatibility
%    \end{macrocode}
%
%
% \begin{macro}{\ttl@row}
%    \begin{macrocode}
\cs_set:Npn \ttl@row #1 #2
  {
    %\@ifnextchar[
    \IfValueTF{#1}
      { \ttl@row@i{#1}{#2}     }
      { \ttl@row@i[\wd\z@]{#2} }
  }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
% was [#1]#2
\def\ttl@row@i#1#2{%
  \ifvmode\expandafter\titleline\fi
  {\sbox\z@{#2}%
   \ttl@calcneg\hspace{#1}%
   \hskip\wd\z@
   \ttl@leaders\hb@xt@#1{\hss\box\z@}%
   \hfill\kern\z@}}
%    \end{macrocode}
%
% \begin{macro}{\ttl@rule,\ttl@rule@i}
% Rule 
%    \begin{macrocode}
\def\ttl@rule #1#2
  {
    \IfValueTF{#1}
     {\ttl@rule@i}{#2}
     {\ttl@rule@i {.4\p@}}
  }
% was [#1]
\cs_set:Npn \ttl@rule@i #1
  {
    \ifvmode\expandafter\titleline\fi
    {\leaders\hrule height #1\hfill\kern\z@}
  }
  
\ExplSyntaxOff  
%    \end{macrocode}
% \end{macro}
%
% ^^Atitlenine \hbox{\titleline*[r]{{\bf Chapter}\space\hrulefill\hskip2pt}}
%
% ^^A\hbox{\titleline*[l]{{\bf Chapter}\space\hrulefill\hskip3pt}}
%
%    \begin{macrocode}
\newif\ifttl@ps
\ttl@psfalse

% The |\ttl@label| switch is used when printing the label in titles.
% A numberless variant makes it to true.
% There is a |\ttl@toclabel| as well, which is true iff the
% title is numbered; used in toc entries (except default part
% and chapter) and marks (only in titlesec pagestyles).

\newif\ifttl@label
\ttl@labeltrue
\newif\ifttl@toclabel

\newbox\ttl@box
\def\ttlh@runin#1#2#3#4#5#6#7#8{%
  \global\@noskipsectrue
  % define global
  \gdef\ttl@makeline##1{##1}%
  %
  %\ttl@changecentercr
   #1{\ifhmode Error\fi
     \global\sbox\ttl@box{%
       \hspace{#6}%
       \ifttl@label{\strut#2}\hspace{#3}\fi
       #4{#8}#5\unskip}}%
    \gdef\@svsechd{\unhbox\ttl@box}}
%    \end{macrocode}
% \makeatletter
% \ttlh@runin{}{Chapter}{2pt}{3pt}{3pt}{3pt}{3pt}{title}
% \@svsechd
% \makeatother
% 
% \section{Format block}
%
% \begin{docCommand}{format_block:nnnn} { \meta{element name} \meta{} \marg{} \marg{} }
%   This function is the main function for block and fancy headings.
%   It uses the package \pkg{tcolorbox} in order to provide as much fleixibility as possible.
% \end{docCommand}
% 
% We create a boolean that determines if the element label and its number are to
% betypeset inline or not.
%
%    \begin{macrocode}   
\ExplSyntaxOn 
\bool_new:N \combo_if_bool \bool_gset_true:N \combo_if_bool
%    \end{macrocode}
%
% We are now ready to define the function.
% 
%    \begin{macrocode}
\cs_set:Npn \label_number_box #1 {
 \bool_if:NTF \combo_if_bool 
     {
         \fboxsep=2pt
         \fboxrule=1pt
         %\phd_float_box:nnn {chapter_number} {}{
                \tcbox[size=minimal,
                nobeforeafter,
                before = \vskip1sp,
                colback=white]
                {
                   %\cs:w l_@@_#1_fontsize_tl\cs_end: 
                   \tcbox[size=minimal,
                          nobeforeafter,
                          colback= \cs:w l_@@_chapter_label_background_color_tl \cs_end:,
                          valign=top,
                          ]{
                     \bgroup
                     \cs_if_exist_use:c { the_#1_fontface_tl}
                     \cs_if_exist_use:c {l_@@_#1_label_fontfamily_tl}
                     \cs_if_exist_use:c {l_@@_ #1_label_fontweight_tl}
                     \cs_if_exist_use:c {l_@@_#1_label_fontshape_tl}
                     \cs_if_exist_use:c {l_@@_#1_label_fontsize_tl}
                    
                     %\l_@@_chapter_label_fontfamily_tl 
                     %\l_@@_chapter_label_fontshape_tl\space  
                     \cs:w l_@@_#1_label_color_tl\cs_end:
                      
                     \cs:w #1name\cs_end:\space 
                     
                   \egroup}
                   
                   \tcbox[size=minimal,
                          nobeforeafter, top=0pt,valign=top,
                          colback=\cs:w 
                               l_@@_chapter_number_background_color_tl
                          \cs_end:, 
                          ]{
                     \bgroup
                    
                     \cs_if_exist_use:c { the_#1_number_fontface_tl    }
                     \cs_if_exist_use:c {l_@@_#1_number_fontfamily_tl }
                     \cs_if_exist_use:c {l_@@_#1_number_fontweight_tl }
                     \cs_if_exist_use:c {l_@@_#1_number_fontshape_tl  }
                     \cs_if_exist_use:c {l_@@_#1_number_fontsize_tl   }
                     \cs:w l_@@_#1_number_color_tl\cs_end: 
%    \end{macrocode}
% We have to introduce a phantom here to have a proper strut. Intorduce after the font sizing
% and use the chapter name?
%    \begin{macrocode}   
                     \vphantom{\chaptername}
                     \cs:w the#1\cs_end:\scan_stop: 
                     \egroup                 
                    }
              }        
           %}
    }
    {         
     \phd_float_box:nnn {#1}{}
       {
         \tcbox{\@svsec}
  
       }  
    }
}



\cs_set:Npn \format_block:nnnn #1#2#3#4
  {
    \bgroup
    %\leftskip-1.25in
    \set_borderline_aux:nn {#1}{}
    \noindent\begin{tcolorbox}[size=minimal,
      width       = \textwidth-4pt, %\pdfpagewidth-4cm,
      %arc         = 10mm,
      %auto~outer~arc,
      \cs_if_exist_use:cTF {l_@@_#1_shadow_tl}{}{},
        colback           = white,  %bgsexy!5,%\get_color_name:nn  {#1}{background},FIXME THIS IS WROBG
        colframe          = white, %\get_color_name:nn  {#1}{frame},
        toprule           = \set_borders_aux:nn {#1} {top},
        rightrule         = \set_borders_aux:nn {#1} {right},
        bottomrule        = \set_borders_aux:nn {#1} {bottom},
        leftrule          = 0pt,%\set_borders_aux:nn {#1} {left},
        left~skip =0pt,
        left=0pt,
        boxsep=0pt,
      %  borderline        = {5pt}{5pt}{blue,double,dashed,line~join=bevel},
     %  borderline~north = {2pt}{-3pt}{dotted},
     %  borderline~south = {2pt}{-3pt}{dotted},
     %  borderline~east  = {2pt}{-3pt}{dotted},
     %  borderline~west  = {2pt}{-3pt}{dotted},      
      % borderline~style, 
       % no~borderline,     
       % show~bounding~box,
        halign = left,
        valign = top,
        %rounded~corners=all,
        %drop~lifted~shadow=black,
     ] 
     
    \label_number_box {#1} 
%  
% above title box {empty}    
   \phd_float_box:nnn {#1_title_before}{}{}     
% title float box  
     
  \phd_float_box:nnn {#1_title}{}{#4}
   \par
   \vskip10pt %TODO
   \end{tcolorbox}
   \vskip10pt
 \egroup  
 \par\nobreak\nointerlineskip
}    
%    \end{macrocode}
%
%
%  \begin{docCommand} {phd_float_box:nnn} { \marg{identifier} \marg{} \marg{}}
%    |#1|  The section label\\
%    |#2|  The secondary identifier i.e, title\\
%    |#3|  The text of the box\\
%  \end{docCommand}
%
%  This box contains an outer and an inner box, permitting the second box to float freely into
%  the first box. The widths are constrained based on user inputs or automatic calculations.
%
%    \begin{macrocode}
\cs_set:Npn \phd_float_box:nnn #1 #2 #3
{\set_borderline_aux:nn {#1}{}

  \begin{tcolorbox}
    [
      size=minimal,
      width = \linewidth,
      no~shadow,
      colback  = \cs:w l_@@_#1_background_color_tl \cs_end:, 
      colframe = \cs:w l_@@_#1_frame_color_tl \cs_end:, 
      toprule  = 0pt,
      borderline~style,
      boxsep=0pt,
      left~skip=0pt,
      left=0pt,
      right=0pt,
      right~skip=0pt,
     ]
    
    \set_font_aux:n {l_@@_#1}
    \cs:w l_@@_#1_align_tl \cs_end:
    %in between box or title or author block 
    \begin{tcolorbox}
      [
        %#1~outer,
        size=minimal, 
        no~shadow,
        colback = white,%\cs:w l_@@_#1_background_color_tl \cs_end:,
        colframe= white,%\cs:w l_@@_#1_frame_color_tl \cs_end:,,
        boxsep=0pt,
        top=0pt,
        bottom=0pt,
        left=0pt,
        right=2pt,
        %drop~shadow, 
        %width=\linewidth, 
        borderline~style,
       % halign = ,
       ]
       {   \language-1\relax
       %\RaggedRight
      \set_font_aux:n {l_@@_#1_tl}
      \cs:w  l_@@_#1_color_tl  \cs_end:
      \cs:w  l_@@_#1_align_tl  \cs_end:
       {\textsl{\textls{#3}}}\relax %
       \vskip10pt  
       }
  \end{tcolorbox}
    \par
  \end{tcolorbox}
}

\ExplSyntaxOff
%    \end{macrocode}
%
% ^^A\ExplSyntaxOn
% ^^A\format_block:nnnn {chapter} {Demo Chapter} {} {Demo}
% ^^A\ExplSyntaxOff
%
% \subsection{Display format}
% The display format typesets a heading in a similar fashion to 
% traditional chapters.
%
% \begin{docCommand}{format_display:nn} {\marg{section name}} { \marg{skip after number} \marg {} }
%   Displays a section similar to Chapters
% \end{docCommand}
%  \#1 Section name \\
%  \#2 indent       \\
%  \#3 format para        \\
%  \#4 Title text\\
%  svsec number
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \format_display:nnnn #1 #2 #3 #4
{
  %\cxset{#1~title~margin-top-width=30pt}
  \format_block:nnnn {#1}{#2}{#3}{#4}
}
 \ExplSyntaxOff
%    \end{macrocode}
%
% \#1 name
% \#2 indent
% \#3 title
%  
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \format_inline:nnn #1 #2 #3
  {
   {\bfseries\normalfont
    \theparagraph #3}
   }    
\ExplSyntaxOff  
%    \end{macrocode}

%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \format_part_traditional:nn #1 #2 #3
  {\par\leavevmode
   \group_begin:
      \centering
     \interlinepenalty \@M
     \set_font_aux:n {l_@@_#1}
     \cs:w l_@@_#1_number_tl\cs_end:
     \set_font_aux:n {l_@@_#1_number}
     \ifnum \c@secnumdepth >-2\relax
       \csname #1name\endcsname\nobreakspace\csname the#1\endcsname
       \par
       \vskip 20\p@
     \fi
     \group_begin:
       %\set_color:nn {#1}{color}
       \set_font_aux:n {l_@@_#1 }
          #3
     \group_end:
     \tex_par:D
     \vskip20pt
   \group_end: 
    
  }
\ExplSyntaxOff  
%    \end{macrocode} 
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \format_traditional:nn #1 #2 #3
  {\par\leavevmode
   \group_begin:
    \centering
     \interlinepenalty \@M
     \set_font_aux:n {l_@@_#1}
     \cs:w l_@@_#1_number_tl\cs_end:
     
     \ifnum \c@secnumdepth >-2\relax
       \set_font_aux:n {l_@@_#1_number}
      
       \csname #1name\endcsname\nobreakspace\csname the#1\endcsname
       {
         \cxset{chapter~label~font-family=\ovidius}
         \begin{tikzpicture}
         \node (a) at (0,0) {\expandafter\csname#1name\endcsname}; 
         \node (b) at (0,15pt) {\tiny \set_font_aux:n{l_@@_chapter_label} test};
        \end{tikzpicture} 
       }
       \par
       \vskip 20\p@
     \fi
     \group_begin:
       %\set_color:nn {#1}{color}
       \set_font_aux:n {l_@@_#1 }
          #3
     \group_end:
     \par
     \vskip20pt
   \group_end: 
    
  }
\ExplSyntaxOff  
%    \end{macrocode}  
%
% \cxset{chapter format=fashion}
% \chapter{Layout Engine Code}
%
% \section{Introduction}
% Perhaps a misnomer, but I thought the word \enquote{engine} was appropriate is the  
% section of the code responsible to lay out the various elements constituting a 
% heading and to render them according to the properties set by the keys. 
% 
% Central to its operation is the idea of \emph{formatters} who are responsible for
% the shape and decoration of the elements.
%
% $f(e) = f_t(element)\rightarrow f_{t_n}{element} $
%
% The function is declared using \pkg{xparse} to simplify the switching between 
% the various options of the headings commands.
%
% \begin{docCommand} {start_section:nnnnnnnnn} { \marg{nine parameters}}
% The command takes up nine parameters
% \end{docCommand}
%
%  \noindent 
%  |#1| name e.g, subsection\\
%  |#2| level: a number, denoting depth of a section - e.g., chapter=0, section=1, etc.\\
%  |#3| indent: Indentation of heading from left margin.\\
%  |#4| beforeskip: Absolute value = skip to leave above the heading. If negative, 
% then paragraph indent of the text following the heading is supressed.\\
%  |#5| afterskip: \\
%  |#6| styling command\\
%  |#7|  star or absent\\
%  |#8|  optional argument\\
%  |#9|  section title\\
%
%    \begin{macrocode}
\ExplSyntaxOn
\DeclareDocumentCommand \start_section:nnnnnnnnn {m m m m m m s o m}      
  {
    \if@noskipsec\leavevmode\fi
    \par
%    \end{macrocode}
% The old \latexe code used to check if the skip was negative (i.e., for inline Paragraph headings
% to decide if it will indent or not afterwards. We have a boolean for every heading,
% allowing us for example for subsubsections to indent, so this code is modified slightly.
%    \begin{macrocode}    
%    check for before skip    
    \l_tmpa_skip #4\relax 
    \@afterindenttrue
    \if_dim:w \l_tmpa_skip <\z@
% make it positive    
      \skip_gset:Nn\l_tmpa_skip {-\l_tmpa_skip}  
      \@afterindentfalse
       
    \fi:
    
    \bool_if:cTF {#1_afterindent}{
       \@afterindentfalse 
    }{\@afterindenttrue}
%    
    \if@nobreak
      \everypar{\tikzi[start\\sect] \bool_if:cTF {#1_afterindent}{\tikzi[TRUE]}{\tikzi[falsy]}  }
    \else
      \addpenalty \@secpenalty
      \addvspace\l_tmpa_skip
    \fi
%

%\IfBooleanTF{#7}
%{Has star\\}
%{
%  \refstepcounter{#1}
%  NoStar\\
%}

\iffalse
\IfValueTF{#8}{Has value\\}{NoValue\\}
{
\noindent name~ #1\\
level~ #2\\
indent ~#3\\
beforeskip #4\\
afterskip #5\\
styling \#6\\
star~ or~ absent~ #7\\
optional~ #8\\
title~ #9\\
}
\fi
%    \begin{macrocode}
    \int_compare:nTF {#2>\c@secnumdepth} 
      {
         \let\@svsec\@empty
      }
      {
        \IfBooleanTF{#7}{}{\refstepcounter{#1}
% Since |@seccnformat| might end with an improper |\hskip| which is scannning
% forward for plus or minus we we end the definition with a relax.        
        \protected@edef\@svsec
          {
            \@seccntformat{#1}\relax
          }
        % add short title or long title  
        % \#8 is the optional short argument
        % even if we have a star it will exist
        \IfValueTF{#8}  
          { 
             \cs:w #1mark\cs_end: {#9}
%           
             \addcontentsline{toc}{#1}{
                \protect\numberline{\csname the#1\endcsname}{#8}}
          }
          { 
             \cs:w #1mark\cs_end: {#9} 
              \addcontentsline{toc}{#1}{ 
                \protect\numberline{\csname the#1\endcsname}{#9}}
          }
       }   
      } 
%    \end{macrocode}
%    \begin{macrocode}
 \gdef\g_@@_saved_heading_tl {#9}
%    \end{macrocode}
%    \begin{macrocode}
\IfBooleanTF{#7}   
    {\phd_format_router:nn*[#8] {#1} {#9}  }
    {\phd_format_router:nn [#8] {#1} {#9}  }
 

%\ifnum#2<1
% \IfBooleanTF{#7}{
%  \fashion *{#1}{#9}}
%  {\fashion {#1}{#9}}
%\else
% \format_hang:nn {#1}{#9}
%\fi 
%     
%    \IfBooleanTF {#7}
%    % send to star section 
%      {
%      % This is only for LaTeX Compatibility
%      % name is not send which is problematic as we cannot
%      % pick-up the properties
%      % 
%         \gdef\currentsectionname{#1}
%         %\@ssect: {#3} {#4} {#5} {#6} {#9} 
%         \@sect:  {#1} {#2} {#3} {#4} {#5} {#6} * [{#8}] {#9}
%      
%      }
%      {
%       \@sect: {#1} {#2} {#3} {#4} {#5} {#6} {\relax} [{#8}] {#9} 
%      %{\@sect:  {#1} {#2} {#3} {#4} {#5} {#6} {#7} [{#8}] {#9} } 
%      }   
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
% If we are running in compatibility mode we totally ignore the function and revert 
% back to normal \latexe.
% 
%    \begin{macrocode}  
%\@ltxcompatfalse
%\if@ltxcompat 
%  \else 
%  \cs_gset_eq:NN \@startsection \start_section:nnnnnnnnn
%\fi

  
%    \end{macrocode}
%
% \begin{docCommand} {@sect:} { \Arg{\#1}\meta{\ldots}\Arg{\#9}}
%   The auxiliary function to start the rendering process. 
% \end{docCommand}
%

% The function still takes nine parameters as we want to preserve state.
%
% \begin{macroarguments}
%  \item name e.g, subsection
%  \item level: a number, denoting depth of a section - e.g., chapter=0, section=1, etc.
%  \item indent: Indentation of heading from left margin.
%  \item beforeskip: Absolute value = skip to leave above the heading. If negative, 
% then paragraph indent of the text following the heading is supressed.
%  \item afterskip: 
%  \item styling command
%  \item  star or absent
%  \item  optional argument
%  \item  section title
%
% \end{macroarguments} 
%
%    \begin{macrocode}
\ExplSyntaxOn
\DeclareDocumentCommand\@sect: {m m m m m m s o m} 
  {
%    \end{macrocode}
%
% We check if the section number depth allows for the heading to be added to the
% toc, if not we let it to empty.
%
%    \begin{macrocode}
    \int_compare:nTF {#2>\c@secnumdepth} 
      {
         \let\@svsec\@empty
      }
      {
        \refstepcounter{#1}
% Since |@seccnformat| might end with an improper |\hskip| which is scannning
% forward for plus or minus we we end the definition with a relax.        
        \protected@edef\@svsec
          {
            \@seccntformat{#1}\relax
          }
        % add short title or long title  
        % \#8 is the optional short argument
        % even if we have a star it will exist
        \IfValueTF{#8}  
          { 
             \cs:w #1mark\cs_end: {#9}
%           
             \addcontentsline{toc}{#1}{
                \protect\numberline{\csname the#1\endcsname}{#8}}
          }
          { 
             \cs:w #1mark\cs_end: {#9} 
              \addcontentsline{toc}{#1}{ 
                \protect\numberline{\csname the#1\endcsname}{#9}}
          }
      } 
%    \end{macrocode}
%
% The next part is basically a router that redirects rendering to the right
% formatter. This allows for new formatters to be added by the user or in
% future releases of this package.
%
%    \begin{macrocode}     
  % \@tempskipa #5\relax
% save the title.   
   \gdef\g_@@_saved_heading_tl{#9}
%    \end{macrocode}
%
% When we test if the command has a star the star gets absorbed and thrown away
% we want to retain it for the router, so it can call special versions of the commands
% with a star or non-star version of the commands.
%
%    \begin{macrocode}
\IfBooleanTF{#7}   
    {\phd_format_router:nn*[#8] {#1} {#9}  }
    {\phd_format_router:nn [#8] {#1} {#9}  }
}   
\ExplSyntaxOff
%    \end{macrocode}
%
% 
% \section{Router}
%
% As explained earlier the router will direct the rendering to special macros
% based on the document division formatter. Each formatter is governed by a 
% minimum of two macros. The first one directs to the main function which then will call
% the non-star command or the star function auxiliary. Since in most cases the star version
% will just not print the heading number, using a boolean will save one macro. 
% Following this method generalized versions can be produced using xparse easily and hence increasing
% the extensibility of the package.
%
% \begin{docCommand}{phd_format_router:nn} {\meta{*} \Arg{section name} \Arg{title} }
%   The format router selects the format to be used to render the heading. It takes
%   the text as its parameter. The rendering properties are picked up by the template.
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\DeclareDocumentCommand \phd_format_router:nn {s o m m} 
  {
    \str_case_e:nnTF {\cs:w l__phd_#3_format_tl \cs_end:}  
      {
          { display      } {\format_display:nnnn { #3 } {  } {} { #4     } 
                             \xsect:n {3.5ex}{}   } 
          { block        } { \format_block:nnnn  {#3 } {  } {} { {#4}    } 
                             \xsect:n {3.5ex}{#4} 
                           } 
          { plain        } { 
                             \format_hang:nn    {#3}  {#4}           
                             \xsect:n {3.5ex}{#4}
                           } 
          {hang}           {
                              \IfBooleanTF{#1}{ 
           	                  \format_hang:nn *{#3}{#4}
           	                  }
           	                  { 
           	                   \format_hang:nn {#3}{#4}
           	                  }
                         
                               \xsect:n {5pt}{section}          
                            } 
                              
          { hanginmargin } { \format_hang_inmargin:nn {#3} {#4}          }   
          { leftmargin   } { \format_hang_inmargin:nn {#3} {#4}          }          
          { inline       } { \xsect:n {-1ex}{#3}                         }
          { inmargin     } { \format_inmargin:nnn {#3} {} {#4}           }
          { traditional  } { \format_part_traditional:nn {#3}{}{#4} 
                                      \xsect:n {5pt}{section}            }
          { paperback    } { \format_traditional:nn {#3}{}{#4} 
                             \xsect:n {5pt}{section}                     }
%    \end{macrocode}
%
% For special templates, it is the responsibility of the formatter to
% deal with star and unstar versions of commands. It is also its responsibilty
% to provide the toc and the marks, changing totally the universal nature
% of the sectioning commands. This means that we have to add the star back
% if necessary.
% 
%    \begin{macrocode}                          
          { fashion  }   {
                           \IfBooleanTF{#1}
                             {\fashion*{#3}{#4}}
                             {\fashion{#3}{#4}}
                                       
                         }              
      }  
      { } % true code
%    \end{macrocode}
%
% We test for formatters provided by the user. If they have been defined by the
% user, they can either exist in a file or have been entered in the preamble. If
% they have been defined either as a package which has been loaded in the
% preamble or defined in the preable the formatter function will exist and then
% we simply call the function to render the heading.
%
%    \begin{macrocode}
      {       
        \cs_if_exist:cTF { l_@@_#3_format_tl } 
          { 
            \IfBooleanTF{#1}
            {
              \expandafter\cs:w
                \cs:w l_@@_#3_format_tl 
                \cs_end:
                \cs_end:
                %\stewart 
                *{ #3 } { #4 }
            }
            {
              \expandafter\cs:w
                \cs:w l_@@_#3_format_tl 
                \cs_end:
                \cs_end:
                %\stewart 
               { #3 } { #4 } 
            }   
          }
          {
          Test empty:\csname l__phd_#3_format_tl\endcsname\\
          \format_hang:nn {#3}{#4} 
                
          }
      }
  }
 
\ExplSyntaxOff  
%    \end{macrocode}

% The next function $f_n = f(\mbox{dim},\mbox{name})$ is originally from \latexe, but
% modified to have the additional argument of name, so we can pick up the properties
% from the key-value store. It is preferable to be split to two smaller functions.
%
% \begin{docCommand}{@xsect:n} {\Arg{afterskip}\Arg{element name}}
%  This command sets handles indentation after a sectioning command. It also handles
%  the printing of the title for inline sections (it is saved as |\@svsechd| earlier. It is common
%  for both the star and unstarred versions of |\section|.
% \end{docCommand}
%
% Note that |\@noskipsec| is a switch set true by a sectioning command when it is creating an
% in-text heading with |\everypar|.
%  |#2| is experimental will fail with people that have redefined the routines
%    \begin{macrocode}
\ExplSyntaxOn
\cs_set:Npn \xsect:n #1 #2
  { 
  \l_tmpa_skip #1\relax
  \if_dim:w \l_tmpa_skip>-1pt %WATCH better boolean
   \xsect_aux:n {#1}   

   % negative dimension, inline sections
   \else:
    \@nobreakfalse
    \global\@noskipsectrue
    \tex_everypar:D 
      {\if@noskipsec
          \global\@noskipsecfalse%resets switch
          {\setbox\z@\lastbox}
          \tex_clubpenalty:D\@M
          \group_begin:
            \parindent0pt
                   \tcbox[size=minimal,
                    nobeforeafter,
                    colback=white,
                    box~align=base]{
                    \set_font_aux:n {l_@@_#2} 
                    \normalsize
                    \g_@@_saved_heading_tl}%} 
          \group_end:
          \tex_unskip:D
          \l_tmpa_skip #1\relax
          \hskip -\l_tmpa_skip
        \else
          \tex_clubpenalty:D \@clubpenalty
          \tex_everypar:D {
            \tikzi[every\bool_if:cTF {#2_afterindent}{#2~TRUE}{#2~FALSE//}]
            }
        \fi
      }
  \fi:
  \tex_ignorespaces:D
  }
%    \end{macrocode}
%
% A function with minimum semantics. Its sole purpose is to add the space below the heading
% and allow or prohibit indentation after it.
% 
%    \begin{macrocode} 
\cs_set:Npn \xsect_aux:n #1 
  {
    \l_tmpa_skip #1\relax
    %\if_dim:w \l_tmpa_skip>-1pt %WATCH better boolean
     \par \nobreak
     \vskip\l_tmpa_skip
     \phd_after_heading: 
  } 
    
\cs_set:Npn \after_block:n #1 
 {
   \par \nobreak
    \vskip\l_tmpa_skip
    \phd_after_heading:
    \tex_ignorespaces:D
 }    
\ExplSyntaxOff 
%    \end{macrocode} 
% \begin{docCommand} {phd_after_heading:} { \meta{void} }
% 
%  This is an explorified version of the \latexe \docAuxCommand{@afterheading} control sequence.
%  It has an interesting purpose. It is called after block headings to remove
%  the indentation from the first line of the next paragraph. 
% \end{docCommand}
%
% The nobreak hackery is used to ensure that there is no page break after a heading
% (it will look very odd). We add some hooks for visual debugging. Note that
% |\nobreak|, |\break| and |\allowbreak| are just macros holding penalty values.
%
% Also note the definitions of the kernel.
% \begin{teXXX}
%  \def\@nobreakfalse{\global\let\if@nobreak\iffalse}\\
%  \def\@nobreaktrue {\global\let\if@nobreak\iftrue}\\
%   \@nobreakfalse\\
% \end{teXXX}
%
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_gset:Npn \phd_after_heading:
  {
    \@nobreaktrue
    \tex_everypar:D
      {
        \if@nobreak
          \@nobreakfalse
          \clubpenalty \@M %1000 no orphans from this point onwards
          \if@afterindent 
          
          \else
%    \end{macrocode}
%
% If afterindent is true, the indentation is removed.
% this will have to be changed per heading level.
%
%    \begin{macrocode}             
            {\setbox\z@\lastbox}%
            \tikzi[{\tiny afterheading=false\\
                   club~penalty=\the\clubpenalty}]
         \fi
       \else
       \clubpenalty \@clubpenalty %150
       \tex_everypar:D
         {
           \tikzi[everypar in after heading cleared\\
                  clubpenalty\\ \the\clubpenalty
                 ]
         }
       \fi
    }
  }  
\ExplSyntaxOff  
%    \end{macrocode}
% 
% When LaTeX is typesetting the section number it calls |\@seccntformat|
% to use it when typsetting a section heading number. This is common for
% all the subsectioning commands. We modify it based on code from \pkgname{sectsty} in order
% to generalize it.
% 
% We first check if \meta{section}|@cntformat| is defined and then we redirect
% to specific section level command.
%
% \begin{docCommand} {@seccntformat} {\marg{section name}}
%  This is a \latexe kernel factory command that produces |thesection| etc.
%  In the kernel it only takes a generic value, where we have 
%  |section_number_after_tl|.
%  We modify to enable adjustable values for all sectioning commands. 
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
 \cs_gset:Npn \@seccntformat #1
 {
  \@ifundefined{#1@cntformat}%
  {\csname the#1\endcsname\section_number_after_tl}% default
  {\csname #1_cntformat\endcsname}% individual control
 }
%    \end{macrocode}
%
% \begin{docCommand}{section_number_after_tl} { \meta{void}}
%  This function and its siblings are auxiliary functions.
% \end{docCommand}
%
%    \begin{macrocode}
\tl_set:Nn  \section_number_after_tl{\quad}%default value only space
\tl_set:Nn  \subsection_number_after_tl{\quad}%default value only space
\tl_set:Nn  \subsubsection_number_after_tl{\quad}%default value only space
\tl_set:Nn  \l_@@_paragraph_number_after_tl{\quad}%default value only space
\tl_set:Nn  \subparagraph_number_after_tl{\quad}%default value only space
%
\cs_set:Npn \section_cntformat{\thesection\section_number_after_tl}
\cs_set:Npn \subsection_cntformat{\thesubsection\subsection_number_after_tl}
\cs_set:Npn \subsubsection_cntformat{\thesubsubsection\subsubsection_number_after_tl}
\cs_set:Npn \paragraph_cntformat {\theparagraph\l_@@_paragraph_number_after_tl }
\cs_set:Npn \subparagraph_cntformat {\thesubparagraph\subparagraph_number_after_tl }
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \emptypagecontents{This~is~an~empty~page.}
\ExplSyntaxOff


\NewDocumentCommand\EmptyPageContents{ m }{
	\global\long\def\emptypagecontents {#1}
}

\EmptyPageContents{%
  \vspace*{\fill}%
  \begin{center}
  \LARGE \lorem
  \end{center}
  \vspace{\fill}%
  \thispagestyle{empty}
}
%    \end{macrocode}
% \begin{docCommand}{cleardoublepage}{}
%    \begin{macrocode} 
\long\def\cleardoublepage{\clearpage\if@twoside\ifodd\c@page\else
  \hbox{}
    \emptypagecontents\tikzi[In Clear Double Page, empty page]
  \newpage
  \if@twocolumn\hbox{}\newpage\fi\fi\fi}
%    \end{macrocode} 
% \end{docCommand}
%
% % \begin{docCommand}{part} { \meta{*} \oarg{arg1} \marg{arg2} }
%   The standard \latexe part is renewed next. We avoid all the complications of
%   the kernel with different longish sections for chapters and parts.
%    \begin{macrocode}
\ExplSyntaxOn
 \renewcommand\part {%
   \newpage\null
   \thispagestyle{empty}
    \start_section:nnnnnnnnn{part}%
      {-1}  %level check this conflicts with source2e
      {\l_@@_part_indent_tl} %indent#2
      
      {\l_@@_part_beforeskip_tl}%before skip#3
      
      {\l_@@_part_afterskip_tl}% after skip#4
      
      { 
%        \setfont@cx
%        {\l_@@_chapter_fontweight_tl}%
%        {\l_@@_chapter_fontfamily_tl}
%        {\l_@@_chapter_fontsize_tl}
%        {\l_@@_chapter_fontshape_tl}%
          %\expandafter\setfontparam@cx\l_@@_chapter_align_tl;%
          \l_@@_part_color_tl %5
      }
 }
\ExplSyntaxOff 
%    \end{macrocode}
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \phd_set_opening #1 {
    \bool_if:cT {chapter_open_left_bool}  {
       \cleartoevenpage\null 
       \global\@topnum\z@~
       \tikzi[open~left] 
       \bool_gset_false:c {#1_open_right_bool}
       \bool_gset_false:c {#1_open_any_bool}
       \bool_gset_false:c {#1_open_anywhere_bool}
       }
    \bool_if:cT {#1_open_right_bool} 
      {
        \cleardoublepage\null 
        \global\@topnum\z@~
        \tikzi[open~right]
        \bool_gset_false:c {#1_open_left_bool}
        \bool_gset_false:c {#1_open_any_bool}
        \bool_gset_false:c {#1_open_anywhere_bool}
      }
    \bool_if:cT {#1_open_any_bool} 
      {
        \clearpage\null 
        \global\@topnum\z@~
        \tikzi[open~any]
        \bool_gset_false:c {#1_open_left_bool}
        \bool_gset_false:c {#1_open_right_bool}
        \bool_gset_false:c {#1_open_anywhere_bool}
      }
    \bool_if:cT {#1_open_anywhere_bool} 
      {
        \global\@topnum\z@~
        \tikzi[open~anywhere ] 
        \bool_gset_false:c {#1_open_left_bool}
        \bool_gset_false:c {#1_open_right_bool}
        \bool_gset_false:c {#1_open_any_bool}
      }
}
\ExplSyntaxOff
%    \end{macrocode}
% \begin{docCommand}{chapter} { \meta{*} \oarg{arg1} \marg{arg2} }
%   The standard \latexe chapter is renewed next. We avoid all the complications of
%   the kernel with different longish sections for chapters and parts. However some 
%   more coding is required here.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
 \renewcommand\chapter {%
    \phd_set_opening{chapter}
%    \bool_if:NT \chapter_open_left_bool  {
%       \cleartoevenpage 
%       \global\@topnum\z@~
%       \noindent\ldots open~left\par \tikzi[open~left] 
%       \bool_gset_false:N \chapter_open_right_bool
%       \bool_gset_false:N \chapter_open_any_bool
%       \bool_gset_false:N \chapter_open_anywhere_bool
%       }
%    \bool_if:NT \chapter_open_right_bool 
%      {
%        \cleardoublepage 
%        \global\@topnum\z@~
%        \noindent\ldots open~right\par \tikzi[open~right]
%        \bool_gset_false:N \chapter_open_left_bool
%        \bool_gset_false:N \chapter_open_any_bool
%        \bool_gset_false:N \chapter_open_anywhere_bool
%      }
%    \bool_if:NT \chapter_open_any_bool 
%      {
%        \clearpage 
%        \global\@topnum\z@~
%        \noindent\ldots open~any\par \tikzi[open~any]
%        \bool_gset_false:N \chapter_open_left_bool
%        \bool_gset_false:N \chapter_open_right_bool
%        \bool_gset_false:N \chapter_open_anywhere_bool
%      }
%    \bool_if:NT \chapter_open_anywhere_bool 
%      {
%        \global\@topnum\z@~
%        \noindent\ldots open~anywhere\par \tikzi[open~anywhere ] 
%        \bool_gset_false:N \chapter_open_left_bool
%        \bool_gset_false:N \chapter_open_right_bool
%        \bool_gset_false:N \chapter_open_any_bool
%      }
%    
    \thispagestyle{empty}
   %\newpage
    %\bool_show:c {chapter_open_right_bool}
%    \end{macrocode}  
%  
%    \begin{macrocode}    
    \start_section:nnnnnnnnn{chapter}%
      {0}  %level check this conflicts with source2e
      
      {\l_@@_chapter_indent_tl} %indent#2
      
      {\l_@@_chapter_beforeskip_tl}%before skip#3
      
      {\l_@@_chapter_afterskip_tl}% after skip#4
      
       
%        \setfont@cx
%        {\l_@@_chapter_fontweight_tl}%
%        {\l_@@_chapter_fontfamily_tl}
%        {\l_@@_chapter_fontsize_tl}
%        {\l_@@_chapter_fontshape_tl}%
          %\expandafter\setfontparam@cx\l_@@_chapter_align_tl;%
          %\color{\l_@@_chapter_color_tl}%5
			{}	          
      
 }%

%    \end{macrocode} 
%
% \subsection{User interface functions}
%
% We hide all the complexity behind the keys and the user interface is simply,
% the \latex2e interface.
%
% We automate the generation of document divisions \docAuxCommand{section}, \docAuxCommand{subsection}
% \docAuxCommand{subsubsection} and the like by defining a function that takes arguments and then calls another function.
%    \begin{macrocode}
\cs_set:Npn \phd_makesection:nn #1 #2
  {
    \cs_gset:cpn {#1}
      {
        \start_section:nnnnnnnnn {#1}%
          {#2}%level check this conflicts with source2e

          {\cs:w l_@@_#1_indent_tl \cs_end:}%indent#2
      
          {\cs:w l_@@_#1_beforeskip_tl\cs_end:}%before skip#3
      
          {\cs:w l_@@_#1_afterskip_tl \cs_end:}% after skip#4
      
          {
           \set_font_aux:n {l_@@_#1}
          }
  }
}
%    \end{macrocode}
%
% Generate the functions if we are not in compatibility mode. 
%    \begin{macrocode}
\if@ltxcompat
\else
 \phd_makesection:nn {section}{1}
 \phd_makesection:nn {subsection}{2}
 \phd_makesection:nn {subsubsection}{3}
 \phd_makesection:nn {paragraph}{4}
 \phd_makesection:nn {subparagraph}{5}
\fi

\ExplSyntaxOff
%    \end{macrocode}
%
% \subsection{Paragraphs}
%
% \paragraph{Paragraphs} We now deal with paragraphs and subparagraphs, normally termed `runin’ heads, as they produce
%  headings that are inlined with the text that follows. We add hooks, so that later the key mechanism
%  can be used to pick-up values. Although they are termed runins, there is no issue to display
%  them as block.
%
% \subparagraph{Subparagraphs} These are similarly produced by calling the subparagraph formatter.
% This is a much simpler way than the \latexe way. 
% 
% \begin{docCommand}{paragraph} { \meta{*} \oarg{arg1} \marg{arg2} }
%  There is a feature in the standard \latexe classes that a subparagraph is indented
%  by the value of \cs{parindent}. This also features in memoir but is absent in the
%  KOMA classes. In our defaults we follow the European norm.
% \end{docCommand}
% 
% Next we provide our definition for paragraphs. 
%
%    \begin{macrocode}
\ExplSyntaxOn
%\if@ltxcompat
%\renewcommand\paragraph{\@startsection{paragraph}{4}{\z@}%
%                                    {3.25ex plus1ex minus.2ex}%
%                                    {-1em}%
%                                    {\normalfont\normalsize\bfseries}}
%\else
%\if@ltxcompat
%\else
%  \renewcommand\paragraph{
%     \@startsection{paragraph}
%     {4}%level
%     {\l_@@_paragraph_indent_tl}%indent
%     {\l_@@_paragraph_beforeskip_tl}%
%     {\l_@@_paragraph_afterskip_tl}%
%     {
%      \set_font_aux:n {l_@@_paragraph}
%%      {\l_@@_paragraph_fontweight_tl}%
%%     {\l_@@_paragraph_fontfamily_tl}
%%     {\l_@@_paragraph_fontsize_tl}
%%     {\l_@@_paragraph_fontshape_tl}%
%%     \expandafter\setfontparam@cx\l_@@_paragraph_align_tl;%
%      \l_@@_paragraph_color_tl
%     }%
%   }
%\fi
\ExplSyntaxOff
%    \end{macrocode}
% \subsection{Subparagraph}
% \begin{docCommand}{subparagraph} { \meta{*} \oarg{arg1} \marg{arg2} }
%  There is a feature in the standard \latexe classes that a subparagraph is indented
%  by the value of \cs{parindent}. This also features in memoir but is absent in the
%  KOMA classes. In our defaults we follow the European norm.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn  
%\if@ltxcompat
%   \renewcommand\subparagraph{\@startsection{subparagraph}{5}{0pt}%
%                                       {2ex}%
%                                       {-1em}%
%                                      {\normalfont\normalsize\bfseries}}
%\else                                      
%\renewcommand\subparagraph
%      {
%         \@startsection{subparagraph}
%         {5}%level
%         {\l_@@_subparagraph_indent_tl}%indent
%         {\l_@@_subparagraph_beforeskip_tl}
%         {\l_@@_subparagraph_afterskip_tl}
%         {
%           \set_font_aux:n {l_@@_subparagraph}
%           \expandafter\setfontparam@cx
%            \l_@@_subparagraph_align_tl;
%            \l_@@_subparagraph_color_tl
%         }
%       } 

\fi
\ExplSyntaxOff
%    \end{macrocode}
%

% 
% \cxset{section numbering=arabic}
% 
%
% \chapter{Default Settings}
%
% Setting default values
%
%    \begin{macrocode}
\cxset{%
%</LSECT>
%<*LSECT|DFLT>
    part format                       = traditional,
    part afterindent                  = off,
    chapter title margin-top-width    =  0cm,
    chapter title margin-right-width  =  1cm,
    chapter title margin-bottom-width = 10pt,
    chapter title margin-left-width   = 0pt,
    chapter align                     = left,
    chapter title align               = left, %checked
    chapter name                      = chapter,
    chapter format                    = fashion,
    chapter font-size                 = Huge,
    chapter font-weight               = bold,
    chapter font-family               = sffamily,
    chapter font-shape                = upshape,
    chapter color                     = black,
    chapter number prefix             = ,
    chapter number suffix             = ,
    chapter numbering                 = arabic,
    chapter indent                    = 0pt,
    chapter beforeskip                = -3cm,
    chapter afterskip                 = 30pt,
    chapter afterindent               = off,
    chapter number after              = ,
    chapter arc                       = 0mm,
    chapter background-color          = white,
    % takes indentation of first line off
    chapter afterindent               = on,
    chapter grow left                 = 0mm,
    chapter grow right                = 0mm, 
    chapter rounded corners           = northeast,
    chapter shadow                    = fuzzy halo,
    chapter border-left-width         = 0pt,
    chapter border-right-width        = 0pt,
    chapter border-top-width          = 0pt,
    chapter border-bottom-width       = 0pt,
    chapter padding-left-width        = 0pt,
    chapter padding-right-width       = 10pt,
    chapter padding-top-width         = 10pt,
    chapter padding-bottom-width      = 10pt,
    chapter number color              = white,
    chapter label color               = black,    
%
    chapter number font-size        = huge,
    chapter number font-weight      = bfseries,
    chapter number font-family      = sffamily,
    chapter number font-shape       = upshape,
    chapter number align            = Centering,
%    
    chapter title font-size        = Huge,
    chapter title font-weight      = bold,
    chapter title font-family      = sffamily,
    chapter title font-shape       = upshape,
    chapter title color            = black,
%</LSECT|DFLT>
%<*LSECT>    
}  
%    \end{macrocode}
%
%    \begin{macrocode}
%</LSECT>
%<*LSECT|DFLT> 
%<LSECT>\cxset { 
    section name                   = Section,
    section format                 = hang,
    section align                  = Centering,
    section title align            = Centering, %checked
%    
    section font-size              = Large,
    section font-weight            = bfseries,
    section font-family            = serif,
    section font-shape             = upshape,
%    
    section number font-size       = Large,
    section number font-weight     = bfseries,
    section number font-family     = serif,
    section number font-shape      = upshape, 
    section number color           = thesectionnumbercolor,   
%
    section title font-size        = Large,
    section title font-weight      = bfseries,
    section title font-family      = serif,
    section title font-shape       = upshape,
%    
    section color                  = black,
    section number prefix          = \thechapter.,
    section number suffix          =,
    section numbering              = arabic,
    section indent                 = -10pt,
    section beforeskip             = 3ex,
    section afterskip              = 1.5ex plus .1ex,
    section afterindent            = on,
    section number after           = \quad,
%    
    section arc                    = 3pt,
    section background-color       = white,
    section grow left              = 0mm,
    section grow right             = 0mm,
    section rounded corners        = northeast,
%    
    section border-left-width      = 0pt,
    section border-right-width     = 0pt,
    section border-top-width       = 2pt,
    section border-bottom-width    = 2pt,
%
    section padding-left-width     = 0pt,
    section padding-right-width    = 10pt,
    section padding-top-width      = 2pt,
    section padding-bottom-width   = 2pt,
%
    section title margin-top-width = 2pt, 
    section title color            = thesectiontitlecolor,    
    section shadow                 = no shadow,  
%<LSECT>}  
%</LSECT|DFLT> 
%<*LSECT>   
%    \end{macrocode} 
%    \begin{macrocode}
\cxset
  { 
%</LSECT>
%<*LSECT|DFLT>
%% sybsection     
    subsection name                   = Subsection,
    subsection format                 = hang, 
%    
    subsection font-size              = large,  
    subsection font-weight            = bfseries,
    subsection font-family            = rmfamily,
    subsection font-shape             = upshape,
%
    subsection number font-size       = large,  
    subsection number font-weight     = bfseries,
    subsection number font-family     = rmfamily,
    subsection number font-shape      = upshape,
%    
    subsection title font-size        = Large,
    subsection title font-weight      = bfseries,
    subsection title font-family      = sffamily,
    subsection title font-shape       = upshape,
    subsection title color            = bgsexy,    
%        
    subsection color                  = bgsexy,
    subsection numbering              = arabic,
    subsection align                  = Centering, %checked
    subsection title align            = Centering, %checked
    subsection beforeskip             = -3.25explus -1ex minus -.2ex,
    subsection afterskip              = 1.5ex plus .2ex,
    subsection number prefix          = \thesection.,
    subsection indent                 = 0pt,
    subsection number after           = 0pt,
    subsection background-color       = white,
%    
    subsection border-left-width      = 0pt,
    subsection border-right-width     = 0pt,
    subsection border-top-width       = 5pt,
    subsection border-bottom-width    = 5pt,
%
    subsection padding-left-width     = 0pt,
    subsection padding-right-width    = 0pt,
    subsection padding-top-width      = 20pt,
    subsection padding-bottom-width   = 20pt,                
    subsection shadow                 = drop shadow,
    subsection afterindent            = on,
%</LSECT|DFLT>    
%<*LSECT>
  }
%    \end{macrocode}
%    \begin{macrocode}
\cxset
  { 
%</LSECT>
%<*LSECT|DFLT>  
    subsubsection name                    = Subsubsection,
    subsubsection format                  = hang,  
    subsubsection background-color        = white, %checked
    subsubsection afterindent             = on,
%    
    subsubsection font-family             = rmfamily, 
    subsubsection font-size               = large,
    subsubsection font-weight             = bfseries,
    subsubsection font-family             = tiresias,
    subsubsection font-shape              = upshape,
%    
    subsubsection font-family             = sffamily, 
    subsubsection font-size               = large,
    subsubsection font-weight             = bfseries,
    subsubsection font-family             = tiresias,
    subsubsection font-shape              = upshape,
%    
    subsubsection color                   = black,
    subsubsection number prefix           = \thesubsection,
    subsubsection number suffix           = ,
    subsubsection numbering               = arabic,
    subsubsection indent                  = 0pt,
    subsubsection beforeskip              = -3.25explus -1ex minus -.2ex,
    subsubsection afterskip               = 1.5ex plus .2ex,
    subsubsection align                   = center,
    subsubsection title align             = center,
    subsubsection number after     =,
%    
    subsubsection border-left-width       = 0pt,
    subsubsection border-right-width      = 0pt,
    subsubsection border-top-width        = 2pt,
    subsubsection border-bottom-width     = 0pt,
%
    subsubsection padding-left-width      = 0pt,
    subsubsection padding-right-width     = 0pt,
    subsubsection padding-top-width       = 20pt,
    subsubsection padding-bottom-width    = 20pt, 
    subsubsection shadow                  = no shadow,  
%
    subsubsection title font-size         = large,
    subsubsection title font-weight       = bfseries,
    subsubsection title font-family       = serif,
    subsubsection title font-shape        = itshape,
    subsubsection title color             = thesubsectiontitlecolor,   
%</LSECT|DFLT>
%<*LSECT>  
  }
%    \end{macrocode}
%
%    \begin{macrocode}
% paragraph
\cxset
  {
%</LSECT>  
%<*LSECT|DFLT>
    paragraph name                = paragraph,
    paragraph format              = inline, 
    paragraph name                = paragraph,
    paragraph font-size           = small,
    paragraph font-weight         = bfseries,
    paragraph font-family         = sffamily,
    paragraph font-shape          = upshape,
    paragraph numbering           = alpha,
    paragraph number prefix       = \thesubsubsection,
    paragraph align               = flushleft,
    paragraph beforeskip          = 3.25ex plus1ex minus.2ex,
    paragraph afterskip           = -1em,
    paragraph indent              = 0pt,
    paragraph number after        = \quad,
    paragraph color               = bgsexy,
    paragraph background-color    = white,
    paragraph shadow              = no shadow,
    paragraph afterindent         = off
%</LSECT|DFLT>
%<*LSECT>    
  }
%    \end{macrocode}
% We default the subparagraph to an inline format for \latexe compatibility and also to follow
% conventions for articles and books. For legal texts and specifications, it may appear differently.
%
%    \begin{macrocode}  
\cxset
  {
%</LSECT>
%<*LSECT|DFLT>   
    subparagraph name             = subparagraph,
    subparagraph format           = inline,
    subparagraph name             = subparagraph, 
    subparagraph font-size        = small,
    subparagraph font-weight      = mdseries,
    subparagraph font-family      = sffamily,
    subparagraph font-shape       = itshape,
    subparagraph color            = bgsexy,
    subparagraph background-color = bgsexy,
    subparagraph numbering        = none,
    subparagraph align            = flushleft,
    subparagraph beforeskip       = 3.25ex plus1ex minus .2ex,
    subparagraph afterskip        = -1em,
    subparagraph indent           = 0pt,
    subparagraph number after     = ,
    subparagraph afterindent      = off,
    %subparagraph shadow           = off, 
%</LSECT|DFLT>
%<*LSECT>    
  }
%    \end{macrocode}
%
% \section{Styles}
%    \begin{macrocode}  
\cxset{chapter title style/.style= {
       chapter title align = left,}
 } 
\cxset{section title style/.style= {
       section title align = Centering,}
 } 
\cxset{section title style/.style= {
       section title align = Centering,}
 }
 \cxset{subsection title style/.style= {
       subsection title align = Centering,}
 }
 \cxset{subsubsection title style/.style= 
   {
        subsubsection align       = #1,
        subsubsection title align = #1,
   }
 }
 %
 \cxset{%
    subsubsection title style= raggedright
}
%    \end{macrocode}
% 
% \chapter{Tests}
%
%  We prepare a number of tests to verify that all settings work as advertized.
%
% \begin{docCommand}{testsections} {\meta{void}}
%  In honor of Barbara Beeton all testing commands are in lowercase, but we also provide
%  them in mixed case for the rest of the crowd.
% \end{docCommand}
%    \begin{macrocode}
% predefined unnumbered headings for compatibility with springer classes
\newcommand{\preface}[1][\prefacename]{\chapter*{#1}\markboth{#1}{#1}}
\newcommand{\foreword}[1][\forewordname]{\chapter*{#1}\markboth{#1}{#1}}

% TODO 
\newcommand{\extrachap}[1]{\chapter*{#1}\markboth{#1}{#1}}

\NewDocumentCommand \testsections {}
  { 
    \begingroup
    \cxset{chapter format=zoonekv}
    \chapter*{Chapters}
    \section{Sections}
    \lorem\par
    \section*{Starred Sections}
    \lorem\par
    \subsection{Subsections}
    \lorem\par
    \subsection*{Subsections}
    \lorem\par
    \subsubsection{Subsubsections}
    \lorem\par
    \paragraph {My Paragraph}
    \lorem\par
    \subparagraph{My Subparagraph}
    \lorem\par
    \endgroup
  }
  
\let\TestSections\testsections  

%    \end{macrocode}
%
%
% \testsections
% 
% \iffalse
%</LSECT>
% \fi
\endinput
\begin{tikzcd}
A \arrow[d, "g"] \arrow[r, "f"] & B \arrow[r, "\alpha"] \arrow[d, "\gamma"] & D \arrow[d, "\beta"] \\
C \arrow[rru, "h"] & B' \arrow[r, "\lambda"] & D'
\end{tikzcd}

%
% \begin{docCommand}{@ssect} { {\meta{indent}} {\meta{beforeskip}} {\meta{afterskip}} \meta{styling commands} \meta{arg1} }
% This is the star verson of the command.  What it means is that we want a heading with
% no numbers and not in the toc. Also it does not add it as a mark! This is very limiting
% as originally programmed in the kernel; probably the thinking was to use it to create
% same style headings, that one would use for purposes other than sectioning. In reality
% many books have unnumbered sections and one might want them to go on the headings.
% We modify it to be able to do both based on a settings command.
% So to summarize star section means unumbered. Will use choices as
% to what must be done with it.
%
%  
%  |#1| indent\\
%  |#2| beforeskip\\
%  |#3| afterskip\\
%  |#4| styling command\\
%  |#5| arg1 follows\\
%
% \end{docCommand} 
%    \begin{macrocode}  
\ExplSyntaxOn  
%  
%\cs_set:Npn \@ssect:nnnnn #1 #2 #3 #4 #5 {
%  \@tempskipa #3\relax
%%    \end{macrocode}
%% 
%%    \begin{macrocode}  
%  \ifdim \@tempskipa>\z@
%  \begingroup
%    #4 
%    {
%      \phd_hang_from:nn{\hskip #1}%
%      \interlinepenalty \@M 
%    
%      % do color
%%      \newfontfamily\aegean{aegean}
%%      \cxset{section~title~color=thesectiontitlecolor,
%%             section~title~font-shape=itshape,
%%             section~title~font-family=sfamily}
%           
%      \cs:w l_@@_\currentsectionname _title_color_tl\cs_end:
%      %\pgfkeysvalueof{/phd/section~title~color}
%      \set_font_aux:n{l_@@_\currentsectionname _title}
%     % \pgfkeysvalueof{/phd/section~title~font-family}
%      %\MakeUppercase{#5}
%      #5
%      \@@@@par
%   }%
%  \endgroup
%  \else
%  
%  \def\@svsechd{#4{\hskip #1\relax #5}}%
%  \fi
%% |\xsect:n{afterskip}| then sets the afteskipping as well as the afterindent.   
%  \cxset{section~afterindent = true,
%             subsection~afterindent = true, 
%             subsubsection~afterindent = true}
%  \xsect:n{#3}{#1} %ONLY NEEDED FOR HANG PARA
%}
% 


  
\ExplSyntaxOff   
   
%    \end{macrocode}

% Bodoni - Not very good

