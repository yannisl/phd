% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd-layouts manager --- a to improve chapter and section designs
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
This file provides a phd for defining a class.
%</readme>
%<*readmemd>
###The `phd` LaTeX2e package

The `phd` latex package and the class with the same name provide
convenient methods to create new styles for books, reports
and articles. It also loads the most commonly used packages 
and resolves conflicts.

This work consists of the file  `phd.dtx`,
and the derived files   `phd.ins`,  `phd.pdf`, and `phd.sty`.

###Installation

run
          phd-lua.bat on windows
           pdflatex phd.dtx
           makeindex -s gind.ist -g phd 

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com

### Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use one command:

      \cxset{chapter name font-size: Huge,
             chapter number font-size: HUGE} 

### Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs. At present I estimate
that I have completed about 70% of the work that needs
to be done.

__The package as it stands is not production stable.__ 


%</readmemd>
%
%<*TODO>
1. On final round add pkg options. This was left as last in order not to solve problems by adding
    options. Too many options are not a good User Interface.
2.  Finish symbol management, both text and math. Math already 60% incorporated.
3.  Better integration of indexing commands.   
4.  Revisit layout manager for Chapters. Broke again in tests.
5.  Docs. Add all references.
6.  Incorporate phd class for more flexibility.
7. Improve package manager.
8. Group script loading for better font management.
9. General font management to relook it again.
10. Add all style sections (about 100 already prepared). Once they
     are all working issue beta version.
%</TODO>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phd --- A package to beautify documents.
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
\endpreamble

%\BaseDirectory{C:/users/admin/my documents/github/phd}
%\usedir{MWE}
\generate{\file{\jobname.sty}{
  \from{\jobname.dtx}{SECT}}
  }

%\nopreamble\nopostamble

%</install>

%<install>\endbatchfile
%<*internal>
%\usedir{tex/latex/phd}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble

\generate{
	\file{README.txt}{\from{\jobname.dtx}{readme}}
  }

\generate{
  \file{README.md}{\from{\jobname.dtx}{readmemd}}
}
\generate{
  \file{TODO.tex}{\from{\jobname.dtx}{TODO}}
}

\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*driver>

%\listfiles
%gdef\@onlypreamble{} % TO BE REMOVED NEEDED FOR TUTS
\documentclass[oneside,11pt,a4paper]{ltxdoc}
\usepackage[bottom=2cm]{geometry}
\savegeometry{std}
% \usepackage[style=mla]{biblatex}
\usepackage{phd}
\usepackage{phd-sections}
%\usepackage{pkgindoc}             %%% danger
\sethyperref
\begin{document}
\coverpage
\secondpage
\let\bold\bfseries

\frontmatter
\tableofcontents
\mainmatter
\input{./sections/chapterdesign}
\DocInput{\jobname.dtx}
% \printindex
 \end{document}
 %
% 
%</driver>
% \fi
% 
%  \CheckSum{0}
%  \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \changes{1.0}{2013/01/26}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
% \GetFileInfo{phd.dtx}
% 
%  \def\fileversion{v1.0}          
%  \def\filedate{2012/03/06}
% \title{The \textsf{phd} package.
% \thanks{This
%        file (\texttt{phd.dtx}) has version number \fileversion, last revised
%        \filedate.}
% }
% \author{Dr. Yiannis Lazarides \\ \url{yannislaz@gmail.com}}
% \date{\filedate}
%
%
% 
% ^^A\maketitle
% 
% ^^A\frontmatter
%  ^^A\coverpage{./images/hine02.jpg}{Book Design }{Camel Press}
%  \newpage
% ^^A\secondpage
% \pagestyle{empty}
%
%
% 
%
%
% \pagestyle{headings}
% \raggedbottom
%  ^^A\OnlyDescription
%
%  ^^A\StopEventually{\printindex}

% \CodelineNumbered
% \pagestyle{headings}
% 


%<*SECT>
% \subsection{Preliminaries}
%
%    Standard file identification. We first announce the package 
%	 and require that it be used with \LaTeX2e. 
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1994/12/01]%
\ProvidesPackage{phd-sections}[2015/1/13 v1.0 chapter head management (YL)]%
\let\ltxtoday\today
%    \end{macrocode}
% \chapter{Layout Engine}
%

% 
%  The layout engine is used to provide a declarative interface to all sectioning
%  and ancillary commands. All keys follow a common nomenclature to make them 
%  easy to remember.
% user level parameters,
%    \begin{macrocode}
\newdimen\fboxrule
\newdimen\fboxsep
\fboxrule.4pt
\fboxsep1pt
\newdimen\fboxseptop
\newdimen\fboxsepright
\newdimen\fboxsepbottom
\newdimen\fboxsepleft
\fboxseptop\fboxsep
\fboxsepright\fboxsep
\fboxsepbottom\fboxsep
\fboxsepleft\fboxsep
\newdimen\fboxruletop
   \fboxruletop\fboxrule
\newdimen\fboxruleright
   \fboxruleright\fboxrule
\newdimen\fboxrulebottom
   \fboxrulebottom\fboxrule 
\newdimen\fboxruleleft
   \fboxruleleft\fboxrule
%    \end{macrocode}
% \section{toks registers}
% We creat a number of toks registers for later usage.
%    \begin{macrocode}

\newtoks\chapterprelimtoks
\newtoks\chaptertoks
\newtoks\numbertoks
\numbertoks={}
\newtoks\titletoks
\newtoks\headingtoks 
\headingtoks={}
\newsavebox\numberbox
%    \end{macrocode}
%
% \section{Registers, booleans and preliminaries}
%
% Parametric definitions for chapters 
%    \begin{macrocode}
\@ifundefined{@openright}{%
  }{}
\def\afterindenton@cx{\def\afterindent@cx{\@afterindenttrue}}
\def\afterindentoff@cx{\def\afterindent@cx{\@afterindentfalse}}
%\edef\zeroboxalign@cx{c}
%    \end{macrocode}
%
% \subsection{Lengths}
%    \begin{macrocode}
\global\newlength\chaptermarginleft
    \setlength\chaptermarginleft{30pt}%
 

\gdef\chaptermarginleft@cx{0pt}
\def\chaptertitleblockalign{}
\newcounter{chapterdisplay} \setcounter{chapterdisplay}{0}
\newcounter{numberdisplay} \setcounter{numberdisplay}{0}
%
\gdef\numberbgcolor{spot!20}   
%    \end{macrocode}
% All chapter titles can be fully framed with borders. We create length
% registers for these and appropriate keys.
% (See style 87 for usage examples)
%    \begin{macrocode}

\ExplSyntaxOn
\gdef\chapter_number_color{blue},
%
	\dim_new:c {chapter_margin_top}
	\dim_new:c {chapter_margin_right}
	\dim_new:c {chapter_margin_bottom}
	\dim_new:c {chapter_margin_left}
	\dim_new:c {chapter_margin}
	%
	\dim_new:c {chapter_border_top_width}
	\dim_new:c {chapter_border_right_width}
	\dim_new:c {chapter_border_bottom_width}
	\dim_new:c {chapter_border_left_width}
	\dim_new:c {chapter_border}
	%
	\dim_new:c {chapter_padding_top}
	\dim_new:c {chapter_padding_right}
	\dim_new:c {chapter_padding_bottom}
	\dim_new:c {chapter_padding_left}
	\dim_new:c {chapter_padding}
%
  \tl_new:N \chapter_border_top_color
  \tl_new:N \chapter_border_right_color
  \tl_new:N \chapter_border_bottom_color
  \tl_new:N \chapter_border_left_color

%
  \dim_gzero_new:N \number_margin_top
  \dim_gzero_new:N \number_margin_right
  \dim_gzero_new:N \number_margin_bottom
  \dim_gzero_new:N \number_margin_left
%
  \dim_gzero_new:N \number_border_top_width
  \dim_gzero_new:N \number_border_right_width
  \dim_gzero_new:N \number_border_bottom_width
  \dim_gzero_new:N \number_border_left_width
%  
  \dim_new:N \number_padding_top
  \dim_new:N \number_padding_right
  \dim_new:N \number_padding_bottom
  \dim_new:N \number_padding_left  
%  
  \dim_gzero_new:N \title_margin_top
  \dim_gzero_new:N \title_margin_right
  \dim_gzero_new:N \title_margin_bottom
  \dim_gzero_new:N \title_margin_left
%
  \dim_gzero_new:N \title_padding_width
  \dim_gzero_new:N \title_padding_top_width
  \dim_gzero_new:N \title_padding_left_width
  \dim_gzero_new:N \title_padding_right_width
  \dim_gzero_new:N \title_padding_bottom_width 
% 
  \dim_gzero_new:N \title_border_width
  \dim_gzero_new:N \title_border_left_width
  \dim_gzero_new:N \title_border_top_width
  \dim_gzero_new:N \title_border_right_width 
  \dim_gzero_new:N \title_border_bottom_width 
%  
  \tl_new:N \chapter_title_display_tl
  \tl_new:N \chapter_title_float_tl
  \tl_gset:Nn \chapter_title_float_tl {center}
  \tl_new:c {chapter_title_text_align}  
% 
\ExplSyntaxOff  


%    \end{macrocode}
%

%
% \subsection{Shape handler} 
%    \begin{docCommand}{number_shape}{\meta{shape name}}
%      This handler obtains values for the shape attribute.
%    \end{docCommand} 
%
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \allowed_shape_options
\clist_gset:Nn \allowed_shape_options 
  {
    rectangle,rounded~rectangle,circle,ellipse, 
    diamond, starburst,none,star,custom
  }
  
  \pgfkeys{/handlers/.shape~is/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_shape_options {##1 } 
          {
           \gdef#1{##1}
          } 
          {
            \gdef#1{none} %also emit error message
          }
      }
  }
  
\ExplSyntaxOff  
%    \end{macrocode}
% \subsection{Border style option}
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \allowed_border_style_options
\clist_gset:Nn \allowed_border_style_options 
  {
    dash,solid,double,dotted,custom,none,
  }
  
  \pgfkeys{/handlers/.border~style~is/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \clist_if_in:NnTF \allowed_border_style_options {##1 } 
          {
           \gdef#1{##1}
          } 
          {
            \gdef#1{none} %also emit error message
          }
      }
  }
  
\ExplSyntaxOff  
%    \end{macrocode}
%
%

%





% \subsection {Chapter name handler}
%
%  Handler for chaptername to hook to i18n functions, if set to auto
%  If empty just typesets nothing.\FIRE 
%  
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \allowed_chapter_names_clist
\clist_gset:Nn \allowed_chapter_names_clist
  { auto, i18n, none}
\pgfkeys{/handlers/.getchaptername/.code = 
    \pgfkeysalso
      {\pgfkeyscurrentpath/.code=
        \tl_set:Nn\l_tmpa_str:N {##1}
           \str_case_x:nnTF {##1}  
             {
               { none } { \gdef#1{} } 
               { auto } { \gdef#1{\chaptername} } %hook to babel
               { i18n } { \gdef#1{\chaptername} } %hook to babl 
             }
             {            }
             {\gdef#1{#1} }
         
      }
  }

\ExplSyntaxOff   
%    \end{macrocode}
% 
% \section{Part keys and code}
%
% The Part section is pretty much similar to the chapter code. We redefine the 
% standard sectioning commands from the book class to provide for hooks and
% additional parameters. This will be the pattern for all the sectioning 
% commands that follow.
%
%    \begin{macrocode}
\ExplSyntaxOn
  \bool_new:N \part_open_left_bool     \bool_gset_false:N \part_open_left_bool
  \bool_new:N \part_open_any_bool      \bool_gset_false:N \part_open_any_bool
  \bool_new:N \part_open_anywhere_bool \bool_gset_false:N \part_open_anywhere_bool
  \bool_new:N \part_open_right_bool    \bool_gset_false:N \part_open_right_bool
\cxset
  {
    part~name/.store~in                      = \partname,
    part~color/.store~in                     = \part_color,
    part~background-color/.store~in          = \part_bgcolor,
    part~opening/.is~choice,
    part~opening/right/.code                 = \bool_gset_true:N \part_open_right_bool,
    part~opening/left/.code                  = \bool_gset_true:N \part_open_left_bool,
    part~opening/any/.code                   = \bool_gset_true:N \part_open_any_bool,
    part~opening/none/.code                  = \bool_gset_true:N \part_open_anywhere_bool,
    part~opening/anywhere/.code              = \bool_gset_true:N \part_open_anywhere_bool, 
    part~opening/ifafter/.code={},
    part~font-family/.font-family~in         = \part_font_family,
    part~font-weight/.font-weight~in         = \part_font_weight,
    part~font-size/.font-size~in             = \part_font_size,
    part~font-shape/.font-style~in           = \part_font_shape,
    part~font-style/.font-style~in           = \part_font_shape,
    part~case/.case~in                       = \part_case, 
    part~numbering/.numbering~in             = \thepart,
    part~title~text-align/.textalign         = \part_title_text_align,
    part~format/.store~in                    = \part_format,
    part~template/.style                     = {part~format=#1},
%    
    part~number~font-family/.font-family~in  = \part_number_font_family,
    part~number~font-weight/.font-weight~in  = \part_number_font_weight,
    part~number~font-size/.font-size~in      = \part_number_font_size,
    part~number~font-shape/.font-style~in    = \part_number_font_shape,
    part~number~font-style/.font-style~in    = \part_number_font_shape,
    part~number~color/.store~in              = \part_number_color,
} 
\ExplSyntaxOff  
\cxset
  {
    part opening                             = left,
    part color                               = black!90,
    part background-color                    = spot!30, 
    part name                                = PART,
    part font-size                           = Huge, 
    part font-weight                         = bold,
    part font-family                         = serif, 
    part font-shape                          = upshape,
    part number font-size                    = Huge, 
    part number font-weight                  = normal,
    part number font-family                  = sans-serif, 
    part number font-shape                   = upshape,
    part number color                        = thelightgray,
    part numbering                           = ordinals,
    part numbering                           = Roman,
    part title text-align                    = center,
    part format                              = box,  
    part template                            = stewartpart,
  }       
%    \end{macrocode}
%
% \begin{docCommand} {part} { \meta{void} }
%   The famous |\part| command can be used both for articles as well as books
%   here.
% \end{docCommand}
%
% As is normal with programming the user interface is much longer than the
% the code that does the actual work!
%    \begin{macrocode}
\ExplSyntaxOn
\renewcommand\part{%
  \bool_if:NTF \part_open_anywhere_bool {}
    {
      \bool_if:NT \part_open_right_bool { \cleardoublepage }
      \bool_if:NT \part_open_any_bool  { \clearpage       }
      \bool_if:NT \part_open_left_bool  { \clearpage       }
    }
  
  \thispagestyle{plain}
  \if@twocolumn
    \onecolumn
    \@tempswatrue
  \else
    \@tempswafalse
  \fi
  \null\vfil
  \secdef\@part\@spart}
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{docCommand} {part} {\marg{short title} \marg{long title} }
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn  
  \def\@part[#1]#2{%
    \ifnum \c@secnumdepth >-2\relax
      \refstepcounter{part}%
      \addcontentsline{toc}{part}{\thepart\hspace{1em}#1}%
    \else
      \addcontentsline{toc}{part}{#1}%
    \fi
    \markboth{}{}%
    \bgroup
    \tl_set:Nn\l_tmpa_str:N {box}
    \str_case_x:nnTF { \part_format  }  
     {
       { traditional} { \format_part_traditional:nn { part } { #1 } { #2 } }
       { box        } { \format_head_boxed:nn       { part } { #1 } { #2 } } 
       { inline     } { \format_head_inline:nn      { part } { #1 } { #2 } }
       { inmargin   } { \format_head_inmargin:nn    { part } { #1 } { #2 } } 
      }
      {                                            }
      { \cs:w stewartpart\cs_end: {part} {#1}  }
    \egroup
    \@endpart
}
 
    
            
\def\@spart#1{%
    {\centering
     \interlinepenalty \@M
     \normalfont
     \Huge \bfseries #1\par}%
     \@endpart}

\def\@endpart{%
              %\vfil %\newpage %was here
              \if@twoside
               \if@openright
                \null
                \thispagestyle{empty}%
               \fi
              \fi
              \if@tempswa
                \twocolumn
              \fi} 
\ExplSyntaxOff                 
%    \end{macrocode}
%
% \begin{docCommand} {format_part_traditional:nn} { \marg{part name } \marg{ unused} \marg{title }}
%  Formats a traditional part, set on its own page and centeres
% \end{docCommand}
%    \begin{macrocode} 
\ExplSyntaxOn
\cs_new:Npn \format_part_traditional:nn #1 #2 #3
  {
   \group_begin:
    \centering
     \interlinepenalty \@M
     \normalfont
     \set_color:nn {#1_number}{color}
     \set_font_parameters:n {#1_number}
     \ifnum \c@secnumdepth >-2\relax
       \partname\nobreakspace\thepart
       \par
       \vskip 20\p@
     \fi
     \group_begin:
       \set_color:nn {#1}{color}
       \set_font_parameters:n { #1 }
          #3
     \group_end:
     \par
   \group_end:  
  }
 
\cs_new:Npn \format_head_inmargin:nn #1 #2 #3
  {
   \tcbdocmarginnote
     {
       \group_begin:
         \parindent0pt 
         \language-1
         \normalfont
         %\set_color:nn {#1_number}{color}
         \color{blue}
         \set_font_parameters:n {#1_number}
         \ifnum \c@secnumdepth >-2\relax
           \partname\nobreakspace\thepart\\[2pt]
         \fi
         \group_begin:
           %\set_color:nn {#1_number}{color}
           \color{blue} 
           \set_font_parameters:n { #1 }
           \nobreakspace#3
         \group_end:
         \group_end:
    }  
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{docCommand} { format_part_boxed } { }
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \format_head_boxed:nn #1 #2 #3
  {
    \centering
    \begin{tcolorbox}[colback=\part_bgcolor, 
                              colframe=white, 
                              arc=5mm]
     \bgroup                         
     \interlinepenalty \@M
     \normalfont
     \color{\part_color}
     \ifnum \c@secnumdepth >-2\relax
       \huge\bfseries \partname\nobreakspace\thepart
       \par
       \vskip 20\p@
     \fi
     \set_font_parameters:n { #1 }
      #3\par
      \egroup
     \end{tcolorbox} 
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{docCommand} { set_property_from_section_name:nn } 
%                         { \marg{name of section}  \marg{suffix} }
%  Given a section name such as part gets its property.
% \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \get_property_from_section_name:nn #1 #2
  {
    \csname\expandafter\csname #1#2\endcsname\endcsname
  }
\cs_new:Npn \set_font_parameters:n #1
  {
     \get_property_from_section_name:nn {#1}{_font_size}
     \get_property_from_section_name:nn {#1}{_font_weight}
     \get_property_from_section_name:nn {#1}{_font_shape}
     \get_property_from_section_name:nn {#1}{_font_family}
  }

\cs_new:Npn \get_color_property:nn #1 #2  
  {
     \cs:w #1_#2 \cs_end:
  }    
\cs_new:Npn \set_color:nn #1 #2  
  {
     \color{\cs:w #1_#2 \cs_end:}
  }  
\ExplSyntaxOff  
%    \end{macrocode}
%
%
%    \begin{macrocode}  
\ExplSyntaxOn
\cs_new:Npn \format_head_inline:nn #1 #2 #3
  {
    
     \begin{tcolorbox}[colback= \get_color_property:nn {#1}{bgcolor}, 
                                colframe=white, 
                                arc=3mm]
     \interlinepenalty \@M
     \normalfont
     \set_color:nn {#1}{color}
     \cs:w #1_title_text_align \cs_end:
     \ifnum \c@secnumdepth >-2\relax
       {
         \set_font_parameters:n {part_number} 
         \set_color:nn {part_number} {color}
         \partname\nobreakspace\thepart
       }
     \fi
       \set_font_parameters:n {#1} 
     \nobreakspace #3
     \par
     \end{tcolorbox} 
  }
\ExplSyntaxOff  
%    \end{macrocode}
%
%    \begin{macrocode}
\def\gluestart{\hss}\def\glueend{\hss}
%    \end{macrocode}
% \section{Chapter keys}
%
% It is not envisioned that the chapter name key be set directly by the user.
% This should be set by the document language tag (like Babel). 
% However, the user might decide that this is an easier approach.
%  \begin{docCommand}{chaptername}{ \meta{void}} 
%    Holds the chapter name tag such as Chapter or 'CHAPTER' or whatever
%    is typed by the user. 
%    This is also hooked here for i18n routines later, hence we get it via a handler.
% 
%  \end{docCommand}
%    \begin{macrocode}

\ExplSyntaxOn 
\cxset
  {
    chapter~name/.getchaptername                = \chapternameint,
    chapter~color/.store~in                     = \chapter_color,
    chapter~background-color/.store~in          = \chapter_bgcolor,
    number~background-color/.store~in           = \numberbgcolor,
}
\ExplSyntaxOff

\cxset{chapter name= Chapter} 
\cxset{    
  chapter opening/.is choice,
  chapter opening/right/.code={\@openrighttrue},
  chapter opening/left/.code={\@openlefttrue},
  chapter opening/any/.code={\@openanytrue},
  chapter opening/none/.code={\@openanywheretrue\@openrightfalse%
                                                  \@openleftfalse\@openanyfalse},
  chapter opening/anywhere/.code={\@openanywheretrue\@openrightfalse
     \@openleftfalse\@openanyfalse},
  chapter opening/ifafter/.code={},
}
%    \end{macrocode}


%  The font options use handlers to get the values. This alows for more flexibiliy.
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{%    
  chapter~font-family/.font-family~in    = \chapter_font_family,
  chapter~font-weight/.font-weight~in    = \chapter_font_weight,
  chapter~font-size/.font-size~in        = \chapter_font_size,
  chapter~font-shape/.font-style~in      = \chapter_font_shape,
  chapter~font-style/.font-style~in      = \chapter_font_shape,}
\ExplSyntaxOff  
%    \end{macrocode}
%
% \subsection{Chapter display and float properties}
%
% This generates keys for float and display. The attribute display determines if the
% element is on a line of its own or not. The float determines glue to be
% set to float the element left or right.
%
%    \begin{macrocode}
\newcounter{lastelementfloat}
     \setcounter{lastelementfloat}{-1}
\newcounter{chapterfloat} 
      \setcounter{chapterfloat}{1}  
\newcounter{numberfloat} 
      \setcounter{numberfloat}{1}        
\newcounter{currentelementfloat}
      \setcounter{currentelementfloat}{-1}
%
\global\newlength\chapterborderrightwidth
    \setlength\chapterborderrightwidth{2pt} 
\global\newlength\chapterborderleftwidth
    \setlength\chapterborderleftwidth{2pt}     
\global\newlength\chapterborderbottomwidth
    \setlength\chapterborderbottomwidth{2pt}  
\global\newlength\chapterbordertopwidth
    \setlength\chapterbordertopwidth{2pt}             
%
\global\newlength\chapterpaddingleft
    \setlength\chapterpaddingleft{10pt}
\global\newlength\chapterpaddingright
    \setlength\chapterpaddingright{10pt}  
\global\newlength\chapterpaddingtop
    \setlength\chapterpaddingtop{10pt}        
\global\newlength\chapterpaddingbottom
    \setlength\chapterpaddingbottom{10pt}  
         
\ExplSyntaxOn
\int_zero_new:c {chapterdisplaycounter}
\int_zero_new:c {chapterfloatcounter}
%    \end{macrocode}
%
% \begin{docCommand}{phdsetcounter}{ \marg{counter name} \marg{int value} }
%    Sets an integer counter to a value.
% \end{docCommand}
%    \begin{macrocode}
\cs_gset:Npn \phd_set_counter:nn #1 #2 
 {
   \int_gset:cn {#1} {#2}
 }  
\ExplSyntaxOff
%    \end{macrocode}
%
% \subsubsection{Chapter name floating and display properties}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{%  
  chapter~display/.is~choice,
  chapter~display/inline/.code    =\global\setcounter{chapterdisplay}{0}
                               \phd_set_counter:nn {chapterdisplaycounter}{0},
  chapter~display/block/.code     =\global\setcounter{chapterdisplay}{2}
                               \phd_set_counter:nn {chapterdisplaycounter}{2}, 
  chapter~display/none/.code      =\global\setcounter{chapterdisplay}{0}
                               \phd_set_counter:nn {chapterdisplaycounter}{0},                              
%    
  chapter~float/.is~choice,
  chapter~float/none/.code        = \global\setcounter{chapterfloat}{0}%
                            \phd_set_counter:nn {chapterfloatcounter}{0},
  chapter~float/left/.code= \global\setcounter{chapterfloat}{0}
                            \phd_set_counter:nn {chapterfloatcounter}{0},
% center = 1                             
  chapter~float/center/.code= \global\setcounter{chapterfloat}{1}%
                             \phd_set_counter:nn {chapterfloatcounter}{1}, 
% right = 2                             
  chapter~float/right/.code= \global\setcounter{chapterfloat}{2}%
                             \phd_set_counter:nn {chapterfloatcounter}{2},%   
 }
\ExplSyntaxOff 
\cxset{chapter display=block,
       chapter float=left,
       } 
%    \end{macrocode}
%
%
% \subsection{Chapter content before and after}
%
%    \begin{macrocode}   
\ExplSyntaxOn
\cxset
  {
    chapter~before~content/.store~in        = \chapter_before_content,
    chapter~before/.store~in                = \chapter_before,
    chapter~before~content = ,
    chapter~before=,
  }
\ExplSyntaxOff 
%    \end{macrocode}
% 
% \subsection{Chapter margins and padding}
%
% The dual code is interim we will avoid all these in the future
%    \begin{macrocode}
\ExplSyntaxOn

\cxset{   
  chapter~margin-top/.code= \dim_gset:cn { chapter_margin_top } { #1 },
  chapter~margin-left/.code=\setlength\chaptermarginleft{#1}%
                            \global\chaptermarginleft\chaptermarginleft\relax
                            \def\gluestart{\hskip#1}%
                            \def\glueend{\hss}
                            \dim_gset:cn {chapter_margin_left}{#1},
  chapter~margin-right/.code = \dim_gset:cn {chapter_margin_right} { #1 },
  chapter~margin-bottom/.code = \dim_gset:cn {chapter_margin_bottom} { #1 },                           
  }

\ExplSyntaxOff 
%    \end{macrocode}
%
% \subsection{Chapter borders}
%
% Next we set keys for all border width
% \subsubsection{Chapter border widths}
%    \begin{macrocode}      
\ExplSyntaxOn
\cxset{  
  chapter~border-top-width/.code    = \dim_gset:cn {chapter_border_top_width} {#1},                                            
  chapter~border-right-width/.code  = \dim_gset:cn {chapter_border_right_width} {#1},                                                                                      
  chapter~border-bottom-width/.code = \dim_gset:cn {chapter_border_bottom_width} {#1},                                                                                                                              
  chapter~border-left-width/.code   = \dim_gset:cn {chapter_border_left_width} {#1},
 }                        
\cxset{  
  chapter~border-width/.code = \pgfkeysalso{chapter~border-top-width=#1,
                                            chapter~border-right-width=#1,
                                            chapter~border-bottom-width=#1,
                                            chapter~border-left-width=#1,
                                            },
}            
\ExplSyntaxOff                                     
%    \end{macrocode}  
% 
% \subsubsection{Chapter padding}
% We now deal with padding the same way including the generic version                                             
%    \begin{macrocode}  
\ExplSyntaxOn                                             
\cxset{
  chapter~padding-left/.code   = \dim_gset:cn {chapter_padding_left}{#1},                                                                                                                           
  chapter~padding-right/.code  = \dim_gset:cn {chapter_padding_right}{#1},                                                                                                             
  chapter~padding-top/.code    = \dim_gset:cn {chapter_padding_top}{#1},                                                                                                                                                       
  chapter~padding-bottom/.code = \dim_gset:cn {chapter_padding_bottom}{#1},                                                                                                                                                                                                 
}
\ExplSyntaxOff
%    \end{macrocode}
% In retrospect this should go in a handler
%    \begin{macrocode}
\cxset{
  chapter padding/.code={
    \def\@tempa{none}%
    \def\@tempb{#1}%
    \ifx\@tempa\@tempb%
      \global\setlength\chapterpaddingleft{0pt}%
      \global\setlength\chapterpaddingright{0pt}%
      \global\setlength\chapterpaddingtop{0pt}%
      \global\setlength\chapterpaddingbottom{0pt}%
    \else
      \setlength\chapterpaddingleft{#1}%
      \global\chapterpaddingleft\chapterpaddingleft\relax                                                                                                                           
      \setlength\chapterpaddingright{#1}%
      \setlength\chapterpaddingtop{#1}%
      \setlength\chapterpaddingbottom{#1}%
    \fi}
}    

%    \end{macrocode}
%
% \subsubsection{Chapter border colors}
%
% The series of keys denoted by \meta{chapter}\meta{border}\meta{top}\meta{color}
% are used to store the colors of borders. We need to be careful here not to get
% any expansion problems.

%    \begin{macrocode}
\ExplSyntaxOn
\cxset{chapter~border-top-color/.code    = \tl_gset:Nn \chapter_border_top_color {#1},
  chapter~border-right-color/.code       = \tl_gset:Nn \chapter_border_right_color {#1},
  chapter~border-bottom-color/.code      = \tl_gset:Nn \chapter_border_bottom_color{#1},
  chapter~border-left-color/.code        = \tl_gset:Nn \chapter_border_left_color {#1},
  }
 \cxset{%
  chapter~border-top-color=sweet,
  chapter~border-right-color=sweet,
  chapter~border-bottom-color=sweet,
  chapter~border-left-color=sweet,
}%
%                            
\cxset{chapter~border-color/.code=\pgfkeysalso{chapter~border-top-color={#1},%
                                               chapter~border-right-color={#1},
                                               chapter~border-bottom-color={#1},
                                               chapter~border-left-color={#1}}}%
%                                                           
 % set some defaults                                                                
\cxset{%
  chapter~border-top-color=sweet,
  chapter~border-right-color=sweet,
  chapter~border-bottom-color=sweet,
  chapter~border-left-color=white,
  chapter~border-color=blue,
 }%
\ExplSyntaxOff          
%    \end{macrocode}    
%
% \subsubsection{Chapter letter spacing} 
% NEEDS REVISITING TO ALLOW FOR  SOUL OR MICROTYPE  LEAVE ALSO LETTER SPACING 
% ALSO TO TAKE OUT SPACEOUT
%    \begin{macrocode}   
                                   
\cxset{
  chapter after/.store in=\chapterafter@cx,
  chapter spaceout/.is choice,
  chapter spaceout/soul/.code=\@chapterspaceouttrue\@soulspaceouttrue,
  chapter spaceout/microtype/.code=\@chapterspaceouttrue\@soulspaceouttrue,
  chapter spaceout/none/.code=\@chapterspaceoutfalse\@soulspaceoutfalse,
  %  
  chapter letter-spacing/.is choice,
  chapter letter-spacing/soul/.style=\pgfkeysalso{chapter spaceout=soul},
  chapter letter-spacing/microtype/.style=\pgfkeysalso{chapter spaceout=microtype},
  chapter letter-spacing/true/.code=\@chapterspaceouttrue,
  chapter letter-spacing/none/.code=\@chapterspaceoutfalse,
  chapter letter-spacing/false/.code=\@chapterspaceoutfalse,
 }  
%    \end{macrocode}  
%
%  Next we define styles. This must be distinguished from shapes and only
%  apply to rectangular boxed content, using \cmd{\phd@fbox}
%
%    \begin{macrocode}
\ExplSyntaxOn
\tl_new:c {chapter_border_top_style}
\tl_new:c {chapter_border_right_style}
\tl_new:c {chapter_border_bottom_style}
\tl_new:c {chapter_border_left_style}
\cxset{
  chapter~border-top-style/.code      = \tl_gset:cn {chapter_border_top_style}{#1}, 
  chapter~border-right-style/.code    = \tl_gset:cn {chapter_border_right_style}{#1}, 
  chapter~border-bottom-style/.code   = \tl_gset:cn {chapter_border_bottom_style}{#1},
  chapter~border-left-style/.code     = \tl_gset:cn {chapter_border_left_style}{#1}, 
  chapter~border-style/.code          = \pgfkeysalso{chapter~border-top-style=#1,%
                              chapter~border-right-style=#1,%
                              chapter~border-bottom-style=#1,%
                              chapter~border-left-style=#1%,
  },
}
\ExplSyntaxOff
\cxset{
  chapter border-top-style=solid,
  chapter border-right-style=solid,
  chapter border-bottom-style=solid,
  chapter border-left-style=solid}  
%    \end{macrocode}

%
%  \begin{docCommand}{chaptershape} {\meta{shape name}}
%  Defines the shape for the Chapter
%  \end{docCommand}
%
%    \begin{macrocode}
%
\ExplSyntaxOn
  \cxset{chapter~shape/.shape~is = \chaptershape, }
  \cxset{chapter~shape = diamond}
\ExplSyntaxOff
%  
%    \end{macrocode}
%
% \cxset{chapter shape = diamond}
% \subsection{Chapter title keys}
% 
%   We define  key-sets for the chapter title block. The text is typeset in a minipage
%   of width \docAuxCommand {chapter_title_text_width}. Any borders and padding
%   are added by the layout engine and then the block is aligned as per the rules 
%   and settings described later on.
% 
%    \begin{macrocode}  
\ExplSyntaxOn
\dim_new:N \chapter_title_text_width
\cxset{ 
  chapter~title~width/.code =  \dim_gset:Nn \chapter_title_text_width {#1},
  title~text-width/.style = { chapter~title~width= {#1} }
}    
\ExplSyntaxOff
%    \end{macrocode}
%
%  Next we deal with the title alignment. The title is typeset in a minipage
%  We allow for the total to be positioned. The key text-align specifies the alignment
%  of the inner text block. 
%
%  TeX does not distinguish the type of boxes found in CSS. As a matter of fact TeX’s model
%  is much more complicated and also allows the different types to be nested indefinetly.
%  Rendering depends on the typesetting mode. 
%  The display block, should just add |\vskip|s and terminate horizontal mode. This might
%  avoid to have to type some keys.
%
% \begin{docKey}{title display}{ = \oarg{none,block,inline,inline-block}}{default block}
% The title display key determines how the title is aligned with its neighbours.
% It defaults to block, which it means is typeset on its own line.
%
%  |chapter_title_display = none|   none is left left aligned\\
%  |chapter_title_display = block|   block typeset in minipage\\
%  |chapter_title_display = in-line block|   in-line block minipage but cannot float\\
%  |chapter_title_display = inline|   inline equivalent to 0 consider removing \\ 
% \end{docKey}
%    \begin{macrocode}
\ExplSyntaxOn
%
\cxset{
  title~display/.is~choice,
  title~display/none/.code          = \tl_gset:Nn \chapter_title_display_tl{none},
  title~display/block/.code         = \tl_gset:Nn \chapter_title_display_tl{block},
  title~display/in-line block/.code = \tl_gset:Nn \chapter_title_display_tl{in-line block},
  title~display/inline/.code        = \tl_gset:Nn \chapter_title_display_tl{inline},
 }
\ExplSyntaxOff
\cxset{title display=block}  %!REMOVE PUT AT DEFAULTS
%    \end{macrocode}
% 
%  \begin{docCommand}{chapter_title_float_tl} {\meta{option}}
%  This key determines if the title block can float. This is used together 
%  with the display property described above. For an element to float the |title  display| must be block
%  and the |title| float to one of |left|, |right| or |center|. The last one is a
%  heretical departure from the css standard model, which uses |margin:auto| for this. 
%  Not too difficult to incorporate, maybe I should do this at the next version.
%  \end{docCommand}
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{
  title~float/.is~choice,
  title~float/none/.code   = \gdef\chapter_title_float_tl {none},    
  title~float/left/.code   = \gdef\chapter_title_float_tl {left},
  title~float/right/.code  = \gdef\chapter_title_float_tl {right},
  title~float/center/.code = \gdef\chapter_title_float_tl {center},
}
\ExplSyntaxOff
\cxset{title float=center}
%    \end{macrocode}
% 
% 
%  \begin{docCommand}{chapter_title_text_align} {\meta{void}}
%  Key setting to set inner block text alignment. This allows for more options than normal css.
%  For example we can do russian last line alignment. 
%  
% \end{docCommand}  
%
%    \begin{macrocode}  
\ExplSyntaxOn
\cxset{
  chapter~title~text-align/.textalign = \chapter_title_text_align,
  %/.is~choice,
%  chapter~title~text-align/center/.code = \tl_gset:cn {chapter_title_text_align}
%      {\Centering},                                                                                                 
%  chapter~title~text-align/centering/.code= \tl_gset:cn {chapter_title_text_align}
%      {\centering},
%  chapter~title~text-align/Centering/.code= \tl_gset:cn {chapter_title_text_align}
%      {\Centering},                                                                                                        
%  chapter~title~text-align/none/.code = \tl_gset:cn {chapter_title_text_align}{},                                                                                                 
%  chapter~title~text-align/justified/.code = \tl_gset:cn {chapter_title_text_align}{},
%  chapter~title~text-align/left/.code =  \tl_gset:cn {chapter_title_text_align}
%      {\RaggedRight},
%  chapter~title~text-align/raggedleft/.code =  \tl_gset:cn {chapter_title_text_align}
%      {\RaggedLeft},
%  chapter~title~text-align/right/.code =  \tl_gset:cn {chapter_title_text_align}
%      {\RaggedLeft},
%  chapter~title~text-align/raggedright/.code = \tl_gset:cn {chapter_title_text_align}
%     {\RaggedRight},
}

%
\cxset{chapter~title~text-align=left}

\tl_new:c {chapter_title_align}
\cxset{    
  % aligning the block title 
  chapter~title~align/.is~choice,
  chapter~title~align/centering/.code=
   \tl_gset:cn {chapter_title_align}{centering},
  % alias
  chapter~title~align/center/.style= {chapter~title~align=#1} , 
%   
  chapter~title~align/raggedright/.code=,
%  
  chapter~title~align/raggedleft/.code=
    \tl_gset:cn {chapter_title_align}{raggedleft},
%                                                          
  chapter~title~align/right/.code=                                                      
    \tl_gset:cn {chapter_title_align}{right},  
%  
  chapter~title~align/left/.code=
    \tl_gset:cn {chapter_title_align}{left},
%                                                 
  chapter~title~align/none/.code=
     \tl_gset:cn {chapter_title_align}{none},
}

%  
\ExplSyntaxOff
\cxset{chapter title align=centering}
%
%    \end{macrocode}
%
% \begin {docCommand} {title_font_family} {\meta{font family name}}
%    These keys set the font parameters for the element. These are high level commands
%    \pkgname{fontspec} can be used for lower level fine-tuning, such as tags for scripts,
%    languages and other features.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{
  title~font-face/.font-face~in               = \title_font_face, 
  title~font-family/.font-family~in           = \title_font_family,
  title~font-weight/.font-weight~in           = \title_font_weight,
  title~font-size/.font-size~in               = \title_font_size,
  title~font-color/.store~in                  = \titlefontcolor@cx,
  title~font-shape/.font-style~in             = \title_font_shape
}
\ExplSyntaxOff
%
\cxset{title font-shape=upshape}
\cxset{title font-face=pan}
%    \end{macrocode}
%
%  Letter-spacing is handled in a similar fashion defining keys both for 
%  the common \latex community terminology (spaceout) and also
%  using |letter-spacing|.
%
%  
%    \begin{macrocode}
\cxset{  
  title spaceout/.is choice,
  title spaceout/soul/.code                  = \@titlespaceouttrue,
  title spaceout/none/.code                  = \@titlespaceoutfalse,
  title spaceout/true/.code                  = \@titlespaceouttrue,
  title spaceout/false/.code                 = \@titlespaceoutfalse,
  title letter-spacing/true/.code            = \@titlespaceouttrue,
  title letter-spacing/false/.code           = \@titlespaceoutfalse,  
}
%    \end{macrocode}
%
%    \begin{macrocode}
\cxset{  
  title font/.style={title font-family=#1},
  title before/.store in=\titlebefore@cx,
  title after/.store in=\titleafter@cx,
  title beforeskip/.store in=\titlebeforeskip@cx,
  }
%    \end{macrocode}
%
% \begin{docKey}{title margin-top}{ = \meta{dim}} {default 0pt}
% This family of keys are used to set the title margins. Note these are outside 
% the containing block and for the top and bottom, we need to be in vertical mode.
% \end{docKey}
%
%   \begin{macrocode}
\ExplSyntaxOn


\cxset  {          
  title~margin-top/.code    = \dim_gset:Nn \title_margin_top {#1},
  title~margin-right/.code  = \dim_gset:Nn \title_margin_right {#1},
  title~margin-bottom/.code = \dim_gset:Nn \title_margin_bottom {#1},
  title~margin-left/.code   = \dim_gset:Nn \title_margin_left {#1},
 
}    
\ExplSyntaxOff    

%    \end{macrocode}
%
% \begin{docCommand}{title_padding_top_width} { \meta{dim} }  
%    Handles all the padding settings. The padding is added outside the minipage
%    and before the border. It is equivalent to \tikzname |inner sep| and to |\fbox|'s 
%    |\fboxsep|, so no fire works here or browser wars.
% \end{docCommand}
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{  
   title~padding-top/.code    = \dim_gset:Nn \title_padding_top_width{#1},
   title~padding-bottom/.code = \dim_gset:Nn \title_padding_bottom_width{#1} ,
   title~padding-left/.code   = \dim_gset:Nn \title_padding_left_width{#1},
   title~padding-right/.code  = \dim_gset:Nn \title_padding_right_width{#1},
   title~padding/.style       = {title~padding-top=#1,
                                   title~padding-right=#1,
                                   title~padding-bottom=#1,
                                   title~padding-left=#1,
                                 }, 
}
\ExplSyntaxOff
%    \end{macrocode}

%
% \begin{docCommand}{title_border_top_width}{\marg {dim} }
%    Handles all the settings for the border widths. The \docAuxCommand{title_border_width}
%    sets all borders to one value.
% \end{docCommand}
%    \begin{macrocode}  
\ExplSyntaxOn  
\cxset {                                   
  title~border-top-width/.code      = \dim_gset:Nn \title_border_top_width {#1},
  title~border-right-width/.code    = \dim_gset:Nn \title_border_right_width {#1},
  title~border-left-width/.code     = \dim_gset:Nn \title_border_left_width {#1},
  title~border-bottom-width/.code   =\dim_gset:Nn \title_border_bottom_width {#1},                             
  title~border-width/.code= \dim_gset:Nn \title_border_width{#1}
                                           \dim_gset:Nn\title_border_top_width{#1}
                                           \dim_gset:Nn \title_border_right_width{#1}
                                           \dim_gset:Nn \title_border_bottom_width{#1}
                                           \dim_gset:Nn \title_border_left_width{#1},
}                     
\ExplSyntaxOff  
%    \end{macrocode}
%
% \begin{docCommand} { title_border_color } { \meta{color} }
%   This family of commands sets colors for titles.
% \end{docCommand}
%
%    \begin{macrocode} 
\ExplSyntaxOn
\tl_new:N \title_border_color
\tl_new:N \title_border_top_color
\tl_new:N \title_border_right_color
\tl_new:N \title_border_bottom_color
\tl_new:N \title_border_left_color
\cxset{  
  title~border-left-color/.code     = \tl_gset:Nn \title_border_left_color {#1},
  title~border-top-color/.code      = \tl_gset:Nn \title_border_top_color {#1},
  title~border-right-color/.code    = \tl_gset:Nn \title_border_right_color {#1},
  title~border-bottom-color/.code   = \tl_gset:Nn \title_border_bottom_color {#1},
% 
  title~border-color/.code=\tl_gset:Nn \title_border_color{#1}%
                           \tl_gset:Nn \title_border_left_color{#1}%
                           \tl_gset:Nn \title_border_right_color{#1}%
                           \tl_gset:Nn \title_border_top_color{#1}%
                           \tl_gset:Nn \title_border_bottom_color{#1},
}
\ExplSyntaxOff
%    \end{macrocode}
%
%\cxset{title border-color=blue}
%\ExplSyntaxOn
%
%\ExplSyntaxOff

%    \begin{macrocode}
\cxset {
  %title margin-bottom/.style =\pgfkeysalso{title margin bottom=#1},      
%  title margin-left/.code=\global\setlength{\titlemarginleft}{#1}
%                                      \gdef\titlemarginleft@cx{\hspace*{#1}},%,
  title afterskip/.store in=\titleafterskip@cx,
  position/.is choice,
  position/left/.code={\@lefttrue},
  position/right/.code={\@righttrue},
  position/center/.code={\@centertrue},
}

%                  
%    \end{macrocode}
%
% \section{The number element keys}
% The numbering keys deal with the typesetting of the chapter number
% in the chapter head. We use two packages for expressing numbers into
% words. The padzeroes is to produce EWD style notes. 
%
% We define a number of shorter aliases. This also for some legacy code using it.
%    \begin{macrocode}
\cxset{
  numbering/.numbering in = \thechapter,
  chapter numbering/.numbering in = \thechapter,
%  numbering/padzeroes/.code={\gdef\thechapter{\mbox{EWD -\padzeroes[4]\decimal{chapter}}
%  }},
%  numbering/ORDINALS/.code=\gdef\thechapter{%
%  \expandafter\ordinals@cx{\@arabic\c@chapter}},
}
%    \end{macrocode}
%
%  Next we get the spaceout keys going
%
%    \begin{macrocode}
\cxset{  
  number spaceout/.is choice,
  number spaceout/soul/.code=\@numberspaceouttrue,
  number spaceout/none/.code=\@numberspaceoutfalse,
  number spaceout/inherit/.code=\let\@numberspaceout\@chapterspaceout,
  number spaceout/microtype/.code=\@numberspaceouttrue,
  number letter-spacing/.code=\pgfkeysalso{number spaceout=soul},
  number dot/.store in=\numberpunctuation@cx,}
%    \end{macrocode}
% The position keys will be dropped soon!
%    \begin{macrocode}  
\cxset{  
  number position/.is choice,
  number position/leftname/.code={\@leftnametrue\@rightnamefalse},
  number position/rightname/.code={\@rightnametrue\@leftnamefalse},
  number position/absolute/.code={},
  number position/righttitle/.code=\@righttitletrue,
  number position/lefttitle/.code=\@lefttitletrue,
}
%    \end{macrocode}
%
% The before and after keys. We need to expand the concept.
%
%    \begin{macrocode}
\ExplSyntaxOn
\cxset
  {
    number~after/.store~in               = \numberafter@cx,
    number~after~content/.store~in       = \numberaftercontent@cx,
    number~before/.store~in              = \numberbefore@cx,
    number~before~content/.store~in      = \numberbeforecontent@cx,
  }
\ExplSyntaxOff

\cxset{number after=,
       number after content=,
       number before=,
       number before content=,}  
%  
\ExplSyntaxOn
\cxset{  
  number background-color/.code=\gdef\numberbgcolor{#1},
  number color/.store in=\chapter_number_color,
}
\cxset{number color=blue}
\ExplSyntaxOff
%    \end{macrocode}
%  \begin{docCommand}{number_font_weight} {\meta{font weight name}}
%    Defining the fonts follows the same pattern as for the other elements.
%    These are passed onto the \refCom{setnumberfont} for further processing by the
%    layouts engine.
%  \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{    
  number~font-size/.store~in         = \number_font_size,
  number~font-family/.font-family~in = \number_font_family,
  number~font-weight/.font-weight~in = \number_font_weight ,
  number~font-shape/.font-style~in   = \number_font_shape,
  number~font-style/.font-style~in   = \number_font_shape,
  number~font-name/.store~in         = \number_font_name,% CHECK USAGE
}
\ExplSyntaxOff
%
%    \end{macrocode}
%
% \subsection{Number borders}
%    \begin{macrocode}
\ExplSyntaxOn
%

\cxset
  {  
    number~margin~top/.code     = \dim_gset:Nn\number_margin_top {#1},
    number~margin~left/.code    = \dim_gset:Nn \number_margin_left {#1},
    number~margin~right/.code   = \dim_gset:nn \number_margin_right {#1},
    number~margin~bottom/.code  = \dim_gset:nn \number_margin_bottom {#1}
  }  
%  
\cxset
  {  
  % number borders
  number~border-top-width/.code    = \dim_gset:Nn\number_border_top_width{#1},
  number~border-bottom-width/.code = \dim_gset:Nn\number_border_bottom_width {#1} ,
  number~border-right-width/.code  = \dim_gset:Nn\number_border_right_width{#1},
  number~border-left-width/.code   = \dim_gset:Nn\number_border_left_width{#1},
  number~border-width/.code        = \pgfkeysalso{number~border-top-width=#1,
                                                  number~border-right-width=#1,
                                                  number~border-bottom-width=#1,
                                                  number~border-left-width=#1},}
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}                                                         
\cxset{  
  number display/.is choice,
  number display/inline/.code=\global\setcounter{numberdisplay}{0},
  number display/block/.code=\global\setcounter{numberdisplay}{2},}   
%  
\cxset{  
  number float/.is choice,
  number float/left/.code=\global\setcounter{numberfloat}{0},
  number float/none/.code=\global\setcounter{numberfloat}{0},                                                    
  number float/center/.code=\global\setcounter{numberfloat}{1},
  number float/right/.code=\global\setcounter{numberfloat}{2},     
}
%    \end{macrocode}
%  \subsection{Shapes}
% I wasn’t too sure how to incorporate this in a nice way, so I defined a new property key,
% shape
% A shape can also have a style, if you want to really get fancy.
%  \begin{docCommand}{numbershape} {\meta{void}}
%    The |\numbershape| token list stores common shapes that can be used to shape the
%    number. We use \tikzname to as the shaping engine except for the rectangle that
%    we use our own. The number can be shaped separately from the chapter even when they
%    are inline. 
%  \end{docCommand}
% Picked up quite a few issues here. Need to revisit to ensure everything is ok. Seems
% to be an issue with number???
%    \begin{macrocode}
\ExplSyntaxOn
\cxset{
   number~shape/.shape~is= \numbershape,
}
\ExplSyntaxOff
\cxset{number shape=star}
%
%    \end{macrocode}
%  
%
% We define border styles first individually per side and then globally with
% a short-hand key.
% CSS has a dotted solid dashed double
% 
%    \begin{macrocode}
\ExplSyntaxOn
\cxset
  {                                                         
   number~border-style/.border~style~is=\number_border_style,
  }
\ExplSyntaxOff   
\cxset{number border-style=solid}
 
% number padding
\ExplSyntaxOn

\cxset{  
  number~padding-top/.code= \dim_gset:Nn \number_padding_top {#1},
  number~padding-right/.code=\dim_gset:Nn \number_padding_right{#1},
  number~padding-bottom/.code=\dim_gset:Nn \number_padding_bottom {#1},
  number~padding-left/.code=\dim_gset:Nn \number_padding_left{#1},
  number~padding/.code=\pgfkeysalso{number~padding-top=#1,
           number~padding-right=#1,
           number~padding-bottom=#1,
           number~ padding-left=#1},%
}   
\ExplSyntaxOff
%    \end{macrocode}                                                        
%
% \subsection{Author blocks}
% 
% Author blocks are only set if the boolean |\@authorblock| is set to true.
%
%    \begin{macrocode}
\cxset{
  author block/.is choice,
  author block/true/.code={\@authorblocktrue},
  author block/false/.code={\@authorblockfalse},
  author names/.store in=\authorblock@cx,  
  author block format/.store in=\authorblockformat@cx,
  author block afterskip/.store in=\authorblockafterskip@cx,
  chapter toc/.is choice,
  chapter toc/true/.code=\@toctrue,
  chapter toc/false/.code=\@tocfalse,
  chapter toc/none/.code=\@tocfalse,
}
%    \end{macrocode}
    
%    \begin{macrocode}    
\def\debugtitle{%                                         
\cxset{title border-top-color=sweet,
          title border-top-width=10pt,
          title border-left-color=sweet,
          title border-left-width=10pt,
          title border-right-color=sweet,
          title border-right-width=20pt,
          title border-bottom-color=sweet,
          title border-bottom-width=20pt,
          title border-width=0.2pt,
          title border-color=red,
          title padding-top=50pt,
          title padding-bottom=50pt,
          title padding-left=0pt,
          title padding-right=0pt,
          title padding=0pt,
          }
   }                
\cxset{chapter margin-top=0pt,
          chapter margin-left=20pt,
          chapter title align=left,
          chapter background-color=white,
          chapter border-left-width=0pt,
          chapter border-right-width=0pt,
          chapter border-bottom-width=0pt,
          chapter border-top-width=0pt,
          chapter font-shape=upshape,
}
\cxset{number background-color=white,
          number padding-left=0pt,
          number padding-right=0pt,
          number padding-top=0pt,
          number padding-bottom=0pt,
          number border-top-width=0pt,
          number border-bottom-width=0pt,
          number border-left-width=0pt,
          number border-right-width=0pt,
          number border-style=solid,
          number font-shape=upshape}
\cxset{author block=false,
          author block afterskip=,
          title margin-top=0pt,
          title margin-bottom=0pt,
          title margin-left=0pt,
          title margin-right=0pt,
          title border-top-color=sweet,
          title border-top-width=10pt,
          title border-left-color=sweet,
          title border-left-width=10pt,
          title border-right-color=sweet,
          title border-right-width=20pt,
          title border-bottom-color=sweet,
          title border-bottom-width=20pt,
          title border-width=0pt,
          title border-color=red,
          title padding-top=50pt,
          title padding-bottom=50pt,
          title padding-left=50pt,
          title padding-right=50pt,
          title padding=0pt,
          chapter title text-align=center,
          title display=block,
          }
\cxset{author names=}
\cxset{author block format=}
\cxset{chapter title width=0.7\textwidth}
\cxset{chapter title align=centering}
%    \end{macrocode}
%
% \begin{docCommand} {debugchapter} { \meta{void}}
% Settings for debugging a chapter heading. Shows all borders. \FIRE
% \end{docCommand}
%    \begin{macrocode}
\def\debugchapter{%
\cxset{chapter margin-top=0pt,
          chapter margin-left=0pt,
          chapter background-color=white,
%          
          chapter border-left-width=0.2pt,
          chapter border-right-width=0.2pt,
          chapter border-bottom-width=0.2pt,
          chapter border-top-width=0.2pt,
%          
          chapter padding-top=1pt,
          chapter padding-bottom=0pt,
          chapter padding-left=0pt,
          chapter padding-right=0pt,
%         
          number border-left-width=0.2pt,
          number border-right-width=0.2pt,
          number border-bottom-width=0.2pt,
          number border-top-width=0.2pt,
%          
          number padding-top=1pt,
          number padding-bottom=0pt,
          number padding-left=0pt,
          number padding-right=0pt,
}}
\debugchapter
%    \end{macrocode}
% 
%
% \section{Setting up the special chapter head mechanism}
%
% We divide chapter heads in two broad categories, the
%	standard chapter heads that utilize macros similar to
%	the standard classes and the \textit{special} chapter
%	heads that have their own typesetter commands.
%	For example we provide a special type of design for
%	this book called \textit{stewart}. The \cs{stewart}
%	is a template author defined command.
%	Any special design requires, two items. A macro defining
%	the design and setting the custom key to point to this macro.
%
%	 
% begin{macro}{custom}
% begin{macro}{customdesign@cx} 
%	This key holds the name of a macro that is to be
%	trigerred for a custom designed template. 
% 
%    \begin{macrocode}
\cxset{custom/.code=\global\@specialtrue
                \gdef\customdesign@cx{%
                      \csname#1\endcsname},
          fill/.store in=\fill@cx}
%    \end{macrocode}
%  
%
% 
%
% 	This macro  typesets the chapter label i.e., |CHAPTER|. We
%	set the font parameters as defined by the key value system.
%	The label is defined first as |CHAPTER| by the standard
%	class and later on as |Appendix|. 
%	If we need small caps or spaceout we use the |\so| command
%	from the |soul| package.
%    \begin{macrocode}
 \newcommand\inshape[2][fill=sweet,white]{%
% \rightline{\fbox{#2R}}
%\leftline{\fbox{#2}}
  %
        \begin{tikzpicture} 
         \filldraw[gray]  (0,0) circle [radius=1.5pt];%
         \node at (0,0) [%rounded rectangle,
                      trim left, 
                      name=s,
                      %anchor=midway,
                       behind path,
                       circle,
                       drop shadow={opacity=0.5,fill=sweet}, %box shadow in css
                        black,
                       % double=sweet,
                        %text height=1.5ex,
                        %text depth=1ex,
                        %anchor=s.base,
                        draw,
                        outer ysep=0pt, %no outer so that lines can align nicely
                        inner ysep=0pt,
                        inner xsep=0pt,
                        line width=1pt,%#1
                         ]{#2};
         \end{tikzpicture}%
\ignorespaces}%
%             

\def\tikzi{%
    \tikz[remember picture,overlay] 
    \draw[<->] (0,0)--(0,1.5)--++(-.2,0) node[left,fill=blue!15,text=black]%
       {{\ttfamily\footnotesize\string\chaptermarginleft}};%\space%
}%
%
%
\global\newsavebox\chapternamebox
\global\newsavebox\numbernamebox
\global\newsavebox\bothboxes
\global\newsavebox\tempboxa@cx
\global\newsavebox\tempboxb@cx
\global\newsavebox\tempboxc@cx
%    \end{macrocode}
%
%  \begin{docCommand}{set_chapter_font} {\meta{void}}
%    Set the chapter font from global keys.
%  \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \set_chapter_font {%
  \exp_after:wN \setfontparam@cx\chapter_font_family;%
  \exp_after:wN \setfontparam@cx\chapter_font_size;%
  \exp_after:wN \setfontparam@cx\chapter_font_weight;%
  \exp_after:wN \setfontparam@cx\chapter_font_shape;%
}
\ExplSyntaxOff
%    \end{macrocode}
%

%
%   This is the main rendering routine for a generic block element. The element can either be
%    rendered in-line or as a block.
%
%    \#1  class of the element or id
%    \#2  the contents of the element e.g chapter or number.
%
%    Any element to be used here has to have a series of keys associated with it. They keep a naming
%    convention as for example,
%
%     |chapter border-left-width| \\
%     |chapter font-size|
%       
%    The prefix |chapter|  or |number|  or |title|  then enable to use the generic commands.
%    TeX is not an object orientated language, and future improvements are possible with LuaTeX.
%     
% {saveelementbox}
%    \begin{macrocode}
\ExplSyntaxOn
\def\saveelementbox#1#2#3{%
%    \end{macrocode}
% 
%  
%  Before we save the box, we set all its properties so we can measure it
%  correctly. As this is a generalized routine all properties use the prefix \#2
%  i.e., \meta{chapter}paddingtop etc.
%
%    \begin{macrocode}
   
   \expandafter\fboxseptop\csname#2paddingtop\endcsname
   \expandafter\fboxsepright\csname#2paddingright\endcsname
   \expandafter\fboxsepbottom\csname#2paddingbottom\endcsname
   \expandafter\fboxsepleft\csname#2paddingleft\endcsname
%
  \expandafter\fboxruletop\csname#2_border_top_width\endcsname\relax
  \expandafter\fboxruleright\csname#2_border_right_width\endcsname\relax
  \expandafter\fboxrulebottom\csname#2_border_bottom_width\endcsname\relax
  \expandafter\fboxruleleft\csname#2_border_left_width\endcsname\relax
%
%          
  \expandafter\savebox\csname#2namebox\endcsname{%
     %\fboxrule1pt\fboxsep1pt
       #3
      %\shadowbox{#3}%
       %\Ovalbox{#3}%
    
%       \doublebox{#3}
%      \hspace*{2cm}\tcbox[size=normal,
%         colframe=blue, colback =blue, borderline={2pt}{5pt}{black},
%         frame style={top color=blue, bottom color=black, 
%         left color=black, right color=black},
%            borderline west={2pt}{-2pt}{red},
%%        %
%        arc=5pt,outer arc=5pt, %!hyberbola
%        outer arc=3ptpt,rounded corners=all,
%        tikz={shape=star, text=white}]{#3}%
%      %
%        \tcbox[colframe=thelightgray,arc=5pt,%!hyberbola arcs 200
%      outer arc=5pt,rounded corners=all,
%      tikz={rotate=30}]{#3}%
 %         \phd@fbox{#3}%
  }%
}
\ExplSyntaxOff
%    \end{macrocode}
%
% \begin{docCommand} {print_chapter_name} {\marg{element name}} {\marg{element name}}
%   This function is a generalized macro that can be used to set and typeset
%   an element, working out all necessary floats.
% \end{docCommand}
%
%    \begin{macrocode}  
  \newcommand\printchaptername[2][chapter]{%
%    \end{macrocode}
% 
%    \begin{macrocode}
   \saveelementbox{}{#1}{#2}%   
%   if there is a margin on top set it      
%   #0 is inline   #2 block 
%   This decides if the element and subsequent elements are to be floated left or right. If the first element
%    is to be floated right, then all subsequent elements are floated right.
%    If we are on the first element, we set glue at the beginning to float all subsequent elements to the
%    right, if centered we do the same. 
%          <0  first element rendering
%           0    float left no glue
%           1    center inline 
%           2    right  - glue only at first element
%           3   float left and break
%           4   center and break
%           5   center no break 
%    
%     
%\global\setcounter{chapterfloat}{2}
%\global\setcounter{numberfloat}{2}
%  The following is only executed  for the first element, giving a signal as to how the next elements are to be floated
%  The first element is a negative number and hence will only be activated once.
%   
\setcounter{currentelementfloat}{\csname c@#1float\endcsname}%
      \ifcase \@arabic\c@currentelementfloat                      
                 \expandafter\renderleftblock{#1}\or         %0
                 \expandafter\rendercenterblock{#1}\or         %1
                 \expandafter\renderrightblock{#1}  \or         %2
                 \expandafter\renderinline{#1} \or          %3
      \else
                \rendercenterblock{#1}%
      \fi
%  We now can deal with any material that has to be rendered outside the |element| block, possibly material
%  such as horizontal or vertical rules.
   \ifnum\@arabic\c@numberdisplay=0
      %\hrule 
      %\csname#1after@cx\endcsname% 
     \else
     \@@par       
  \fi    
     }
    
%    \end{macrocode}
%
%  We now ready to render the text. If a border width has been defined we need to use
%  the |draw| property of the node to show it. If not we do not draw it. However, we might
%  still need to fill it, if a background color has been specified.  
%
%    
%  For block elements, i.e., elements that are allowed to float, we use a full line to float them. 
%    \begin{macrocode}
\def\rendercenterblock#1{%
       \appendtotoks{heading}{%
       \centerline{%
         \expandafter\unhcopy\csname#1namebox\endcsname
        }%
    }%
  }
%    \end{macrocode}  
% 
%    \begin{macrocode}
 \def\renderleftblock#1{%
   \appendtotoks{heading}{%
     % \leftline{%
         \expandafter\unhcopy\csname#1namebox\endcsname
      %}%
      }%
  }
  %
\def\renderrightblock#1{%
   \appendtotoks{heading}{%
     \rightline{%
         \expandafter\unhcopy\csname#1namebox\endcsname
      }% 
     }%   
}

\def\renderinline#1{%
  \appendtotoks{headingtoks}{%
     \leftline{%
         \expandafter\unhcopy\csname#1namebox\endcsname
      }%    
      }%  
    }

\def\renderboxcontents#1{%
        \drawmaybe{#1}%  
        \edef\tmp{\tempcmd@cx}
       \inshape[\expandafter\csname#1color@cx\endcsname,
                            fill=\expandafter\csname#1bgcolor\endcsname, 
                            ellipse, 
                            \expandafter\csname#1shape\endcsname, 
                            behind path,
                            line width=1pt,  %!fixme
                            \tmp,]{\expandafter\copy%
                                 \expandafter\csname#1namebox\endcsname}%
  }
%    \end{macrocode}
%
%
% \subsection{Author blocks}
% 
% {printauthorblock} 
%	An author author block is  printed for some chapter 
%	designs such as those in multi-author books, hence we provide a macro to typeset it. 
%	
%    \begin{macrocode}
\def\authorblockdebug{
\if@debug
    \tikz[remember picture,overlay] 
       \draw[<->] (0,0)--(0,0.5)--++(-.2,0)% 
              node[left,fill=blue!15,text=black]%
               {{\ttfamily\footnotesize author block=true}};%
  \fi  
}
\ExplSyntaxOn
\cs_new:Npn \print_author_block:
  {%
    \authorblockdebug
    \authorblockformat@cx\authorblock@cx
  }
 
%
%    \end{macrocode}
%   
%

%	We also provide a macro to typeset the number with appropriate
%	hooks for key value parameters.
%
%  \begin{docCommand}{setnumberfont}{}
%  sets the font for the number part of a chapter heading
% \end{docCommand}
%    \begin{macrocode}

\def\setnumberfont{%
    
    %\set_font_parameters:n {number}
  }%

%    \end{macrocode}

% 
%    \begin{macrocode}

\def\afteralignhook@cx{\par}
  \box_new:N \chapter_title_box
  \dim_new:N \chaptertitleboxwidth
  \dim_new:N \offset_for_center
  \dim_new:N \offset_for_right
  \dim_new:N \total_title_width
  \dim_new:N \title_bounding_box_width 
  \dim_set_eq:Nc \chaptertitleboxwidth {chapter_title_text_width}

%    \end{macrocode}
%
%
%   \begin{docCommand} {print_chapter_title} { \meta{contents} }
%   This function is responsible to make the chapter title. It receives one parameter
%   which comes from the |\chapter|  command and is the contents of the title.
%   \end{docCommand}
%
%    \begin{macrocode}


\cs_new:Npn \print_chapter_title #1 
 {
      \if@titlespaceout
         \long\def\SSS{{\so{#1}}}
      \else
         \long\def\SSS{#1}
      \fi%
  

			\dim_gset:Nn \total_title_width %including padding+borders
			    {
			        \chapter_title_text_width % text width
			       +\title_border_left_width
			       +\title_border_right_width
			       +\title_padding_left_width
			       +\title_padding_right_width
			     }
%	   
     \savebox \chapter_title_box {% 
        \begin{tcolorbox}[
           size=minimal,
           colback=spot!15,
           colframe=spot!15]
           \set_font_parameters:n {title}
           \chapter_title_text_align%
           \language-1
           \SSS\par %NEW NEW CHECK
        \end{tcolorbox}         
      } 
     
%%    \end{macrocode}
%%
%%   Having measured the title block, we now typeset it. Before we typeset it
%%   we will provide borders all around if required and also allow for padding. 
%%   We will not repeat the browser wars here, so we will provide the borders
%%   outside the block and the padding inside.
%%   
%%   Once we done we append everything to the heading toks.
%%  
%%    \begin{macrocode}

    \appendtotoks{heading}{%

%%    \end{macrocode}
%%  We first add the before hook
%%  This is normally used to put ornaments or rules before the title text
%%  block.
%%    \begin{macrocode}
  
    \dim_gset:Nn \title_bounding_box_width %width defined by kernel!strange error here
      {
        \chapter_title_text_width
        +\title_border_left_width
        +\title_border_right_width
        + \title_padding_left_width
        + \title_padding_right_width  
      }
%%    \end{macrocode}
%%
%%   Having measured the title block, we now typeset it. Before we typeset it
%%   we will provide borders all around if required and also allow for padding. 
%%   We will not repeat the browser wars here, so we will provide the borders
%%   outside the block and the padding inside.
%%   
%%   Once we done we append everything to the heading toks.
%    \begin{macrocode} 
    \dim_gset:Nn \offset_for_center { ( (\linewidth - \chapter_title_text_width)/2) }
    \dim_gset:Nn \offset_for_right {(\linewidth-\chapter_title_text_width)}
    \dim_gset:Nn \l_tmpa_dim {0pt}
    \dim_gset:Nn \l_tmpb_dim {0pt}
    \tcbset{centered/.style={
          width=\chapter_title_text_width, 
          boxrule=0pt,boxsep=0pt,
          left=0pt,right=0pt,
          leftright~skip=0pt,
          middle=0pt,arc=0pt,toptitle=0pt,bottomtitle=0pt,
          before={\vskip1pt},
          after={\vskip1pt},
          colback=spot!15}
             }
                
    \tcbset{floatright/.style={
             width=\chapter_title_text_width, 
             boxrule=0pt,
             boxsep=0pt,
             left=0pt,
             right=0pt,
             top=0pt,
             bottom=0pt,
             left~skip=-\offset_for_right-\offset_for_right,
            % right~skip=0pt,
%             leftright~skip=0cm,
             %middle=0pt,arc=0pt,toptitle=0pt,bottomtitle=0pt,
             before={\vskip1pt},
             after={\vskip1pt}}
                }             
%         \par\rule{\linewidth}{2pt}\vskip0pt
    \begin{tcolorbox}[
          centered,
          width=\offset_for_right,
          colback=spot!15,
          colframe=spot!30]
           % Before
         \end{tcolorbox}      
        %\hspace*{3cm}
        \begin{tcolorbox}[
           floatright,
           colback=spot!15,
           colframe=spot!50]
           \set_font_parameters:n {title}
           \chapter_title_text_align%
           \language-1
           \SSS\par %NEW NEW CHECK
        \end{tcolorbox} 
    }%appendtotoks 
    
}
\ExplSyntaxOff
%    \end{macrocode}

% 
%
% \begin{docCommand}{make_chapter_head} {\marg{optional part of chapter}}{\marg{title}}
%	 The macro calls the main typesetting activities of the chaper head
%	 We begin our typesetting by checking, if the macro has a special
%	 design which we then call.
%  This is a replacement macro for \latexe |\@make_chapter_head|. We get it here
%  with two parameters in order to set also the chaptermark
%  \end{docCommand}
%
%    \begin{macrocode}
%    \newif\if@mainmatter \@mainmatterfalse CHECK THIS NOT NECESSARY
%
%
%    \end{macrocode}
% 
%  \begin{docCommand}{appendtotoks} { \marg{toks name} \marg{contents}}  
%   The command \cmd{\appendtotoks} is just a helper macro to append tokens to a
%   token register, defined as \meta{element name}|toks|. 
%  \end{docCommand}
%
%  \begin{docCommand}{prependtotoks} { \marg{toks name} \marg{contents}}    
%   The command \cmd{\prependtotoks} is just a helper macro to prepend tokens to a
%   token register, defined as \meta{element name}|toks|. 
%  \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \appendtotoks #1#2
  {
    \expandafter\expandafter\expandafter\csname#1toks\endcsname\expandafter{
      \the\csname#1toks\endcsname #2}
  }
\cs_new:Npn \prependtotoks #1#2
  {
    \expandafter\expandafter\expandafter\csname#1toks\endcsname\expandafter{
      #2 \the\csname#1toks\endcsname }
  }  
\ExplSyntaxOff
%    \end{macrocode}
% 
%
%    \begin{macrocode}
\ExplSyntaxOn
\def\set_number: {
  \appendtotoks{number}{\numberbefore@cx}%
  \appendtotoks{number}{\color{blue}%chapter_number_color
  \appendtotoks{number}{\setnumberfont}%     
  \if@chapterspaceout
     \if@soulspaceout
         \expandafter\appendtotoks{number}{\so\thechapter}%
      \fi
   \else
      \expandafter\appendtotoks{number}{\thechapter}%   
   \fi   
   \appendtotoks{number}{\numberafter@cx}%
}
\ExplSyntaxOff
%    \end{macrocode}
%  
%   \begin{docCommand}{make_chapter_head}{\oarg{contents}\marg{contents}}
%     This is where everything happens. If the design is special
%     it is by-passed and send to the custom layout renderer.
%
%     The engine first assembles all the elements that make up the
%     the chapter head and inserts them into a sequence list.
%     The macros are then expanded by the typesetting section of the 
%     layout engine.
%
%   \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
%
\cs_gset:Npn \make_chapter_head #1 #2
  {  
%    \end{macrocode}
%
% 	We now ready to typeset the chapter heading, we run everything 
% 	within a group and
% 	activate the chapter only if the |thesecumdepth>-1| and if only we are 
% 	within mainmatter. 
%
%    \begin{macrocode}
    \tex_parindent:D 0pt 
      %\offinterlineskip
      %
    \normalfont%
%  \ifnum \c@secnumdepth>\m@ne%
%    \if@mainmatter%
%    \end{macrocode}
%
% We first check if we need to print anything before the chapter head, as for
% example an image or a graphic, we then check if the number is to the left of
% the right of the image and typeset it. We follow it by printing any chapter
% 
%    \begin{macrocode}
    \tex_lineskip:D 0pt% 
    \tex_topskip:D 0pt%check this out
    %\chaptermargintop@cx%
    \leavevmode% 
%    \end{macrocode}
%
%  The typesetting of the chapter and number combination and as a matter of fact
%  any generalized string of element blocks depends if the value of the property |display|
%  is inline, inline block or block. A block can float freely, whereas the others restrict the
%  typesetting to a linear mode.
%
%  Both token registers have a common part and a unique part
%    \begin{macrocode}
      \set_number:
%    \end{macrocode}
%
%    In terms of the language semantics, I am not too sure, what should happen, if the
%    heading does not have a name (should all its properties be nullified and be taken 
%    over by the next element? Needs thought and I will revisit this.
%
%    \begin{macrocode}  
       \xdef\xtemp{\chaptername}%
       \xdef\ytemp{}%         
       \ifx\xtemp\ytemp%
          \printchaptername[number]{\the\numbertoks}%               
       \else
%    \end{macrocode}   
%  
%  We collect all the commands in a token register. We start with the color and font
%  settings which we add in a group.
%             
%  Any before property means vertical mode by definition, we do this by means of a |vskip0pt|
%    \begin{macrocode}
       \appendtotoks{chapterprelim}{\leavevmode \chapter_before\vskip0pt}
       \appendtotoks{chapter}
         {
           \leavevmode\noindent
           \color{\chapter_color}
           \set_chapter_font
         }
       \appendtotoks{chapter}{\chapter_before_content}  
                 
           %\if@chapterspaceout
               \expandafter
  %               \so{\chaptername}}%PROBLEMS FIX
                                             
%           \else
              \appendtotoks{chapter}{\chaptername}%
 %          \fi   
         
%
%    \end{macrocode}
%
%  Next we need to add the tokens for decorating the number. We expect all headings to ne
%  numbered if the word `chapter’ is prefixed to the heading. 
%    
%
%    \begin{macrocode} 
        \ifnum\thenumberdisplay=0 %                    
          \appendtotoks{chapter}{\kern0.5em}%
          \appendtotoks{chapter}{\the\numbertoks\numberaftercontent@cx}%
%    \end{macrocode}
%
%   We are done with inline headings and we can typeset them.
%    \begin{macrocode}
%   
              \the\chapterprelimtoks                 
              \printchaptername[chapter]{\the\chaptertoks}%
                 %
%    \end{macrocode}
%
%  If both the chapter name as well as the number are displayed as blocks
%  we typeset them in two operations.
%
%    \begin{macrocode}                  
          \else
                %\the\chapterprelimtoks%
                \expandafter\printchaptername[chapter]{\the\chaptertoks}%
                \expandafter\printchaptername[chapter]{\the\numbertoks}%
        \fi%ifnum  


  \set_chapter_title:nn {#1}{#2} 
  \appendtotoks{heading}{
       \begin{tcolorbox}[
          centered,
          left=0pt,right=0pt,colback=spot!15,
          ]
         %after~title
       \end{tcolorbox}}
 \typeset_heading:   
 }      
\ExplSyntaxOff 
%    \end{macrocode}
%

% \begin{docCommand}{set_chapter_title:nn} {\marg{arg1}}{\marg{arg2}}
%   sets all the parameters for the chapter title block.
% \end{docCommand}

%    \begin{macrocode}
\ExplSyntaxOn
\cs_new:Npn \set_chapter_title:nn #1#2{
    \if@chaptertitlespecial%
       \csname ethics\endcsname{#2}%
    \else%
       \print_chapter_title { #2 }
     \fi
}     
\ExplSyntaxOff
%    \end{macrocode}       
%
% Now we ready to add the contents in an outer box or vbox will see 
%    \begin{macrocode} 
\ExplSyntaxOn
\cs_new:Npn \author_block_aux: {
   \skip_vertical:n \title_margin_bottom
      \if@authorblock 
           \print_author_block:
           \authorblockafterskip@cx
      \fi%
    \tex_par:D
    \nobreak%
   %
}%
\ExplSyntaxOff
%    \end{macrocode}
%    \begin{macrocode}
\tcbset{centered/.style={
             width=\linewidth, 
             boxrule=0pt,boxsep=0pt,left=0pt,right=0pt,
             leftright~skip=0cm,middle=0pt,arc=0pt,toptitle=0pt,bottomtitle=0pt,
             before={\vskip1pt},
             after={\vskip1pt}}
            }
%    \end{macrocode}
%    \begin{macrocode}  
\ExplSyntaxOn              
\cs_new:Npn \typeset_heading: {
 
       \parindent0pt
       \begin{tcolorbox}[
         width=\textwidth, 
         boxrule=0pt,
         boxsep=0pt,
         leftright~skip=0cm,
         middle=0pt,
         arc=3pt,
         toptitle=0pt,
         bottomtitle=0pt,
         left=0pt,
         right=0pt,
         before={\vskip1pt},
         after={\vskip1pt},
         oversize=0cm,
         colback=spot!15,
         colframe=white,
         ]
        %\parindent1em       
        \the\headingtoks
       \end{tcolorbox}
% Need to empty the toks after we typeset them!!! Or use them in a group
% Add to notes for pittraps of heading management!       
  \headingtoks{}  
  %\headingstoks{} 
  \numbertoks{}
  \chaptertoks{}
  \chapterprelimtoks {}  
  \author_block_aux:  
   
  }   
\ExplSyntaxOff
%    \end{macrocode}
% 
%
%
% {chapter} The \cs{chapter} is modified to
% 	add hooks for openings and headers. 
% 	The |book| standard class states that a chapter should
% 	always start on a new page. In reality many book styles
%	allow the chapter heading to be continuous i.e., more
%	like a section. \label{code:chapterafterindent} 
%    \begin{macrocode}
\global\newif\if@chapterafterindent@cx \@chapterafterindent@cxtrue
%    \end{macrocode}
%
%  We set keys for |\afterindent| to enable it via the key value interface
%  
%    \begin{macrocode}
\cxset{chapter afterindent/.is choice,
           chapter afterindent/true/.code=\gdef\chapterafterindent@cx{%
                                                            \global\@chapterafterindent@cxtrue},
           chapter afterindent/false/.code=\gdef\chapterafterindent@cx{%
            \global\@chapterafterindent@cxfalse},
}           
% We set this to false by default
\cxset{chapter afterindent=true}
% call it after a heading
%    \end{macrocode}
% \begin{docCommand}{chapter_after_heading:}{ \meta{void} }
%   This is a hook, that is called after the chapter heading is typeset in
%   order to control the indentation of the first paragraph.
%   It is based on similar code from \latexe and we explorify it.
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \chapter_after_heading:
  {
    \@nobreaktrue
    \everypar
      {
         \if@nobreak
           \@nobreakfalse
           \clubpenalty \@M
           \if@chapterafterindent@cx \else
             {\setbox\z@\lastbox}
           \fi
         \else
         \clubpenalty \@clubpenalty
         \everypar {}
         \fi
      }
  }
\ExplSyntaxOff  
%    \end{macrocode} 
% 
%  \begin{docCommand}{chapter} {\oarg{short title}\marg{contents}}
%  We renew |\chapter| after we save its old definition
%  \end{docCommand}
%
%    \begin{macrocode}
\ExplSyntaxOn
\let\ltxchapter\chapter
%

\renewcommand\chapter
  {
    \if@openright\cleardoublepage\fi
    \if@openleft\cleartoevenpage\fi
    \if@openany\clearpage\fi
%    \end{macrocode}
%  
%	Floats are prevented from floating at the top of chapter
%	opening pages as they look out of place.
% 	|\headerstyle@cx| defaults to empty.
%    Then we suppress the indentation of the first paragraph by
%    setting the switch |\@afterindent| to |false|. We use |\secdef|
%    to specify the macros to use for actually setting the chapter
%    title.
%
%    \begin{macrocode}
    \thispagestyle{empty}
    \global\@topnum\z@~%
%    \end{macrocode}
%
% We provide a hook to handle indentation after a chapter. This would 
% also necessitate to change the afterheading macro and make it specific 
% to a chapter head.
%    \begin{macrocode}  
      \@chapterafterindent@cxfalse
   % \@afterindentfalse
%    \end{macrocode}
% 
%
% 	Everything is now ready to call |secdef|, which is defined in the
% 	kernel. This command takes two arguments and calls the auxiliary
% 	macros for starred and unstarred commands. 
%
%    \begin{macrocode}
      \secdef\__chapter\@schapter
   }%[optional]{title} follows
\ExplSyntaxOff
%    \end{macrocode}
%
% We first define the unstarred version of the command.
% This is modified to include
% our hooks.
%%    \begin{macrocode}
\newif\if@tocspecial\@tocfalse
\def\formattoctitle{}
% 
%    \end{macrocode}
%
% \begin{docCommand}{__chapter} {\marg{}\marg{}}
%    This macro is called when we have a numbered chapter. When
%    |secnumdepth| is larger than $-1$ and, in the book
%    class, |\@mainmatter| is true, we display the chapter
%    number. We also inform the user that a new chapter is about to be
%    typeset by writing a message to the terminal. We hook
%	 here to add a number of typesetting key value macros.
%	
%    \#1 what to write in toc if has optional argument
%    \#2 title
% 
%   
%   The non-star form of the command.
%  
%   \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \__chapter [#1]#2 
  {
  %\refstepcounter{chapter}%
    \ifnum \c@secnumdepth >\m@ne%
      \if@mainmatter
        \if@toc% added extra if
          \refstepcounter{chapter}%
          \typeout{\@chapapp\space\thechapter.}%
          \def\tocchapternumber@cx{\@arabic\c@chapter}%to move over
          \phantomsection
          \addcontentsline{toc}{chapter}
            {
              \protect\numberline{Chapter~\tocchapternumber@cx~}{#1}
         %\protect\chapternumberline{\tocchapternumber@cx}{#1}{\tocimage@cx}
            }
        \fi%
            %\fi%
      \else
          \addcontentsline{toc}{chapter}{#1APAPAP}%for prelims???
      \fi%
    \else%
      \addcontentsline{toc}{chapter}{#1PPP}%????? for part
    \fi%secnumdepth
%    \end{macrocode}
%
%	After having written the entry to the table of contents we
%	store the alternative title of this chapter with |\chaptermark|
%	and add some white space to the lists of figures and tables.
%    In one column mode we call \refCom{chapter_after_heading:} which takes care 
%	of supressing the indentation after a chapter heading. Then
% we hand over the typesetting to \refCom{make_chapter_head}, which
% is the work-horse of the package. 
%
%    \begin{macrocode}
  \chaptermark{#1}%
  \addtocontents{lof}{\protect\addvspace{10\p@}}%
  \addtocontents{lot}{\protect\addvspace{10\p@}}%
     \if@twocolumn
         \@topnewpage[\make_chapter_head {#1} {#2}]%
      \else%
%         \if@special
%            \customdesign@cx{#2}%needs to go different 
%         \else
            \make_chapter {#1} {#2}%
%         \fi
%    \end{macrocode}
%
% Next we call \refCom{chapter_after_heading:} to set the indentation
% after the heading is typeset.
%    \begin{macrocode}         
          \chapter_after_heading:
      \fi
   }

% Although the css box model is good, some simpler designs have their
% own renderers.
%     
\cs_new:Npn \make_chapter #1 #2
  {

    \str_case_x:nnTF { box }  
     {
       { traditional} { \format_part_traditional:nn { chapter } { #1 } { #2 } }
       { box        } { \format_head_boxed:nn       { chapter } { #1 } { #2 } } 
       { inline     } { \format_head_inline:nn      { chapter } { #1 } { #2 } }
       { inmargin   } { \format_head_inmargin:nn    { chapter } { #1 } { #2 } }
       { css        } { \make_chapter_head {#1} {#2}                          }
      }
      {                                           }
      { \cs:w stewartpart\cs_end: {chapter} {#1}  }
   }
        
\ExplSyntaxOff   
%    \end{macrocode}
% 
%    \begin{macrocode}
\cxset{toc image/.store in = \tocimage@cx}
\cxset{toc image ={}}
%
%    \end{macrocode}
%</SECT>
\endinput    